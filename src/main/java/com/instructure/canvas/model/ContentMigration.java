/*
 * canvas.instructure.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.instructure.canvas.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.OffsetDateTime;

/**
 * ContentMigration
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-11-06T15:34:49.014533Z[Europe/London]")
public class ContentMigration {

  @JsonProperty("attachment")

  private String attachment = null;

  @JsonProperty("finished_at")

  private OffsetDateTime finishedAt = null;

  @JsonProperty("id")

  private Integer id = null;

  @JsonProperty("migration_issues_url")

  private String migrationIssuesUrl = null;

  @JsonProperty("migration_type")

  private String migrationType = null;

  @JsonProperty("migration_type_title")

  private String migrationTypeTitle = null;

  @JsonProperty("pre_attachment")

  private String preAttachment = null;

  @JsonProperty("progress_url")

  private String progressUrl = null;

  @JsonProperty("started_at")

  private OffsetDateTime startedAt = null;

  @JsonProperty("user_id")

  private Integer userId = null;

  @JsonProperty("workflow_state")

  private String workflowState = null;
  public ContentMigration attachment(String attachment) {
    this.attachment = attachment;
    return this;
  }

  

  /**
  * attachment api object for the uploaded file may not be present for all migrations
  * @return attachment
  **/
  @Schema(example = "{\"url\"=>\"https://example.com/api/v1/courses/1/content_migrations/1/download_archive\"}", description = "attachment api object for the uploaded file may not be present for all migrations")
  public String getAttachment() {
    return attachment;
  }
  public void setAttachment(String attachment) {
    this.attachment = attachment;
  }
  public ContentMigration finishedAt(OffsetDateTime finishedAt) {
    this.finishedAt = finishedAt;
    return this;
  }

  

  /**
  * timestamp
  * @return finishedAt
  **/
  @Schema(description = "timestamp")
  public OffsetDateTime getFinishedAt() {
    return finishedAt;
  }
  public void setFinishedAt(OffsetDateTime finishedAt) {
    this.finishedAt = finishedAt;
  }
  public ContentMigration id(Integer id) {
    this.id = id;
    return this;
  }

  

  /**
  * the unique identifier for the migration
  * @return id
  **/
  @Schema(example = "370663", description = "the unique identifier for the migration")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }
  public ContentMigration migrationIssuesUrl(String migrationIssuesUrl) {
    this.migrationIssuesUrl = migrationIssuesUrl;
    return this;
  }

  

  /**
  * API url to the content migration&#x27;s issues
  * @return migrationIssuesUrl
  **/
  @Schema(example = "https://example.com/api/v1/courses/1/content_migrations/1/migration_issues", description = "API url to the content migration's issues")
  public String getMigrationIssuesUrl() {
    return migrationIssuesUrl;
  }
  public void setMigrationIssuesUrl(String migrationIssuesUrl) {
    this.migrationIssuesUrl = migrationIssuesUrl;
  }
  public ContentMigration migrationType(String migrationType) {
    this.migrationType = migrationType;
    return this;
  }

  

  /**
  * the type of content migration
  * @return migrationType
  **/
  @Schema(example = "common_cartridge_importer", description = "the type of content migration")
  public String getMigrationType() {
    return migrationType;
  }
  public void setMigrationType(String migrationType) {
    this.migrationType = migrationType;
  }
  public ContentMigration migrationTypeTitle(String migrationTypeTitle) {
    this.migrationTypeTitle = migrationTypeTitle;
    return this;
  }

  

  /**
  * the name of the content migration type
  * @return migrationTypeTitle
  **/
  @Schema(example = "Canvas Cartridge Importer", description = "the name of the content migration type")
  public String getMigrationTypeTitle() {
    return migrationTypeTitle;
  }
  public void setMigrationTypeTitle(String migrationTypeTitle) {
    this.migrationTypeTitle = migrationTypeTitle;
  }
  public ContentMigration preAttachment(String preAttachment) {
    this.preAttachment = preAttachment;
    return this;
  }

  

  /**
  * file uploading data, see {file:file_uploads.html File Upload Documentation} for file upload workflow This works a little differently in that all the file data is in the pre_attachment hash if there is no upload_url then there was an attachment pre-processing error, the error message will be in the message key This data will only be here after a create or update call
  * @return preAttachment
  **/
  @Schema(example = "{\"upload_url\"=>\"\", \"message\"=>\"file exceeded quota\", \"upload_params\"=>{}}", description = "file uploading data, see {file:file_uploads.html File Upload Documentation} for file upload workflow This works a little differently in that all the file data is in the pre_attachment hash if there is no upload_url then there was an attachment pre-processing error, the error message will be in the message key This data will only be here after a create or update call")
  public String getPreAttachment() {
    return preAttachment;
  }
  public void setPreAttachment(String preAttachment) {
    this.preAttachment = preAttachment;
  }
  public ContentMigration progressUrl(String progressUrl) {
    this.progressUrl = progressUrl;
    return this;
  }

  

  /**
  * The api endpoint for polling the current progress
  * @return progressUrl
  **/
  @Schema(example = "https://example.com/api/v1/progress/4", description = "The api endpoint for polling the current progress")
  public String getProgressUrl() {
    return progressUrl;
  }
  public void setProgressUrl(String progressUrl) {
    this.progressUrl = progressUrl;
  }
  public ContentMigration startedAt(OffsetDateTime startedAt) {
    this.startedAt = startedAt;
    return this;
  }

  

  /**
  * timestamp
  * @return startedAt
  **/
  @Schema(description = "timestamp")
  public OffsetDateTime getStartedAt() {
    return startedAt;
  }
  public void setStartedAt(OffsetDateTime startedAt) {
    this.startedAt = startedAt;
  }
  public ContentMigration userId(Integer userId) {
    this.userId = userId;
    return this;
  }

  

  /**
  * The user who started the migration
  * @return userId
  **/
  @Schema(example = "4", description = "The user who started the migration")
  public Integer getUserId() {
    return userId;
  }
  public void setUserId(Integer userId) {
    this.userId = userId;
  }
  public ContentMigration workflowState(String workflowState) {
    this.workflowState = workflowState;
    return this;
  }

  

  /**
  * Current state of the content migration: pre_processing, pre_processed, running, waiting_for_select, completed, failed
  * @return workflowState
  **/
  @Schema(example = "running", description = "Current state of the content migration: pre_processing, pre_processed, running, waiting_for_select, completed, failed")
  public String getWorkflowState() {
    return workflowState;
  }
  public void setWorkflowState(String workflowState) {
    this.workflowState = workflowState;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentMigration contentMigration = (ContentMigration) o;
    return Objects.equals(this.attachment, contentMigration.attachment) &&
        Objects.equals(this.finishedAt, contentMigration.finishedAt) &&
        Objects.equals(this.id, contentMigration.id) &&
        Objects.equals(this.migrationIssuesUrl, contentMigration.migrationIssuesUrl) &&
        Objects.equals(this.migrationType, contentMigration.migrationType) &&
        Objects.equals(this.migrationTypeTitle, contentMigration.migrationTypeTitle) &&
        Objects.equals(this.preAttachment, contentMigration.preAttachment) &&
        Objects.equals(this.progressUrl, contentMigration.progressUrl) &&
        Objects.equals(this.startedAt, contentMigration.startedAt) &&
        Objects.equals(this.userId, contentMigration.userId) &&
        Objects.equals(this.workflowState, contentMigration.workflowState);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(attachment, finishedAt, id, migrationIssuesUrl, migrationType, migrationTypeTitle, preAttachment, progressUrl, startedAt, userId, workflowState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentMigration {\n");
    
    sb.append("    attachment: ").append(toIndentedString(attachment)).append("\n");
    sb.append("    finishedAt: ").append(toIndentedString(finishedAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    migrationIssuesUrl: ").append(toIndentedString(migrationIssuesUrl)).append("\n");
    sb.append("    migrationType: ").append(toIndentedString(migrationType)).append("\n");
    sb.append("    migrationTypeTitle: ").append(toIndentedString(migrationTypeTitle)).append("\n");
    sb.append("    preAttachment: ").append(toIndentedString(preAttachment)).append("\n");
    sb.append("    progressUrl: ").append(toIndentedString(progressUrl)).append("\n");
    sb.append("    startedAt: ").append(toIndentedString(startedAt)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    workflowState: ").append(toIndentedString(workflowState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
