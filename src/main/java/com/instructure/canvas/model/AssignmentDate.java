/*
 * canvas.instructure.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.instructure.canvas.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.OffsetDateTime;

/**
 * Object representing a due date for an assignment or quiz. If the due date came from an assignment override, it will have an &#x27;id&#x27; field.
 */
@Schema(description = "Object representing a due date for an assignment or quiz. If the due date came from an assignment override, it will have an 'id' field.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-11-06T15:34:49.014533Z[Europe/London]")
public class AssignmentDate {

  @JsonProperty("base")

  private Boolean base = null;

  @JsonProperty("due_at")

  private OffsetDateTime dueAt = null;

  @JsonProperty("id")

  private Integer id = null;

  @JsonProperty("lock_at")

  private OffsetDateTime lockAt = null;

  @JsonProperty("title")

  private String title = null;

  @JsonProperty("unlock_at")

  private OffsetDateTime unlockAt = null;
  public AssignmentDate base(Boolean base) {
    this.base = base;
    return this;
  }

  

  /**
  * (Optional, present if &#x27;id&#x27; is missing) whether this date represents the assignment&#x27;s or quiz&#x27;s default due date
  * @return base
  **/
  @Schema(example = "true", description = "(Optional, present if 'id' is missing) whether this date represents the assignment's or quiz's default due date")
  public Boolean isBase() {
    return base;
  }
  public void setBase(Boolean base) {
    this.base = base;
  }
  public AssignmentDate dueAt(OffsetDateTime dueAt) {
    this.dueAt = dueAt;
    return this;
  }

  

  /**
  * The due date for the assignment. Must be between the unlock date and the lock date if there are lock dates
  * @return dueAt
  **/
  @Schema(description = "The due date for the assignment. Must be between the unlock date and the lock date if there are lock dates")
  public OffsetDateTime getDueAt() {
    return dueAt;
  }
  public void setDueAt(OffsetDateTime dueAt) {
    this.dueAt = dueAt;
  }
  public AssignmentDate id(Integer id) {
    this.id = id;
    return this;
  }

  

  /**
  * (Optional, missing if &#x27;base&#x27; is present) id of the assignment override this date represents
  * @return id
  **/
  @Schema(example = "1", description = "(Optional, missing if 'base' is present) id of the assignment override this date represents")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }
  public AssignmentDate lockAt(OffsetDateTime lockAt) {
    this.lockAt = lockAt;
    return this;
  }

  

  /**
  * The lock date for the assignment. Must be after the due date if there is a due date.
  * @return lockAt
  **/
  @Schema(description = "The lock date for the assignment. Must be after the due date if there is a due date.")
  public OffsetDateTime getLockAt() {
    return lockAt;
  }
  public void setLockAt(OffsetDateTime lockAt) {
    this.lockAt = lockAt;
  }
  public AssignmentDate title(String title) {
    this.title = title;
    return this;
  }

  

  /**
  * Get title
  * @return title
  **/
  @Schema(example = "Summer Session", description = "")
  public String getTitle() {
    return title;
  }
  public void setTitle(String title) {
    this.title = title;
  }
  public AssignmentDate unlockAt(OffsetDateTime unlockAt) {
    this.unlockAt = unlockAt;
    return this;
  }

  

  /**
  * The unlock date for the assignment. Must be before the due date if there is a due date.
  * @return unlockAt
  **/
  @Schema(description = "The unlock date for the assignment. Must be before the due date if there is a due date.")
  public OffsetDateTime getUnlockAt() {
    return unlockAt;
  }
  public void setUnlockAt(OffsetDateTime unlockAt) {
    this.unlockAt = unlockAt;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssignmentDate assignmentDate = (AssignmentDate) o;
    return Objects.equals(this.base, assignmentDate.base) &&
        Objects.equals(this.dueAt, assignmentDate.dueAt) &&
        Objects.equals(this.id, assignmentDate.id) &&
        Objects.equals(this.lockAt, assignmentDate.lockAt) &&
        Objects.equals(this.title, assignmentDate.title) &&
        Objects.equals(this.unlockAt, assignmentDate.unlockAt);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(base, dueAt, id, lockAt, title, unlockAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssignmentDate {\n");
    
    sb.append("    base: ").append(toIndentedString(base)).append("\n");
    sb.append("    dueAt: ").append(toIndentedString(dueAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lockAt: ").append(toIndentedString(lockAt)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    unlockAt: ").append(toIndentedString(unlockAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
