/*
 * canvas.instructure.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.instructure.canvas.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;

/**
 * QuizSubmissionQuestion
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-11-06T15:34:49.014533Z[Europe/London]")
public class QuizSubmissionQuestion {

  @JsonProperty("answer")

  private String answer = null;

  @JsonProperty("answers")

  private List<String> answers = null;

  @JsonProperty("flagged")

  private Boolean flagged = null;

  @JsonProperty("id")

  private Long id = null;
  public QuizSubmissionQuestion answer(String answer) {
    this.answer = answer;
    return this;
  }

  

  /**
  * The provided answer (if any) for this question. The format of this parameter depends on the type of the question, see the Appendix for more information.
  * @return answer
  **/
  @Schema(description = "The provided answer (if any) for this question. The format of this parameter depends on the type of the question, see the Appendix for more information.")
  public String getAnswer() {
    return answer;
  }
  public void setAnswer(String answer) {
    this.answer = answer;
  }
  public QuizSubmissionQuestion answers(List<String> answers) {
    this.answers = answers;
    return this;
  }

  public QuizSubmissionQuestion addAnswersItem(String answersItem) {
    if (this.answers == null) {
      this.answers = new ArrayList<String>();
    }
    this.answers.add(answersItem);
    return this;
  }

  /**
  * The possible answers for this question when those possible answers are necessary.  The presence of this parameter is dependent on permissions.
  * @return answers
  **/
  @Schema(description = "The possible answers for this question when those possible answers are necessary.  The presence of this parameter is dependent on permissions.")
  public List<String> getAnswers() {
    return answers;
  }
  public void setAnswers(List<String> answers) {
    this.answers = answers;
  }
  public QuizSubmissionQuestion flagged(Boolean flagged) {
    this.flagged = flagged;
    return this;
  }

  

  /**
  * Whether this question is flagged.
  * @return flagged
  **/
  @Schema(example = "true", description = "Whether this question is flagged.")
  public Boolean isFlagged() {
    return flagged;
  }
  public void setFlagged(Boolean flagged) {
    this.flagged = flagged;
  }
  public QuizSubmissionQuestion id(Long id) {
    this.id = id;
    return this;
  }

  

  /**
  * The ID of the QuizQuestion this answer is for.
  * @return id
  **/
  @Schema(example = "1", required = true, description = "The ID of the QuizQuestion this answer is for.")
  public Long getId() {
    return id;
  }
  public void setId(Long id) {
    this.id = id;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuizSubmissionQuestion quizSubmissionQuestion = (QuizSubmissionQuestion) o;
    return Objects.equals(this.answer, quizSubmissionQuestion.answer) &&
        Objects.equals(this.answers, quizSubmissionQuestion.answers) &&
        Objects.equals(this.flagged, quizSubmissionQuestion.flagged) &&
        Objects.equals(this.id, quizSubmissionQuestion.id);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(answer, answers, flagged, id);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuizSubmissionQuestion {\n");
    
    sb.append("    answer: ").append(toIndentedString(answer)).append("\n");
    sb.append("    answers: ").append(toIndentedString(answers)).append("\n");
    sb.append("    flagged: ").append(toIndentedString(flagged)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
