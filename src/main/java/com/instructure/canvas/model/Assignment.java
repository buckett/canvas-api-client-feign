/*
 * canvas.instructure.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.instructure.canvas.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.instructure.canvas.model.AssignmentDate;
import com.instructure.canvas.model.AssignmentOverride;
import com.instructure.canvas.model.DiscussionTopic;
import com.instructure.canvas.model.ExternalToolTagAttributes;
import com.instructure.canvas.model.LockInfo;
import com.instructure.canvas.model.NeedsGradingCount;
import com.instructure.canvas.model.RubricCriteria;
import com.instructure.canvas.model.Submission;
import com.instructure.canvas.model.TurnitinSettings;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * Assignment
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-11-06T15:34:49.014533Z[Europe/London]")
public class Assignment {

  @JsonProperty("all_dates")

  private List<AssignmentDate> allDates = null;

  @JsonProperty("allowed_extensions")

  private List<String> allowedExtensions = null;

  @JsonProperty("anonymous_submissions")

  private Boolean anonymousSubmissions = null;

  @JsonProperty("assignment_group_id")

  private Integer assignmentGroupId = null;

  @JsonProperty("assignment_visibility")

  private List<Integer> assignmentVisibility = null;

  @JsonProperty("automatic_peer_reviews")

  private Boolean automaticPeerReviews = null;

  @JsonProperty("course_id")

  private Integer courseId = null;

  @JsonProperty("created_at")

  private OffsetDateTime createdAt = null;

  @JsonProperty("description")

  private String description = null;

  @JsonProperty("discussion_topic")

  private DiscussionTopic discussionTopic = null;

  @JsonProperty("due_at")

  private OffsetDateTime dueAt = null;

  @JsonProperty("due_date_required")

  private Boolean dueDateRequired = null;

  @JsonProperty("external_tool_tag_attributes")

  private ExternalToolTagAttributes externalToolTagAttributes = null;

  @JsonProperty("freeze_on_copy")

  private Boolean freezeOnCopy = null;

  @JsonProperty("frozen")

  private Boolean frozen = null;

  @JsonProperty("frozen_attributes")

  private List<String> frozenAttributes = null;

  @JsonProperty("grade_group_students_individually")

  private Boolean gradeGroupStudentsIndividually = null;

  @JsonProperty("grading_standard_id")

  private Integer gradingStandardId = null;

  @JsonProperty("grading_type")

  private String gradingType = null;

  @JsonProperty("group_category_id")

  private Integer groupCategoryId = null;

  @JsonProperty("has_overrides")

  private Boolean hasOverrides = null;

  @JsonProperty("has_submitted_submissions")

  private Boolean hasSubmittedSubmissions = null;

  @JsonProperty("html_url")

  private String htmlUrl = null;

  @JsonProperty("id")

  private Integer id = null;

  @JsonProperty("integration_data")

  private String integrationData = null;

  @JsonProperty("integration_id")

  private String integrationId = null;

  @JsonProperty("intra_group_peer_reviews")

  private Boolean intraGroupPeerReviews = null;

  @JsonProperty("lock_at")

  private OffsetDateTime lockAt = null;

  @JsonProperty("lock_explanation")

  private String lockExplanation = null;

  @JsonProperty("lock_info")

  private LockInfo lockInfo = null;

  @JsonProperty("locked_for_user")

  private Boolean lockedForUser = null;

  @JsonProperty("max_name_length")

  private Integer maxNameLength = null;

  @JsonProperty("moderated_grading")

  private Boolean moderatedGrading = null;

  @JsonProperty("muted")

  private Boolean muted = null;

  @JsonProperty("name")

  private String name = null;

  @JsonProperty("needs_grading_count")

  private Integer needsGradingCount = null;

  @JsonProperty("needs_grading_count_by_section")

  private List<NeedsGradingCount> needsGradingCountBySection = null;

  @JsonProperty("omit_from_final_grade")

  private Boolean omitFromFinalGrade = null;

  @JsonProperty("only_visible_to_overrides")

  private Boolean onlyVisibleToOverrides = null;

  @JsonProperty("overrides")

  private List<AssignmentOverride> overrides = null;

  @JsonProperty("peer_review_count")

  private Integer peerReviewCount = null;

  @JsonProperty("peer_reviews")

  private Boolean peerReviews = null;

  @JsonProperty("peer_reviews_assign_at")

  private OffsetDateTime peerReviewsAssignAt = null;

  @JsonProperty("points_possible")

  private Integer pointsPossible = null;

  @JsonProperty("position")

  private Integer position = null;

  @JsonProperty("post_to_sis")

  private Boolean postToSis = null;

  @JsonProperty("published")

  private Boolean published = null;

  @JsonProperty("quiz_id")

  private Integer quizId = null;

  @JsonProperty("rubric")

  private List<RubricCriteria> rubric = null;

  @JsonProperty("rubric_settings")

  private String rubricSettings = null;

  @JsonProperty("submission")

  private Submission submission = null;

  @JsonProperty("submission_types")

  private List<String> submissionTypes = null;

  @JsonProperty("submissions_download_url")

  private String submissionsDownloadUrl = null;

  @JsonProperty("turnitin_enabled")

  private Boolean turnitinEnabled = null;

  @JsonProperty("turnitin_settings")

  private TurnitinSettings turnitinSettings = null;

  @JsonProperty("unlock_at")

  private OffsetDateTime unlockAt = null;

  @JsonProperty("unpublishable")

  private Boolean unpublishable = null;

  @JsonProperty("updated_at")

  private OffsetDateTime updatedAt = null;

  @JsonProperty("use_rubric_for_grading")

  private Boolean useRubricForGrading = null;

  @JsonProperty("vericite_enabled")

  private Boolean vericiteEnabled = null;
  public Assignment allDates(List<AssignmentDate> allDates) {
    this.allDates = allDates;
    return this;
  }

  public Assignment addAllDatesItem(AssignmentDate allDatesItem) {
    if (this.allDates == null) {
      this.allDates = new ArrayList<AssignmentDate>();
    }
    this.allDates.add(allDatesItem);
    return this;
  }

  /**
  * (Optional) all dates associated with the assignment, if applicable
  * @return allDates
  **/
  @Schema(description = "(Optional) all dates associated with the assignment, if applicable")
  public List<AssignmentDate> getAllDates() {
    return allDates;
  }
  public void setAllDates(List<AssignmentDate> allDates) {
    this.allDates = allDates;
  }
  public Assignment allowedExtensions(List<String> allowedExtensions) {
    this.allowedExtensions = allowedExtensions;
    return this;
  }

  public Assignment addAllowedExtensionsItem(String allowedExtensionsItem) {
    if (this.allowedExtensions == null) {
      this.allowedExtensions = new ArrayList<String>();
    }
    this.allowedExtensions.add(allowedExtensionsItem);
    return this;
  }

  /**
  * Allowed file extensions, which take effect if submission_types includes &#x27;online_upload&#x27;.
  * @return allowedExtensions
  **/
  @Schema(example = "[docx, ppt]", description = "Allowed file extensions, which take effect if submission_types includes 'online_upload'.")
  public List<String> getAllowedExtensions() {
    return allowedExtensions;
  }
  public void setAllowedExtensions(List<String> allowedExtensions) {
    this.allowedExtensions = allowedExtensions;
  }
  public Assignment anonymousSubmissions(Boolean anonymousSubmissions) {
    this.anonymousSubmissions = anonymousSubmissions;
    return this;
  }

  

  /**
  * (Optional) whether anonymous submissions are accepted (applies only to quiz assignments)
  * @return anonymousSubmissions
  **/
  @Schema(example = "false", description = "(Optional) whether anonymous submissions are accepted (applies only to quiz assignments)")
  public Boolean isAnonymousSubmissions() {
    return anonymousSubmissions;
  }
  public void setAnonymousSubmissions(Boolean anonymousSubmissions) {
    this.anonymousSubmissions = anonymousSubmissions;
  }
  public Assignment assignmentGroupId(Integer assignmentGroupId) {
    this.assignmentGroupId = assignmentGroupId;
    return this;
  }

  

  /**
  * the ID of the assignment&#x27;s group
  * @return assignmentGroupId
  **/
  @Schema(example = "2", description = "the ID of the assignment's group")
  public Integer getAssignmentGroupId() {
    return assignmentGroupId;
  }
  public void setAssignmentGroupId(Integer assignmentGroupId) {
    this.assignmentGroupId = assignmentGroupId;
  }
  public Assignment assignmentVisibility(List<Integer> assignmentVisibility) {
    this.assignmentVisibility = assignmentVisibility;
    return this;
  }

  public Assignment addAssignmentVisibilityItem(Integer assignmentVisibilityItem) {
    if (this.assignmentVisibility == null) {
      this.assignmentVisibility = new ArrayList<Integer>();
    }
    this.assignmentVisibility.add(assignmentVisibilityItem);
    return this;
  }

  /**
  * (Optional) If &#x27;assignment_visibility&#x27; is included in the &#x27;include&#x27; parameter, includes an array of student IDs who can see this assignment.
  * @return assignmentVisibility
  **/
  @Schema(example = "[137, 381, 572]", description = "(Optional) If 'assignment_visibility' is included in the 'include' parameter, includes an array of student IDs who can see this assignment.")
  public List<Integer> getAssignmentVisibility() {
    return assignmentVisibility;
  }
  public void setAssignmentVisibility(List<Integer> assignmentVisibility) {
    this.assignmentVisibility = assignmentVisibility;
  }
  public Assignment automaticPeerReviews(Boolean automaticPeerReviews) {
    this.automaticPeerReviews = automaticPeerReviews;
    return this;
  }

  

  /**
  * Boolean indicating peer reviews are assigned automatically. If false, the teacher is expected to manually assign peer reviews.
  * @return automaticPeerReviews
  **/
  @Schema(example = "false", description = "Boolean indicating peer reviews are assigned automatically. If false, the teacher is expected to manually assign peer reviews.")
  public Boolean isAutomaticPeerReviews() {
    return automaticPeerReviews;
  }
  public void setAutomaticPeerReviews(Boolean automaticPeerReviews) {
    this.automaticPeerReviews = automaticPeerReviews;
  }
  public Assignment courseId(Integer courseId) {
    this.courseId = courseId;
    return this;
  }

  

  /**
  * the ID of the course the assignment belongs to
  * @return courseId
  **/
  @Schema(example = "123", description = "the ID of the course the assignment belongs to")
  public Integer getCourseId() {
    return courseId;
  }
  public void setCourseId(Integer courseId) {
    this.courseId = courseId;
  }
  public Assignment createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  

  /**
  * The time at which this assignment was originally created
  * @return createdAt
  **/
  @Schema(description = "The time at which this assignment was originally created")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }
  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }
  public Assignment description(String description) {
    this.description = description;
    return this;
  }

  

  /**
  * the assignment description, in an HTML fragment
  * @return description
  **/
  @Schema(example = "<p>Do the following:</p>...", description = "the assignment description, in an HTML fragment")
  public String getDescription() {
    return description;
  }
  public void setDescription(String description) {
    this.description = description;
  }
  public Assignment discussionTopic(DiscussionTopic discussionTopic) {
    this.discussionTopic = discussionTopic;
    return this;
  }

  

  /**
  * Get discussionTopic
  * @return discussionTopic
  **/
  @Schema(description = "")
  public DiscussionTopic getDiscussionTopic() {
    return discussionTopic;
  }
  public void setDiscussionTopic(DiscussionTopic discussionTopic) {
    this.discussionTopic = discussionTopic;
  }
  public Assignment dueAt(OffsetDateTime dueAt) {
    this.dueAt = dueAt;
    return this;
  }

  

  /**
  * the due date for the assignment. returns null if not present. NOTE: If this assignment has assignment overrides, this field will be the due date as it applies to the user requesting information from the API.
  * @return dueAt
  **/
  @Schema(description = "the due date for the assignment. returns null if not present. NOTE: If this assignment has assignment overrides, this field will be the due date as it applies to the user requesting information from the API.")
  public OffsetDateTime getDueAt() {
    return dueAt;
  }
  public void setDueAt(OffsetDateTime dueAt) {
    this.dueAt = dueAt;
  }
  public Assignment dueDateRequired(Boolean dueDateRequired) {
    this.dueDateRequired = dueDateRequired;
    return this;
  }

  

  /**
  * Boolean flag indicating whether the assignment requires a due date based on the account level setting
  * @return dueDateRequired
  **/
  @Schema(example = "true", description = "Boolean flag indicating whether the assignment requires a due date based on the account level setting")
  public Boolean isDueDateRequired() {
    return dueDateRequired;
  }
  public void setDueDateRequired(Boolean dueDateRequired) {
    this.dueDateRequired = dueDateRequired;
  }
  public Assignment externalToolTagAttributes(ExternalToolTagAttributes externalToolTagAttributes) {
    this.externalToolTagAttributes = externalToolTagAttributes;
    return this;
  }

  

  /**
  * Get externalToolTagAttributes
  * @return externalToolTagAttributes
  **/
  @Schema(description = "")
  public ExternalToolTagAttributes getExternalToolTagAttributes() {
    return externalToolTagAttributes;
  }
  public void setExternalToolTagAttributes(ExternalToolTagAttributes externalToolTagAttributes) {
    this.externalToolTagAttributes = externalToolTagAttributes;
  }
  public Assignment freezeOnCopy(Boolean freezeOnCopy) {
    this.freezeOnCopy = freezeOnCopy;
    return this;
  }

  

  /**
  * (Optional) Boolean indicating if assignment will be frozen when it is copied. NOTE: This field will only be present if the AssignmentFreezer plugin is available for your account.
  * @return freezeOnCopy
  **/
  @Schema(example = "false", description = "(Optional) Boolean indicating if assignment will be frozen when it is copied. NOTE: This field will only be present if the AssignmentFreezer plugin is available for your account.")
  public Boolean isFreezeOnCopy() {
    return freezeOnCopy;
  }
  public void setFreezeOnCopy(Boolean freezeOnCopy) {
    this.freezeOnCopy = freezeOnCopy;
  }
  public Assignment frozen(Boolean frozen) {
    this.frozen = frozen;
    return this;
  }

  

  /**
  * (Optional) Boolean indicating if assignment is frozen for the calling user. NOTE: This field will only be present if the AssignmentFreezer plugin is available for your account.
  * @return frozen
  **/
  @Schema(example = "false", description = "(Optional) Boolean indicating if assignment is frozen for the calling user. NOTE: This field will only be present if the AssignmentFreezer plugin is available for your account.")
  public Boolean isFrozen() {
    return frozen;
  }
  public void setFrozen(Boolean frozen) {
    this.frozen = frozen;
  }
  public Assignment frozenAttributes(List<String> frozenAttributes) {
    this.frozenAttributes = frozenAttributes;
    return this;
  }

  public Assignment addFrozenAttributesItem(String frozenAttributesItem) {
    if (this.frozenAttributes == null) {
      this.frozenAttributes = new ArrayList<String>();
    }
    this.frozenAttributes.add(frozenAttributesItem);
    return this;
  }

  /**
  * (Optional) Array of frozen attributes for the assignment. Only account administrators currently have permission to change an attribute in this list. Will be empty if no attributes are frozen for this assignment. Possible frozen attributes are: title, description, lock_at, points_possible, grading_type, submission_types, assignment_group_id, allowed_extensions, group_category_id, notify_of_update, peer_reviews NOTE: This field will only be present if the AssignmentFreezer plugin is available for your account.
  * @return frozenAttributes
  **/
  @Schema(example = "[title]", description = "(Optional) Array of frozen attributes for the assignment. Only account administrators currently have permission to change an attribute in this list. Will be empty if no attributes are frozen for this assignment. Possible frozen attributes are: title, description, lock_at, points_possible, grading_type, submission_types, assignment_group_id, allowed_extensions, group_category_id, notify_of_update, peer_reviews NOTE: This field will only be present if the AssignmentFreezer plugin is available for your account.")
  public List<String> getFrozenAttributes() {
    return frozenAttributes;
  }
  public void setFrozenAttributes(List<String> frozenAttributes) {
    this.frozenAttributes = frozenAttributes;
  }
  public Assignment gradeGroupStudentsIndividually(Boolean gradeGroupStudentsIndividually) {
    this.gradeGroupStudentsIndividually = gradeGroupStudentsIndividually;
    return this;
  }

  

  /**
  * If this is a group assignment, boolean flag indicating whether or not students will be graded individually.
  * @return gradeGroupStudentsIndividually
  **/
  @Schema(example = "false", description = "If this is a group assignment, boolean flag indicating whether or not students will be graded individually.")
  public Boolean isGradeGroupStudentsIndividually() {
    return gradeGroupStudentsIndividually;
  }
  public void setGradeGroupStudentsIndividually(Boolean gradeGroupStudentsIndividually) {
    this.gradeGroupStudentsIndividually = gradeGroupStudentsIndividually;
  }
  public Assignment gradingStandardId(Integer gradingStandardId) {
    this.gradingStandardId = gradingStandardId;
    return this;
  }

  

  /**
  * The id of the grading standard being applied to this assignment. Valid if grading_type is &#x27;letter_grade&#x27; or &#x27;gpa_scale&#x27;.
  * @return gradingStandardId
  **/
  @Schema(description = "The id of the grading standard being applied to this assignment. Valid if grading_type is 'letter_grade' or 'gpa_scale'.")
  public Integer getGradingStandardId() {
    return gradingStandardId;
  }
  public void setGradingStandardId(Integer gradingStandardId) {
    this.gradingStandardId = gradingStandardId;
  }
  public Assignment gradingType(String gradingType) {
    this.gradingType = gradingType;
    return this;
  }

  

  /**
  * The type of grading the assignment receives; one of &#x27;pass_fail&#x27;, &#x27;percent&#x27;, &#x27;letter_grade&#x27;, &#x27;gpa_scale&#x27;, &#x27;points&#x27;
  * @return gradingType
  **/
  @Schema(example = "points", description = "The type of grading the assignment receives; one of 'pass_fail', 'percent', 'letter_grade', 'gpa_scale', 'points'")
  public String getGradingType() {
    return gradingType;
  }
  public void setGradingType(String gradingType) {
    this.gradingType = gradingType;
  }
  public Assignment groupCategoryId(Integer groupCategoryId) {
    this.groupCategoryId = groupCategoryId;
    return this;
  }

  

  /**
  * The ID of the assignment’s group set, if this is a group assignment. For group discussions, set group_category_id on the discussion topic, not the linked assignment.
  * @return groupCategoryId
  **/
  @Schema(example = "1", description = "The ID of the assignment’s group set, if this is a group assignment. For group discussions, set group_category_id on the discussion topic, not the linked assignment.")
  public Integer getGroupCategoryId() {
    return groupCategoryId;
  }
  public void setGroupCategoryId(Integer groupCategoryId) {
    this.groupCategoryId = groupCategoryId;
  }
  public Assignment hasOverrides(Boolean hasOverrides) {
    this.hasOverrides = hasOverrides;
    return this;
  }

  

  /**
  * whether this assignment has overrides
  * @return hasOverrides
  **/
  @Schema(example = "true", description = "whether this assignment has overrides")
  public Boolean isHasOverrides() {
    return hasOverrides;
  }
  public void setHasOverrides(Boolean hasOverrides) {
    this.hasOverrides = hasOverrides;
  }
  public Assignment hasSubmittedSubmissions(Boolean hasSubmittedSubmissions) {
    this.hasSubmittedSubmissions = hasSubmittedSubmissions;
    return this;
  }

  

  /**
  * If true, the assignment has been submitted to by at least one student
  * @return hasSubmittedSubmissions
  **/
  @Schema(example = "true", description = "If true, the assignment has been submitted to by at least one student")
  public Boolean isHasSubmittedSubmissions() {
    return hasSubmittedSubmissions;
  }
  public void setHasSubmittedSubmissions(Boolean hasSubmittedSubmissions) {
    this.hasSubmittedSubmissions = hasSubmittedSubmissions;
  }
  public Assignment htmlUrl(String htmlUrl) {
    this.htmlUrl = htmlUrl;
    return this;
  }

  

  /**
  * the URL to the assignment&#x27;s web page
  * @return htmlUrl
  **/
  @Schema(example = "https://...", description = "the URL to the assignment's web page")
  public String getHtmlUrl() {
    return htmlUrl;
  }
  public void setHtmlUrl(String htmlUrl) {
    this.htmlUrl = htmlUrl;
  }
  public Assignment id(Integer id) {
    this.id = id;
    return this;
  }

  

  /**
  * the ID of the assignment
  * @return id
  **/
  @Schema(example = "4", description = "the ID of the assignment")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }
  public Assignment integrationData(String integrationData) {
    this.integrationData = integrationData;
    return this;
  }

  

  /**
  * (optional, Third Party integration data for assignment)
  * @return integrationData
  **/
  @Schema(example = "12341234", description = "(optional, Third Party integration data for assignment)")
  public String getIntegrationData() {
    return integrationData;
  }
  public void setIntegrationData(String integrationData) {
    this.integrationData = integrationData;
  }
  public Assignment integrationId(String integrationId) {
    this.integrationId = integrationId;
    return this;
  }

  

  /**
  * (optional, Third Party unique identifier for Assignment)
  * @return integrationId
  **/
  @Schema(example = "12341234", description = "(optional, Third Party unique identifier for Assignment)")
  public String getIntegrationId() {
    return integrationId;
  }
  public void setIntegrationId(String integrationId) {
    this.integrationId = integrationId;
  }
  public Assignment intraGroupPeerReviews(Boolean intraGroupPeerReviews) {
    this.intraGroupPeerReviews = intraGroupPeerReviews;
    return this;
  }

  

  /**
  * Boolean representing whether or not members from within the same group on a group assignment can be assigned to peer review their own group&#x27;s work
  * @return intraGroupPeerReviews
  **/
  @Schema(example = "false", description = "Boolean representing whether or not members from within the same group on a group assignment can be assigned to peer review their own group's work")
  public Boolean isIntraGroupPeerReviews() {
    return intraGroupPeerReviews;
  }
  public void setIntraGroupPeerReviews(Boolean intraGroupPeerReviews) {
    this.intraGroupPeerReviews = intraGroupPeerReviews;
  }
  public Assignment lockAt(OffsetDateTime lockAt) {
    this.lockAt = lockAt;
    return this;
  }

  

  /**
  * the lock date (assignment is locked after this date). returns null if not present. NOTE: If this assignment has assignment overrides, this field will be the lock date as it applies to the user requesting information from the API.
  * @return lockAt
  **/
  @Schema(description = "the lock date (assignment is locked after this date). returns null if not present. NOTE: If this assignment has assignment overrides, this field will be the lock date as it applies to the user requesting information from the API.")
  public OffsetDateTime getLockAt() {
    return lockAt;
  }
  public void setLockAt(OffsetDateTime lockAt) {
    this.lockAt = lockAt;
  }
  public Assignment lockExplanation(String lockExplanation) {
    this.lockExplanation = lockExplanation;
    return this;
  }

  

  /**
  * (Optional) An explanation of why this is locked for the user. Present when locked_for_user is true.
  * @return lockExplanation
  **/
  @Schema(example = "This assignment is locked until September 1 at 12:00am", description = "(Optional) An explanation of why this is locked for the user. Present when locked_for_user is true.")
  public String getLockExplanation() {
    return lockExplanation;
  }
  public void setLockExplanation(String lockExplanation) {
    this.lockExplanation = lockExplanation;
  }
  public Assignment lockInfo(LockInfo lockInfo) {
    this.lockInfo = lockInfo;
    return this;
  }

  

  /**
  * Get lockInfo
  * @return lockInfo
  **/
  @Schema(description = "")
  public LockInfo getLockInfo() {
    return lockInfo;
  }
  public void setLockInfo(LockInfo lockInfo) {
    this.lockInfo = lockInfo;
  }
  public Assignment lockedForUser(Boolean lockedForUser) {
    this.lockedForUser = lockedForUser;
    return this;
  }

  

  /**
  * Whether or not this is locked for the user.
  * @return lockedForUser
  **/
  @Schema(example = "false", description = "Whether or not this is locked for the user.")
  public Boolean isLockedForUser() {
    return lockedForUser;
  }
  public void setLockedForUser(Boolean lockedForUser) {
    this.lockedForUser = lockedForUser;
  }
  public Assignment maxNameLength(Integer maxNameLength) {
    this.maxNameLength = maxNameLength;
    return this;
  }

  

  /**
  * An integer indicating the maximum length an assignment&#x27;s name may be
  * @return maxNameLength
  **/
  @Schema(example = "15", description = "An integer indicating the maximum length an assignment's name may be")
  public Integer getMaxNameLength() {
    return maxNameLength;
  }
  public void setMaxNameLength(Integer maxNameLength) {
    this.maxNameLength = maxNameLength;
  }
  public Assignment moderatedGrading(Boolean moderatedGrading) {
    this.moderatedGrading = moderatedGrading;
    return this;
  }

  

  /**
  * Boolean indicating if the assignment is moderated.
  * @return moderatedGrading
  **/
  @Schema(example = "true", description = "Boolean indicating if the assignment is moderated.")
  public Boolean isModeratedGrading() {
    return moderatedGrading;
  }
  public void setModeratedGrading(Boolean moderatedGrading) {
    this.moderatedGrading = moderatedGrading;
  }
  public Assignment muted(Boolean muted) {
    this.muted = muted;
    return this;
  }

  

  /**
  * whether the assignment is muted
  * @return muted
  **/
  @Schema(description = "whether the assignment is muted")
  public Boolean isMuted() {
    return muted;
  }
  public void setMuted(Boolean muted) {
    this.muted = muted;
  }
  public Assignment name(String name) {
    this.name = name;
    return this;
  }

  

  /**
  * the name of the assignment
  * @return name
  **/
  @Schema(example = "some assignment", description = "the name of the assignment")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  public Assignment needsGradingCount(Integer needsGradingCount) {
    this.needsGradingCount = needsGradingCount;
    return this;
  }

  

  /**
  * if the requesting user has grading rights, the number of submissions that need grading.
  * @return needsGradingCount
  **/
  @Schema(example = "17", description = "if the requesting user has grading rights, the number of submissions that need grading.")
  public Integer getNeedsGradingCount() {
    return needsGradingCount;
  }
  public void setNeedsGradingCount(Integer needsGradingCount) {
    this.needsGradingCount = needsGradingCount;
  }
  public Assignment needsGradingCountBySection(List<NeedsGradingCount> needsGradingCountBySection) {
    this.needsGradingCountBySection = needsGradingCountBySection;
    return this;
  }

  public Assignment addNeedsGradingCountBySectionItem(NeedsGradingCount needsGradingCountBySectionItem) {
    if (this.needsGradingCountBySection == null) {
      this.needsGradingCountBySection = new ArrayList<NeedsGradingCount>();
    }
    this.needsGradingCountBySection.add(needsGradingCountBySectionItem);
    return this;
  }

  /**
  * if the requesting user has grading rights and the &#x27;needs_grading_count_by_section&#x27; flag is specified, the number of submissions that need grading split out by section. NOTE: This key is NOT present unless you pass the &#x27;needs_grading_count_by_section&#x27; argument as true.  ANOTHER NOTE: it&#x27;s possible to be enrolled in multiple sections, and if a student is setup that way they will show an assignment that needs grading in multiple sections (effectively the count will be duplicated between sections)
  * @return needsGradingCountBySection
  **/
  @Schema(example = "[{needs_grading_count=5, section_id=123456}, {needs_grading_count=0, section_id=654321}]", description = "if the requesting user has grading rights and the 'needs_grading_count_by_section' flag is specified, the number of submissions that need grading split out by section. NOTE: This key is NOT present unless you pass the 'needs_grading_count_by_section' argument as true.  ANOTHER NOTE: it's possible to be enrolled in multiple sections, and if a student is setup that way they will show an assignment that needs grading in multiple sections (effectively the count will be duplicated between sections)")
  public List<NeedsGradingCount> getNeedsGradingCountBySection() {
    return needsGradingCountBySection;
  }
  public void setNeedsGradingCountBySection(List<NeedsGradingCount> needsGradingCountBySection) {
    this.needsGradingCountBySection = needsGradingCountBySection;
  }
  public Assignment omitFromFinalGrade(Boolean omitFromFinalGrade) {
    this.omitFromFinalGrade = omitFromFinalGrade;
    return this;
  }

  

  /**
  * (Optional) If true, the assignment will be omitted from the student&#x27;s final grade
  * @return omitFromFinalGrade
  **/
  @Schema(example = "true", description = "(Optional) If true, the assignment will be omitted from the student's final grade")
  public Boolean isOmitFromFinalGrade() {
    return omitFromFinalGrade;
  }
  public void setOmitFromFinalGrade(Boolean omitFromFinalGrade) {
    this.omitFromFinalGrade = omitFromFinalGrade;
  }
  public Assignment onlyVisibleToOverrides(Boolean onlyVisibleToOverrides) {
    this.onlyVisibleToOverrides = onlyVisibleToOverrides;
    return this;
  }

  

  /**
  * Whether the assignment is only visible to overrides.
  * @return onlyVisibleToOverrides
  **/
  @Schema(example = "false", description = "Whether the assignment is only visible to overrides.")
  public Boolean isOnlyVisibleToOverrides() {
    return onlyVisibleToOverrides;
  }
  public void setOnlyVisibleToOverrides(Boolean onlyVisibleToOverrides) {
    this.onlyVisibleToOverrides = onlyVisibleToOverrides;
  }
  public Assignment overrides(List<AssignmentOverride> overrides) {
    this.overrides = overrides;
    return this;
  }

  public Assignment addOverridesItem(AssignmentOverride overridesItem) {
    if (this.overrides == null) {
      this.overrides = new ArrayList<AssignmentOverride>();
    }
    this.overrides.add(overridesItem);
    return this;
  }

  /**
  * (Optional) If &#x27;overrides&#x27; is included in the &#x27;include&#x27; parameter, includes an array of assignment override objects.
  * @return overrides
  **/
  @Schema(description = "(Optional) If 'overrides' is included in the 'include' parameter, includes an array of assignment override objects.")
  public List<AssignmentOverride> getOverrides() {
    return overrides;
  }
  public void setOverrides(List<AssignmentOverride> overrides) {
    this.overrides = overrides;
  }
  public Assignment peerReviewCount(Integer peerReviewCount) {
    this.peerReviewCount = peerReviewCount;
    return this;
  }

  

  /**
  * Integer representing the amount of reviews each user is assigned. NOTE: This key is NOT present unless you have automatic_peer_reviews set to true.
  * @return peerReviewCount
  **/
  @Schema(example = "0", description = "Integer representing the amount of reviews each user is assigned. NOTE: This key is NOT present unless you have automatic_peer_reviews set to true.")
  public Integer getPeerReviewCount() {
    return peerReviewCount;
  }
  public void setPeerReviewCount(Integer peerReviewCount) {
    this.peerReviewCount = peerReviewCount;
  }
  public Assignment peerReviews(Boolean peerReviews) {
    this.peerReviews = peerReviews;
    return this;
  }

  

  /**
  * Boolean indicating if peer reviews are required for this assignment
  * @return peerReviews
  **/
  @Schema(example = "false", description = "Boolean indicating if peer reviews are required for this assignment")
  public Boolean isPeerReviews() {
    return peerReviews;
  }
  public void setPeerReviews(Boolean peerReviews) {
    this.peerReviews = peerReviews;
  }
  public Assignment peerReviewsAssignAt(OffsetDateTime peerReviewsAssignAt) {
    this.peerReviewsAssignAt = peerReviewsAssignAt;
    return this;
  }

  

  /**
  * String representing a date the reviews are due by. Must be a date that occurs after the default due date. If blank, or date is not after the assignment&#x27;s due date, the assignment&#x27;s due date will be used. NOTE: This key is NOT present unless you have automatic_peer_reviews set to true.
  * @return peerReviewsAssignAt
  **/
  @Schema(description = "String representing a date the reviews are due by. Must be a date that occurs after the default due date. If blank, or date is not after the assignment's due date, the assignment's due date will be used. NOTE: This key is NOT present unless you have automatic_peer_reviews set to true.")
  public OffsetDateTime getPeerReviewsAssignAt() {
    return peerReviewsAssignAt;
  }
  public void setPeerReviewsAssignAt(OffsetDateTime peerReviewsAssignAt) {
    this.peerReviewsAssignAt = peerReviewsAssignAt;
  }
  public Assignment pointsPossible(Integer pointsPossible) {
    this.pointsPossible = pointsPossible;
    return this;
  }

  

  /**
  * the maximum points possible for the assignment
  * @return pointsPossible
  **/
  @Schema(example = "12", description = "the maximum points possible for the assignment")
  public Integer getPointsPossible() {
    return pointsPossible;
  }
  public void setPointsPossible(Integer pointsPossible) {
    this.pointsPossible = pointsPossible;
  }
  public Assignment position(Integer position) {
    this.position = position;
    return this;
  }

  

  /**
  * the sorting order of the assignment in the group
  * @return position
  **/
  @Schema(example = "1", description = "the sorting order of the assignment in the group")
  public Integer getPosition() {
    return position;
  }
  public void setPosition(Integer position) {
    this.position = position;
  }
  public Assignment postToSis(Boolean postToSis) {
    this.postToSis = postToSis;
    return this;
  }

  

  /**
  * (optional, present if Sync Grades to SIS feature is enabled)
  * @return postToSis
  **/
  @Schema(example = "true", description = "(optional, present if Sync Grades to SIS feature is enabled)")
  public Boolean isPostToSis() {
    return postToSis;
  }
  public void setPostToSis(Boolean postToSis) {
    this.postToSis = postToSis;
  }
  public Assignment published(Boolean published) {
    this.published = published;
    return this;
  }

  

  /**
  * Whether the assignment is published
  * @return published
  **/
  @Schema(example = "true", description = "Whether the assignment is published")
  public Boolean isPublished() {
    return published;
  }
  public void setPublished(Boolean published) {
    this.published = published;
  }
  public Assignment quizId(Integer quizId) {
    this.quizId = quizId;
    return this;
  }

  

  /**
  * (Optional) id of the associated quiz (applies only when submission_types is [&#x27;online_quiz&#x27;])
  * @return quizId
  **/
  @Schema(example = "620", description = "(Optional) id of the associated quiz (applies only when submission_types is ['online_quiz'])")
  public Integer getQuizId() {
    return quizId;
  }
  public void setQuizId(Integer quizId) {
    this.quizId = quizId;
  }
  public Assignment rubric(List<RubricCriteria> rubric) {
    this.rubric = rubric;
    return this;
  }

  public Assignment addRubricItem(RubricCriteria rubricItem) {
    if (this.rubric == null) {
      this.rubric = new ArrayList<RubricCriteria>();
    }
    this.rubric.add(rubricItem);
    return this;
  }

  /**
  * (Optional) A list of scoring criteria and ratings for each rubric criterion. Included if there is an associated rubric.
  * @return rubric
  **/
  @Schema(description = "(Optional) A list of scoring criteria and ratings for each rubric criterion. Included if there is an associated rubric.")
  public List<RubricCriteria> getRubric() {
    return rubric;
  }
  public void setRubric(List<RubricCriteria> rubric) {
    this.rubric = rubric;
  }
  public Assignment rubricSettings(String rubricSettings) {
    this.rubricSettings = rubricSettings;
    return this;
  }

  

  /**
  * (Optional) An object describing the basic attributes of the rubric, including the point total. Included if there is an associated rubric.
  * @return rubricSettings
  **/
  @Schema(example = "{\"points_possible\"=>12}", description = "(Optional) An object describing the basic attributes of the rubric, including the point total. Included if there is an associated rubric.")
  public String getRubricSettings() {
    return rubricSettings;
  }
  public void setRubricSettings(String rubricSettings) {
    this.rubricSettings = rubricSettings;
  }
  public Assignment submission(Submission submission) {
    this.submission = submission;
    return this;
  }

  

  /**
  * Get submission
  * @return submission
  **/
  @Schema(description = "")
  public Submission getSubmission() {
    return submission;
  }
  public void setSubmission(Submission submission) {
    this.submission = submission;
  }
  public Assignment submissionTypes(List<String> submissionTypes) {
    this.submissionTypes = submissionTypes;
    return this;
  }

  public Assignment addSubmissionTypesItem(String submissionTypesItem) {
    if (this.submissionTypes == null) {
      this.submissionTypes = new ArrayList<String>();
    }
    this.submissionTypes.add(submissionTypesItem);
    return this;
  }

  /**
  * the types of submissions allowed for this assignment list containing one or more of the following: &#x27;discussion_topic&#x27;, &#x27;online_quiz&#x27;, &#x27;on_paper&#x27;, &#x27;none&#x27;, &#x27;external_tool&#x27;, &#x27;online_text_entry&#x27;, &#x27;online_url&#x27;, &#x27;online_upload&#x27; &#x27;media_recording&#x27;
  * @return submissionTypes
  **/
  @Schema(example = "[online_text_entry]", description = "the types of submissions allowed for this assignment list containing one or more of the following: 'discussion_topic', 'online_quiz', 'on_paper', 'none', 'external_tool', 'online_text_entry', 'online_url', 'online_upload' 'media_recording'")
  public List<String> getSubmissionTypes() {
    return submissionTypes;
  }
  public void setSubmissionTypes(List<String> submissionTypes) {
    this.submissionTypes = submissionTypes;
  }
  public Assignment submissionsDownloadUrl(String submissionsDownloadUrl) {
    this.submissionsDownloadUrl = submissionsDownloadUrl;
    return this;
  }

  

  /**
  * the URL to download all submissions as a zip
  * @return submissionsDownloadUrl
  **/
  @Schema(example = "https://example.com/courses/:course_id/assignments/:id/submissions?zip=1", description = "the URL to download all submissions as a zip")
  public String getSubmissionsDownloadUrl() {
    return submissionsDownloadUrl;
  }
  public void setSubmissionsDownloadUrl(String submissionsDownloadUrl) {
    this.submissionsDownloadUrl = submissionsDownloadUrl;
  }
  public Assignment turnitinEnabled(Boolean turnitinEnabled) {
    this.turnitinEnabled = turnitinEnabled;
    return this;
  }

  

  /**
  * Boolean flag indicating whether or not Turnitin has been enabled for the assignment. NOTE: This flag will not appear unless your account has the Turnitin plugin available
  * @return turnitinEnabled
  **/
  @Schema(example = "true", description = "Boolean flag indicating whether or not Turnitin has been enabled for the assignment. NOTE: This flag will not appear unless your account has the Turnitin plugin available")
  public Boolean isTurnitinEnabled() {
    return turnitinEnabled;
  }
  public void setTurnitinEnabled(Boolean turnitinEnabled) {
    this.turnitinEnabled = turnitinEnabled;
  }
  public Assignment turnitinSettings(TurnitinSettings turnitinSettings) {
    this.turnitinSettings = turnitinSettings;
    return this;
  }

  

  /**
  * Get turnitinSettings
  * @return turnitinSettings
  **/
  @Schema(description = "")
  public TurnitinSettings getTurnitinSettings() {
    return turnitinSettings;
  }
  public void setTurnitinSettings(TurnitinSettings turnitinSettings) {
    this.turnitinSettings = turnitinSettings;
  }
  public Assignment unlockAt(OffsetDateTime unlockAt) {
    this.unlockAt = unlockAt;
    return this;
  }

  

  /**
  * the unlock date (assignment is unlocked after this date) returns null if not present NOTE: If this assignment has assignment overrides, this field will be the unlock date as it applies to the user requesting information from the API.
  * @return unlockAt
  **/
  @Schema(description = "the unlock date (assignment is unlocked after this date) returns null if not present NOTE: If this assignment has assignment overrides, this field will be the unlock date as it applies to the user requesting information from the API.")
  public OffsetDateTime getUnlockAt() {
    return unlockAt;
  }
  public void setUnlockAt(OffsetDateTime unlockAt) {
    this.unlockAt = unlockAt;
  }
  public Assignment unpublishable(Boolean unpublishable) {
    this.unpublishable = unpublishable;
    return this;
  }

  

  /**
  * Whether the assignment&#x27;s &#x27;published&#x27; state can be changed to false. Will be false if there are student submissions for the assignment.
  * @return unpublishable
  **/
  @Schema(example = "false", description = "Whether the assignment's 'published' state can be changed to false. Will be false if there are student submissions for the assignment.")
  public Boolean isUnpublishable() {
    return unpublishable;
  }
  public void setUnpublishable(Boolean unpublishable) {
    this.unpublishable = unpublishable;
  }
  public Assignment updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  

  /**
  * The time at which this assignment was last modified in any way
  * @return updatedAt
  **/
  @Schema(description = "The time at which this assignment was last modified in any way")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }
  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }
  public Assignment useRubricForGrading(Boolean useRubricForGrading) {
    this.useRubricForGrading = useRubricForGrading;
    return this;
  }

  

  /**
  * (Optional) If true, the rubric is directly tied to grading the assignment. Otherwise, it is only advisory. Included if there is an associated rubric.
  * @return useRubricForGrading
  **/
  @Schema(example = "true", description = "(Optional) If true, the rubric is directly tied to grading the assignment. Otherwise, it is only advisory. Included if there is an associated rubric.")
  public Boolean isUseRubricForGrading() {
    return useRubricForGrading;
  }
  public void setUseRubricForGrading(Boolean useRubricForGrading) {
    this.useRubricForGrading = useRubricForGrading;
  }
  public Assignment vericiteEnabled(Boolean vericiteEnabled) {
    this.vericiteEnabled = vericiteEnabled;
    return this;
  }

  

  /**
  * Boolean flag indicating whether or not VeriCite has been enabled for the assignment. NOTE: This flag will not appear unless your account has the VeriCite plugin available
  * @return vericiteEnabled
  **/
  @Schema(example = "true", description = "Boolean flag indicating whether or not VeriCite has been enabled for the assignment. NOTE: This flag will not appear unless your account has the VeriCite plugin available")
  public Boolean isVericiteEnabled() {
    return vericiteEnabled;
  }
  public void setVericiteEnabled(Boolean vericiteEnabled) {
    this.vericiteEnabled = vericiteEnabled;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Assignment assignment = (Assignment) o;
    return Objects.equals(this.allDates, assignment.allDates) &&
        Objects.equals(this.allowedExtensions, assignment.allowedExtensions) &&
        Objects.equals(this.anonymousSubmissions, assignment.anonymousSubmissions) &&
        Objects.equals(this.assignmentGroupId, assignment.assignmentGroupId) &&
        Objects.equals(this.assignmentVisibility, assignment.assignmentVisibility) &&
        Objects.equals(this.automaticPeerReviews, assignment.automaticPeerReviews) &&
        Objects.equals(this.courseId, assignment.courseId) &&
        Objects.equals(this.createdAt, assignment.createdAt) &&
        Objects.equals(this.description, assignment.description) &&
        Objects.equals(this.discussionTopic, assignment.discussionTopic) &&
        Objects.equals(this.dueAt, assignment.dueAt) &&
        Objects.equals(this.dueDateRequired, assignment.dueDateRequired) &&
        Objects.equals(this.externalToolTagAttributes, assignment.externalToolTagAttributes) &&
        Objects.equals(this.freezeOnCopy, assignment.freezeOnCopy) &&
        Objects.equals(this.frozen, assignment.frozen) &&
        Objects.equals(this.frozenAttributes, assignment.frozenAttributes) &&
        Objects.equals(this.gradeGroupStudentsIndividually, assignment.gradeGroupStudentsIndividually) &&
        Objects.equals(this.gradingStandardId, assignment.gradingStandardId) &&
        Objects.equals(this.gradingType, assignment.gradingType) &&
        Objects.equals(this.groupCategoryId, assignment.groupCategoryId) &&
        Objects.equals(this.hasOverrides, assignment.hasOverrides) &&
        Objects.equals(this.hasSubmittedSubmissions, assignment.hasSubmittedSubmissions) &&
        Objects.equals(this.htmlUrl, assignment.htmlUrl) &&
        Objects.equals(this.id, assignment.id) &&
        Objects.equals(this.integrationData, assignment.integrationData) &&
        Objects.equals(this.integrationId, assignment.integrationId) &&
        Objects.equals(this.intraGroupPeerReviews, assignment.intraGroupPeerReviews) &&
        Objects.equals(this.lockAt, assignment.lockAt) &&
        Objects.equals(this.lockExplanation, assignment.lockExplanation) &&
        Objects.equals(this.lockInfo, assignment.lockInfo) &&
        Objects.equals(this.lockedForUser, assignment.lockedForUser) &&
        Objects.equals(this.maxNameLength, assignment.maxNameLength) &&
        Objects.equals(this.moderatedGrading, assignment.moderatedGrading) &&
        Objects.equals(this.muted, assignment.muted) &&
        Objects.equals(this.name, assignment.name) &&
        Objects.equals(this.needsGradingCount, assignment.needsGradingCount) &&
        Objects.equals(this.needsGradingCountBySection, assignment.needsGradingCountBySection) &&
        Objects.equals(this.omitFromFinalGrade, assignment.omitFromFinalGrade) &&
        Objects.equals(this.onlyVisibleToOverrides, assignment.onlyVisibleToOverrides) &&
        Objects.equals(this.overrides, assignment.overrides) &&
        Objects.equals(this.peerReviewCount, assignment.peerReviewCount) &&
        Objects.equals(this.peerReviews, assignment.peerReviews) &&
        Objects.equals(this.peerReviewsAssignAt, assignment.peerReviewsAssignAt) &&
        Objects.equals(this.pointsPossible, assignment.pointsPossible) &&
        Objects.equals(this.position, assignment.position) &&
        Objects.equals(this.postToSis, assignment.postToSis) &&
        Objects.equals(this.published, assignment.published) &&
        Objects.equals(this.quizId, assignment.quizId) &&
        Objects.equals(this.rubric, assignment.rubric) &&
        Objects.equals(this.rubricSettings, assignment.rubricSettings) &&
        Objects.equals(this.submission, assignment.submission) &&
        Objects.equals(this.submissionTypes, assignment.submissionTypes) &&
        Objects.equals(this.submissionsDownloadUrl, assignment.submissionsDownloadUrl) &&
        Objects.equals(this.turnitinEnabled, assignment.turnitinEnabled) &&
        Objects.equals(this.turnitinSettings, assignment.turnitinSettings) &&
        Objects.equals(this.unlockAt, assignment.unlockAt) &&
        Objects.equals(this.unpublishable, assignment.unpublishable) &&
        Objects.equals(this.updatedAt, assignment.updatedAt) &&
        Objects.equals(this.useRubricForGrading, assignment.useRubricForGrading) &&
        Objects.equals(this.vericiteEnabled, assignment.vericiteEnabled);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(allDates, allowedExtensions, anonymousSubmissions, assignmentGroupId, assignmentVisibility, automaticPeerReviews, courseId, createdAt, description, discussionTopic, dueAt, dueDateRequired, externalToolTagAttributes, freezeOnCopy, frozen, frozenAttributes, gradeGroupStudentsIndividually, gradingStandardId, gradingType, groupCategoryId, hasOverrides, hasSubmittedSubmissions, htmlUrl, id, integrationData, integrationId, intraGroupPeerReviews, lockAt, lockExplanation, lockInfo, lockedForUser, maxNameLength, moderatedGrading, muted, name, needsGradingCount, needsGradingCountBySection, omitFromFinalGrade, onlyVisibleToOverrides, overrides, peerReviewCount, peerReviews, peerReviewsAssignAt, pointsPossible, position, postToSis, published, quizId, rubric, rubricSettings, submission, submissionTypes, submissionsDownloadUrl, turnitinEnabled, turnitinSettings, unlockAt, unpublishable, updatedAt, useRubricForGrading, vericiteEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Assignment {\n");
    
    sb.append("    allDates: ").append(toIndentedString(allDates)).append("\n");
    sb.append("    allowedExtensions: ").append(toIndentedString(allowedExtensions)).append("\n");
    sb.append("    anonymousSubmissions: ").append(toIndentedString(anonymousSubmissions)).append("\n");
    sb.append("    assignmentGroupId: ").append(toIndentedString(assignmentGroupId)).append("\n");
    sb.append("    assignmentVisibility: ").append(toIndentedString(assignmentVisibility)).append("\n");
    sb.append("    automaticPeerReviews: ").append(toIndentedString(automaticPeerReviews)).append("\n");
    sb.append("    courseId: ").append(toIndentedString(courseId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    discussionTopic: ").append(toIndentedString(discussionTopic)).append("\n");
    sb.append("    dueAt: ").append(toIndentedString(dueAt)).append("\n");
    sb.append("    dueDateRequired: ").append(toIndentedString(dueDateRequired)).append("\n");
    sb.append("    externalToolTagAttributes: ").append(toIndentedString(externalToolTagAttributes)).append("\n");
    sb.append("    freezeOnCopy: ").append(toIndentedString(freezeOnCopy)).append("\n");
    sb.append("    frozen: ").append(toIndentedString(frozen)).append("\n");
    sb.append("    frozenAttributes: ").append(toIndentedString(frozenAttributes)).append("\n");
    sb.append("    gradeGroupStudentsIndividually: ").append(toIndentedString(gradeGroupStudentsIndividually)).append("\n");
    sb.append("    gradingStandardId: ").append(toIndentedString(gradingStandardId)).append("\n");
    sb.append("    gradingType: ").append(toIndentedString(gradingType)).append("\n");
    sb.append("    groupCategoryId: ").append(toIndentedString(groupCategoryId)).append("\n");
    sb.append("    hasOverrides: ").append(toIndentedString(hasOverrides)).append("\n");
    sb.append("    hasSubmittedSubmissions: ").append(toIndentedString(hasSubmittedSubmissions)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    integrationData: ").append(toIndentedString(integrationData)).append("\n");
    sb.append("    integrationId: ").append(toIndentedString(integrationId)).append("\n");
    sb.append("    intraGroupPeerReviews: ").append(toIndentedString(intraGroupPeerReviews)).append("\n");
    sb.append("    lockAt: ").append(toIndentedString(lockAt)).append("\n");
    sb.append("    lockExplanation: ").append(toIndentedString(lockExplanation)).append("\n");
    sb.append("    lockInfo: ").append(toIndentedString(lockInfo)).append("\n");
    sb.append("    lockedForUser: ").append(toIndentedString(lockedForUser)).append("\n");
    sb.append("    maxNameLength: ").append(toIndentedString(maxNameLength)).append("\n");
    sb.append("    moderatedGrading: ").append(toIndentedString(moderatedGrading)).append("\n");
    sb.append("    muted: ").append(toIndentedString(muted)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    needsGradingCount: ").append(toIndentedString(needsGradingCount)).append("\n");
    sb.append("    needsGradingCountBySection: ").append(toIndentedString(needsGradingCountBySection)).append("\n");
    sb.append("    omitFromFinalGrade: ").append(toIndentedString(omitFromFinalGrade)).append("\n");
    sb.append("    onlyVisibleToOverrides: ").append(toIndentedString(onlyVisibleToOverrides)).append("\n");
    sb.append("    overrides: ").append(toIndentedString(overrides)).append("\n");
    sb.append("    peerReviewCount: ").append(toIndentedString(peerReviewCount)).append("\n");
    sb.append("    peerReviews: ").append(toIndentedString(peerReviews)).append("\n");
    sb.append("    peerReviewsAssignAt: ").append(toIndentedString(peerReviewsAssignAt)).append("\n");
    sb.append("    pointsPossible: ").append(toIndentedString(pointsPossible)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    postToSis: ").append(toIndentedString(postToSis)).append("\n");
    sb.append("    published: ").append(toIndentedString(published)).append("\n");
    sb.append("    quizId: ").append(toIndentedString(quizId)).append("\n");
    sb.append("    rubric: ").append(toIndentedString(rubric)).append("\n");
    sb.append("    rubricSettings: ").append(toIndentedString(rubricSettings)).append("\n");
    sb.append("    submission: ").append(toIndentedString(submission)).append("\n");
    sb.append("    submissionTypes: ").append(toIndentedString(submissionTypes)).append("\n");
    sb.append("    submissionsDownloadUrl: ").append(toIndentedString(submissionsDownloadUrl)).append("\n");
    sb.append("    turnitinEnabled: ").append(toIndentedString(turnitinEnabled)).append("\n");
    sb.append("    turnitinSettings: ").append(toIndentedString(turnitinSettings)).append("\n");
    sb.append("    unlockAt: ").append(toIndentedString(unlockAt)).append("\n");
    sb.append("    unpublishable: ").append(toIndentedString(unpublishable)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    useRubricForGrading: ").append(toIndentedString(useRubricForGrading)).append("\n");
    sb.append("    vericiteEnabled: ").append(toIndentedString(vericiteEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
