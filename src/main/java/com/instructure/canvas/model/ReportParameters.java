/*
 * canvas.instructure.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.instructure.canvas.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * The parameters returned will vary for each report.
 */
@Schema(description = "The parameters returned will vary for each report.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-11-06T15:34:49.014533Z[Europe/London]")
public class ReportParameters {

  @JsonProperty("accounts")

  private Boolean accounts = null;

  @JsonProperty("course_id")

  private Integer courseId = null;

  @JsonProperty("courses")

  private Boolean courses = null;

  @JsonProperty("end_at")

  private OffsetDateTime endAt = null;

  @JsonProperty("enrollment_state")

  private List<String> enrollmentState = null;

  @JsonProperty("enrollment_term_id")

  private Integer enrollmentTermId = null;

  @JsonProperty("enrollments")

  private Boolean enrollments = null;

  @JsonProperty("groups")

  private Boolean groups = null;

  @JsonProperty("include_deleted")

  private Boolean includeDeleted = null;

  @JsonProperty("include_enrollment_state")

  private Boolean includeEnrollmentState = null;

  @JsonProperty("order")

  private String order = null;

  @JsonProperty("sections")

  private Boolean sections = null;

  @JsonProperty("sis_accounts_csv")

  private Integer sisAccountsCsv = null;

  @JsonProperty("sis_terms_csv")

  private Integer sisTermsCsv = null;

  @JsonProperty("start_at")

  private OffsetDateTime startAt = null;

  @JsonProperty("terms")

  private Boolean terms = null;

  @JsonProperty("users")

  private Boolean users = null;

  @JsonProperty("xlist")

  private Boolean xlist = null;
  public ReportParameters accounts(Boolean accounts) {
    this.accounts = accounts;
    return this;
  }

  

  /**
  * If true, account data will be included. If false, account data will be omitted.
  * @return accounts
  **/
  @Schema(example = "false", description = "If true, account data will be included. If false, account data will be omitted.")
  public Boolean isAccounts() {
    return accounts;
  }
  public void setAccounts(Boolean accounts) {
    this.accounts = accounts;
  }
  public ReportParameters courseId(Integer courseId) {
    this.courseId = courseId;
    return this;
  }

  

  /**
  * The id of the course to report on
  * @return courseId
  **/
  @Schema(example = "2", description = "The id of the course to report on")
  public Integer getCourseId() {
    return courseId;
  }
  public void setCourseId(Integer courseId) {
    this.courseId = courseId;
  }
  public ReportParameters courses(Boolean courses) {
    this.courses = courses;
    return this;
  }

  

  /**
  * If true, course data will be included. If false, course data will be omitted.
  * @return courses
  **/
  @Schema(example = "false", description = "If true, course data will be included. If false, course data will be omitted.")
  public Boolean isCourses() {
    return courses;
  }
  public void setCourses(Boolean courses) {
    this.courses = courses;
  }
  public ReportParameters endAt(OffsetDateTime endAt) {
    this.endAt = endAt;
    return this;
  }

  

  /**
  * The end date for submissions. Max time range is 2 weeks.
  * @return endAt
  **/
  @Schema(description = "The end date for submissions. Max time range is 2 weeks.")
  public OffsetDateTime getEndAt() {
    return endAt;
  }
  public void setEndAt(OffsetDateTime endAt) {
    this.endAt = endAt;
  }
  public ReportParameters enrollmentState(List<String> enrollmentState) {
    this.enrollmentState = enrollmentState;
    return this;
  }

  public ReportParameters addEnrollmentStateItem(String enrollmentStateItem) {
    if (this.enrollmentState == null) {
      this.enrollmentState = new ArrayList<String>();
    }
    this.enrollmentState.add(enrollmentStateItem);
    return this;
  }

  /**
  * Include enrollment state. Defaults to &#x27;all&#x27; Options: [&#x27;active&#x27;| &#x27;invited&#x27;| &#x27;creation_pending&#x27;| &#x27;deleted&#x27;| &#x27;rejected&#x27;| &#x27;completed&#x27;| &#x27;inactive&#x27;| &#x27;all&#x27;]
  * @return enrollmentState
  **/
  @Schema(example = "[all]", description = "Include enrollment state. Defaults to 'all' Options: ['active'| 'invited'| 'creation_pending'| 'deleted'| 'rejected'| 'completed'| 'inactive'| 'all']")
  public List<String> getEnrollmentState() {
    return enrollmentState;
  }
  public void setEnrollmentState(List<String> enrollmentState) {
    this.enrollmentState = enrollmentState;
  }
  public ReportParameters enrollmentTermId(Integer enrollmentTermId) {
    this.enrollmentTermId = enrollmentTermId;
    return this;
  }

  

  /**
  * The canvas id of the term to get grades from
  * @return enrollmentTermId
  **/
  @Schema(example = "2", description = "The canvas id of the term to get grades from")
  public Integer getEnrollmentTermId() {
    return enrollmentTermId;
  }
  public void setEnrollmentTermId(Integer enrollmentTermId) {
    this.enrollmentTermId = enrollmentTermId;
  }
  public ReportParameters enrollments(Boolean enrollments) {
    this.enrollments = enrollments;
    return this;
  }

  

  /**
  * If true, enrollment data will be included. If false, enrollment data will be omitted.
  * @return enrollments
  **/
  @Schema(example = "false", description = "If true, enrollment data will be included. If false, enrollment data will be omitted.")
  public Boolean isEnrollments() {
    return enrollments;
  }
  public void setEnrollments(Boolean enrollments) {
    this.enrollments = enrollments;
  }
  public ReportParameters groups(Boolean groups) {
    this.groups = groups;
    return this;
  }

  

  /**
  * If true, group data will be included. If false, group data will be omitted.
  * @return groups
  **/
  @Schema(example = "false", description = "If true, group data will be included. If false, group data will be omitted.")
  public Boolean isGroups() {
    return groups;
  }
  public void setGroups(Boolean groups) {
    this.groups = groups;
  }
  public ReportParameters includeDeleted(Boolean includeDeleted) {
    this.includeDeleted = includeDeleted;
    return this;
  }

  

  /**
  * If true, deleted objects will be included. If false, deleted objects will be omitted.
  * @return includeDeleted
  **/
  @Schema(example = "false", description = "If true, deleted objects will be included. If false, deleted objects will be omitted.")
  public Boolean isIncludeDeleted() {
    return includeDeleted;
  }
  public void setIncludeDeleted(Boolean includeDeleted) {
    this.includeDeleted = includeDeleted;
  }
  public ReportParameters includeEnrollmentState(Boolean includeEnrollmentState) {
    this.includeEnrollmentState = includeEnrollmentState;
    return this;
  }

  

  /**
  * If true, enrollment state will be included. If false, enrollment state will be omitted. Defaults to false.
  * @return includeEnrollmentState
  **/
  @Schema(example = "false", description = "If true, enrollment state will be included. If false, enrollment state will be omitted. Defaults to false.")
  public Boolean isIncludeEnrollmentState() {
    return includeEnrollmentState;
  }
  public void setIncludeEnrollmentState(Boolean includeEnrollmentState) {
    this.includeEnrollmentState = includeEnrollmentState;
  }
  public ReportParameters order(String order) {
    this.order = order;
    return this;
  }

  

  /**
  * The sort order for the csv, Options: &#x27;users&#x27;, &#x27;courses&#x27;, &#x27;outcomes&#x27;.
  * @return order
  **/
  @Schema(example = "users", description = "The sort order for the csv, Options: 'users', 'courses', 'outcomes'.")
  public String getOrder() {
    return order;
  }
  public void setOrder(String order) {
    this.order = order;
  }
  public ReportParameters sections(Boolean sections) {
    this.sections = sections;
    return this;
  }

  

  /**
  * If true, section data will be included. If false, section data will be omitted.
  * @return sections
  **/
  @Schema(example = "false", description = "If true, section data will be included. If false, section data will be omitted.")
  public Boolean isSections() {
    return sections;
  }
  public void setSections(Boolean sections) {
    this.sections = sections;
  }
  public ReportParameters sisAccountsCsv(Integer sisAccountsCsv) {
    this.sisAccountsCsv = sisAccountsCsv;
    return this;
  }

  

  /**
  * Get sisAccountsCsv
  * @return sisAccountsCsv
  **/
  @Schema(example = "1", description = "")
  public Integer getSisAccountsCsv() {
    return sisAccountsCsv;
  }
  public void setSisAccountsCsv(Integer sisAccountsCsv) {
    this.sisAccountsCsv = sisAccountsCsv;
  }
  public ReportParameters sisTermsCsv(Integer sisTermsCsv) {
    this.sisTermsCsv = sisTermsCsv;
    return this;
  }

  

  /**
  * Get sisTermsCsv
  * @return sisTermsCsv
  **/
  @Schema(example = "1", description = "")
  public Integer getSisTermsCsv() {
    return sisTermsCsv;
  }
  public void setSisTermsCsv(Integer sisTermsCsv) {
    this.sisTermsCsv = sisTermsCsv;
  }
  public ReportParameters startAt(OffsetDateTime startAt) {
    this.startAt = startAt;
    return this;
  }

  

  /**
  * The beginning date for submissions. Max time range is 2 weeks.
  * @return startAt
  **/
  @Schema(description = "The beginning date for submissions. Max time range is 2 weeks.")
  public OffsetDateTime getStartAt() {
    return startAt;
  }
  public void setStartAt(OffsetDateTime startAt) {
    this.startAt = startAt;
  }
  public ReportParameters terms(Boolean terms) {
    this.terms = terms;
    return this;
  }

  

  /**
  * If true, term data will be included. If false, term data will be omitted.
  * @return terms
  **/
  @Schema(example = "false", description = "If true, term data will be included. If false, term data will be omitted.")
  public Boolean isTerms() {
    return terms;
  }
  public void setTerms(Boolean terms) {
    this.terms = terms;
  }
  public ReportParameters users(Boolean users) {
    this.users = users;
    return this;
  }

  

  /**
  * If true, user data will be included. If false, user data will be omitted.
  * @return users
  **/
  @Schema(example = "false", description = "If true, user data will be included. If false, user data will be omitted.")
  public Boolean isUsers() {
    return users;
  }
  public void setUsers(Boolean users) {
    this.users = users;
  }
  public ReportParameters xlist(Boolean xlist) {
    this.xlist = xlist;
    return this;
  }

  

  /**
  * If true, data for crosslisted courses will be included. If false, data for crosslisted courses will be omitted.
  * @return xlist
  **/
  @Schema(example = "false", description = "If true, data for crosslisted courses will be included. If false, data for crosslisted courses will be omitted.")
  public Boolean isXlist() {
    return xlist;
  }
  public void setXlist(Boolean xlist) {
    this.xlist = xlist;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportParameters reportParameters = (ReportParameters) o;
    return Objects.equals(this.accounts, reportParameters.accounts) &&
        Objects.equals(this.courseId, reportParameters.courseId) &&
        Objects.equals(this.courses, reportParameters.courses) &&
        Objects.equals(this.endAt, reportParameters.endAt) &&
        Objects.equals(this.enrollmentState, reportParameters.enrollmentState) &&
        Objects.equals(this.enrollmentTermId, reportParameters.enrollmentTermId) &&
        Objects.equals(this.enrollments, reportParameters.enrollments) &&
        Objects.equals(this.groups, reportParameters.groups) &&
        Objects.equals(this.includeDeleted, reportParameters.includeDeleted) &&
        Objects.equals(this.includeEnrollmentState, reportParameters.includeEnrollmentState) &&
        Objects.equals(this.order, reportParameters.order) &&
        Objects.equals(this.sections, reportParameters.sections) &&
        Objects.equals(this.sisAccountsCsv, reportParameters.sisAccountsCsv) &&
        Objects.equals(this.sisTermsCsv, reportParameters.sisTermsCsv) &&
        Objects.equals(this.startAt, reportParameters.startAt) &&
        Objects.equals(this.terms, reportParameters.terms) &&
        Objects.equals(this.users, reportParameters.users) &&
        Objects.equals(this.xlist, reportParameters.xlist);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(accounts, courseId, courses, endAt, enrollmentState, enrollmentTermId, enrollments, groups, includeDeleted, includeEnrollmentState, order, sections, sisAccountsCsv, sisTermsCsv, startAt, terms, users, xlist);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportParameters {\n");
    
    sb.append("    accounts: ").append(toIndentedString(accounts)).append("\n");
    sb.append("    courseId: ").append(toIndentedString(courseId)).append("\n");
    sb.append("    courses: ").append(toIndentedString(courses)).append("\n");
    sb.append("    endAt: ").append(toIndentedString(endAt)).append("\n");
    sb.append("    enrollmentState: ").append(toIndentedString(enrollmentState)).append("\n");
    sb.append("    enrollmentTermId: ").append(toIndentedString(enrollmentTermId)).append("\n");
    sb.append("    enrollments: ").append(toIndentedString(enrollments)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    includeDeleted: ").append(toIndentedString(includeDeleted)).append("\n");
    sb.append("    includeEnrollmentState: ").append(toIndentedString(includeEnrollmentState)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    sections: ").append(toIndentedString(sections)).append("\n");
    sb.append("    sisAccountsCsv: ").append(toIndentedString(sisAccountsCsv)).append("\n");
    sb.append("    sisTermsCsv: ").append(toIndentedString(sisTermsCsv)).append("\n");
    sb.append("    startAt: ").append(toIndentedString(startAt)).append("\n");
    sb.append("    terms: ").append(toIndentedString(terms)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("    xlist: ").append(toIndentedString(xlist)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
