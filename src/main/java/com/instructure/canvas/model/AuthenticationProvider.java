/*
 * canvas.instructure.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.instructure.canvas.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.instructure.canvas.model.FederatedAttributesConfig;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * AuthenticationProvider
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-11-06T15:34:49.014533Z[Europe/London]")
public class AuthenticationProvider {

  @JsonProperty("auth_base")

  private String authBase = null;

  @JsonProperty("auth_filter")

  private String authFilter = null;

  @JsonProperty("auth_host")

  private String authHost = null;

  @JsonProperty("auth_over_tls")

  private Integer authOverTls = null;

  @JsonProperty("auth_port")

  private Integer authPort = null;

  @JsonProperty("auth_type")

  private String authType = null;

  @JsonProperty("auth_username")

  private String authUsername = null;

  @JsonProperty("certificate_fingerprint")

  private String certificateFingerprint = null;

  @JsonProperty("federated_attributes")

  private FederatedAttributesConfig federatedAttributes = null;

  @JsonProperty("id")

  private Integer id = null;

  @JsonProperty("identifier_format")

  private String identifierFormat = null;

  @JsonProperty("idp_entity_id")

  private String idpEntityId = null;

  @JsonProperty("jit_provisioning")

  private Boolean jitProvisioning = null;

  @JsonProperty("log_in_url")

  private String logInUrl = null;

  @JsonProperty("log_out_url")

  private String logOutUrl = null;

  @JsonProperty("login_attribute")

  private String loginAttribute = null;

  @JsonProperty("position")

  private Integer position = null;

  @JsonProperty("requested_authn_context")

  private String requestedAuthnContext = null;

  @JsonProperty("sig_alg")

  private String sigAlg = null;
  public AuthenticationProvider authBase(String authBase) {
    this.authBase = authBase;
    return this;
  }

  

  /**
  * Valid for LDAP and CAS providers.
  * @return authBase
  **/
  @Schema(description = "Valid for LDAP and CAS providers.")
  public String getAuthBase() {
    return authBase;
  }
  public void setAuthBase(String authBase) {
    this.authBase = authBase;
  }
  public AuthenticationProvider authFilter(String authFilter) {
    this.authFilter = authFilter;
    return this;
  }

  

  /**
  * Valid for LDAP providers.
  * @return authFilter
  **/
  @Schema(example = "filter1", description = "Valid for LDAP providers.")
  public String getAuthFilter() {
    return authFilter;
  }
  public void setAuthFilter(String authFilter) {
    this.authFilter = authFilter;
  }
  public AuthenticationProvider authHost(String authHost) {
    this.authHost = authHost;
    return this;
  }

  

  /**
  * Valid for LDAP providers.
  * @return authHost
  **/
  @Schema(example = "127.0.0.1", description = "Valid for LDAP providers.")
  public String getAuthHost() {
    return authHost;
  }
  public void setAuthHost(String authHost) {
    this.authHost = authHost;
  }
  public AuthenticationProvider authOverTls(Integer authOverTls) {
    this.authOverTls = authOverTls;
    return this;
  }

  

  /**
  * Valid for LDAP providers.
  * @return authOverTls
  **/
  @Schema(description = "Valid for LDAP providers.")
  public Integer getAuthOverTls() {
    return authOverTls;
  }
  public void setAuthOverTls(Integer authOverTls) {
    this.authOverTls = authOverTls;
  }
  public AuthenticationProvider authPort(Integer authPort) {
    this.authPort = authPort;
    return this;
  }

  

  /**
  * Valid for LDAP providers.
  * @return authPort
  **/
  @Schema(description = "Valid for LDAP providers.")
  public Integer getAuthPort() {
    return authPort;
  }
  public void setAuthPort(Integer authPort) {
    this.authPort = authPort;
  }
  public AuthenticationProvider authType(String authType) {
    this.authType = authType;
    return this;
  }

  

  /**
  * Valid for all providers.
  * @return authType
  **/
  @Schema(example = "saml", description = "Valid for all providers.")
  public String getAuthType() {
    return authType;
  }
  public void setAuthType(String authType) {
    this.authType = authType;
  }
  public AuthenticationProvider authUsername(String authUsername) {
    this.authUsername = authUsername;
    return this;
  }

  

  /**
  * Valid for LDAP providers.
  * @return authUsername
  **/
  @Schema(example = "username1", description = "Valid for LDAP providers.")
  public String getAuthUsername() {
    return authUsername;
  }
  public void setAuthUsername(String authUsername) {
    this.authUsername = authUsername;
  }
  public AuthenticationProvider certificateFingerprint(String certificateFingerprint) {
    this.certificateFingerprint = certificateFingerprint;
    return this;
  }

  

  /**
  * Valid for SAML providers.
  * @return certificateFingerprint
  **/
  @Schema(example = "111222", description = "Valid for SAML providers.")
  public String getCertificateFingerprint() {
    return certificateFingerprint;
  }
  public void setCertificateFingerprint(String certificateFingerprint) {
    this.certificateFingerprint = certificateFingerprint;
  }
  public AuthenticationProvider federatedAttributes(FederatedAttributesConfig federatedAttributes) {
    this.federatedAttributes = federatedAttributes;
    return this;
  }

  

  /**
  * Get federatedAttributes
  * @return federatedAttributes
  **/
  @Schema(description = "")
  public FederatedAttributesConfig getFederatedAttributes() {
    return federatedAttributes;
  }
  public void setFederatedAttributes(FederatedAttributesConfig federatedAttributes) {
    this.federatedAttributes = federatedAttributes;
  }
  public AuthenticationProvider id(Integer id) {
    this.id = id;
    return this;
  }

  

  /**
  * Valid for all providers.
  * @return id
  **/
  @Schema(example = "1649", description = "Valid for all providers.")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }
  public AuthenticationProvider identifierFormat(String identifierFormat) {
    this.identifierFormat = identifierFormat;
    return this;
  }

  

  /**
  * Valid for SAML providers.
  * @return identifierFormat
  **/
  @Schema(example = "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress", description = "Valid for SAML providers.")
  public String getIdentifierFormat() {
    return identifierFormat;
  }
  public void setIdentifierFormat(String identifierFormat) {
    this.identifierFormat = identifierFormat;
  }
  public AuthenticationProvider idpEntityId(String idpEntityId) {
    this.idpEntityId = idpEntityId;
    return this;
  }

  

  /**
  * Valid for SAML providers.
  * @return idpEntityId
  **/
  @Schema(example = "http://example.com/saml1", description = "Valid for SAML providers.")
  public String getIdpEntityId() {
    return idpEntityId;
  }
  public void setIdpEntityId(String idpEntityId) {
    this.idpEntityId = idpEntityId;
  }
  public AuthenticationProvider jitProvisioning(Boolean jitProvisioning) {
    this.jitProvisioning = jitProvisioning;
    return this;
  }

  

  /**
  * Just In Time provisioning. Valid for all providers except Canvas (which has the similar in concept self_registration setting).
  * @return jitProvisioning
  **/
  @Schema(description = "Just In Time provisioning. Valid for all providers except Canvas (which has the similar in concept self_registration setting).")
  public Boolean isJitProvisioning() {
    return jitProvisioning;
  }
  public void setJitProvisioning(Boolean jitProvisioning) {
    this.jitProvisioning = jitProvisioning;
  }
  public AuthenticationProvider logInUrl(String logInUrl) {
    this.logInUrl = logInUrl;
    return this;
  }

  

  /**
  * Valid for SAML and CAS providers.
  * @return logInUrl
  **/
  @Schema(example = "http://example.com/saml1/sli", description = "Valid for SAML and CAS providers.")
  public String getLogInUrl() {
    return logInUrl;
  }
  public void setLogInUrl(String logInUrl) {
    this.logInUrl = logInUrl;
  }
  public AuthenticationProvider logOutUrl(String logOutUrl) {
    this.logOutUrl = logOutUrl;
    return this;
  }

  

  /**
  * Valid for SAML providers.
  * @return logOutUrl
  **/
  @Schema(example = "http://example.com/saml1/slo", description = "Valid for SAML providers.")
  public String getLogOutUrl() {
    return logOutUrl;
  }
  public void setLogOutUrl(String logOutUrl) {
    this.logOutUrl = logOutUrl;
  }
  public AuthenticationProvider loginAttribute(String loginAttribute) {
    this.loginAttribute = loginAttribute;
    return this;
  }

  

  /**
  * Valid for SAML providers.
  * @return loginAttribute
  **/
  @Schema(example = "nameid", description = "Valid for SAML providers.")
  public String getLoginAttribute() {
    return loginAttribute;
  }
  public void setLoginAttribute(String loginAttribute) {
    this.loginAttribute = loginAttribute;
  }
  public AuthenticationProvider position(Integer position) {
    this.position = position;
    return this;
  }

  

  /**
  * Valid for all providers.
  * @return position
  **/
  @Schema(example = "1", description = "Valid for all providers.")
  public Integer getPosition() {
    return position;
  }
  public void setPosition(Integer position) {
    this.position = position;
  }
  public AuthenticationProvider requestedAuthnContext(String requestedAuthnContext) {
    this.requestedAuthnContext = requestedAuthnContext;
    return this;
  }

  

  /**
  * Valid for SAML providers.
  * @return requestedAuthnContext
  **/
  @Schema(description = "Valid for SAML providers.")
  public String getRequestedAuthnContext() {
    return requestedAuthnContext;
  }
  public void setRequestedAuthnContext(String requestedAuthnContext) {
    this.requestedAuthnContext = requestedAuthnContext;
  }
  public AuthenticationProvider sigAlg(String sigAlg) {
    this.sigAlg = sigAlg;
    return this;
  }

  

  /**
  * Valid for SAML providers.
  * @return sigAlg
  **/
  @Schema(example = "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256", description = "Valid for SAML providers.")
  public String getSigAlg() {
    return sigAlg;
  }
  public void setSigAlg(String sigAlg) {
    this.sigAlg = sigAlg;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthenticationProvider authenticationProvider = (AuthenticationProvider) o;
    return Objects.equals(this.authBase, authenticationProvider.authBase) &&
        Objects.equals(this.authFilter, authenticationProvider.authFilter) &&
        Objects.equals(this.authHost, authenticationProvider.authHost) &&
        Objects.equals(this.authOverTls, authenticationProvider.authOverTls) &&
        Objects.equals(this.authPort, authenticationProvider.authPort) &&
        Objects.equals(this.authType, authenticationProvider.authType) &&
        Objects.equals(this.authUsername, authenticationProvider.authUsername) &&
        Objects.equals(this.certificateFingerprint, authenticationProvider.certificateFingerprint) &&
        Objects.equals(this.federatedAttributes, authenticationProvider.federatedAttributes) &&
        Objects.equals(this.id, authenticationProvider.id) &&
        Objects.equals(this.identifierFormat, authenticationProvider.identifierFormat) &&
        Objects.equals(this.idpEntityId, authenticationProvider.idpEntityId) &&
        Objects.equals(this.jitProvisioning, authenticationProvider.jitProvisioning) &&
        Objects.equals(this.logInUrl, authenticationProvider.logInUrl) &&
        Objects.equals(this.logOutUrl, authenticationProvider.logOutUrl) &&
        Objects.equals(this.loginAttribute, authenticationProvider.loginAttribute) &&
        Objects.equals(this.position, authenticationProvider.position) &&
        Objects.equals(this.requestedAuthnContext, authenticationProvider.requestedAuthnContext) &&
        Objects.equals(this.sigAlg, authenticationProvider.sigAlg);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(authBase, authFilter, authHost, authOverTls, authPort, authType, authUsername, certificateFingerprint, federatedAttributes, id, identifierFormat, idpEntityId, jitProvisioning, logInUrl, logOutUrl, loginAttribute, position, requestedAuthnContext, sigAlg);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthenticationProvider {\n");
    
    sb.append("    authBase: ").append(toIndentedString(authBase)).append("\n");
    sb.append("    authFilter: ").append(toIndentedString(authFilter)).append("\n");
    sb.append("    authHost: ").append(toIndentedString(authHost)).append("\n");
    sb.append("    authOverTls: ").append(toIndentedString(authOverTls)).append("\n");
    sb.append("    authPort: ").append(toIndentedString(authPort)).append("\n");
    sb.append("    authType: ").append(toIndentedString(authType)).append("\n");
    sb.append("    authUsername: ").append(toIndentedString(authUsername)).append("\n");
    sb.append("    certificateFingerprint: ").append(toIndentedString(certificateFingerprint)).append("\n");
    sb.append("    federatedAttributes: ").append(toIndentedString(federatedAttributes)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    identifierFormat: ").append(toIndentedString(identifierFormat)).append("\n");
    sb.append("    idpEntityId: ").append(toIndentedString(idpEntityId)).append("\n");
    sb.append("    jitProvisioning: ").append(toIndentedString(jitProvisioning)).append("\n");
    sb.append("    logInUrl: ").append(toIndentedString(logInUrl)).append("\n");
    sb.append("    logOutUrl: ").append(toIndentedString(logOutUrl)).append("\n");
    sb.append("    loginAttribute: ").append(toIndentedString(loginAttribute)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    requestedAuthnContext: ").append(toIndentedString(requestedAuthnContext)).append("\n");
    sb.append("    sigAlg: ").append(toIndentedString(sigAlg)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
