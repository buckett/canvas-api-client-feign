/*
 * canvas.instructure.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.instructure.canvas.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * RolePermissions
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-11-06T15:34:49.014533Z[Europe/London]")
public class RolePermissions {

  @JsonProperty("applies_to_descendants")

  private Boolean appliesToDescendants = true;

  @JsonProperty("applies_to_self")

  private Boolean appliesToSelf = true;

  @JsonProperty("enabled")

  private Boolean enabled = null;

  @JsonProperty("explicit")

  private Boolean explicit = null;

  @JsonProperty("locked")

  private Boolean locked = null;

  @JsonProperty("prior_default")

  private Boolean priorDefault = null;

  @JsonProperty("readonly")

  private Boolean readonly = null;
  public RolePermissions appliesToDescendants(Boolean appliesToDescendants) {
    this.appliesToDescendants = appliesToDescendants;
    return this;
  }

  

  /**
  * Whether the permission cascades down to sub accounts of the account this role is in. Only present if enabled is true
  * @return appliesToDescendants
  **/
  @Schema(example = "false", description = "Whether the permission cascades down to sub accounts of the account this role is in. Only present if enabled is true")
  public Boolean isAppliesToDescendants() {
    return appliesToDescendants;
  }
  public void setAppliesToDescendants(Boolean appliesToDescendants) {
    this.appliesToDescendants = appliesToDescendants;
  }
  public RolePermissions appliesToSelf(Boolean appliesToSelf) {
    this.appliesToSelf = appliesToSelf;
    return this;
  }

  

  /**
  * Whether the permission applies to the account this role is in. Only present if enabled is true
  * @return appliesToSelf
  **/
  @Schema(example = "true", description = "Whether the permission applies to the account this role is in. Only present if enabled is true")
  public Boolean isAppliesToSelf() {
    return appliesToSelf;
  }
  public void setAppliesToSelf(Boolean appliesToSelf) {
    this.appliesToSelf = appliesToSelf;
  }
  public RolePermissions enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  

  /**
  * Whether the role has the permission
  * @return enabled
  **/
  @Schema(example = "true", description = "Whether the role has the permission")
  public Boolean isEnabled() {
    return enabled;
  }
  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }
  public RolePermissions explicit(Boolean explicit) {
    this.explicit = explicit;
    return this;
  }

  

  /**
  * Whether the value of enabled is specified explicitly by this role, or inherited from an upstream role.
  * @return explicit
  **/
  @Schema(example = "true", description = "Whether the value of enabled is specified explicitly by this role, or inherited from an upstream role.")
  public Boolean isExplicit() {
    return explicit;
  }
  public void setExplicit(Boolean explicit) {
    this.explicit = explicit;
  }
  public RolePermissions locked(Boolean locked) {
    this.locked = locked;
    return this;
  }

  

  /**
  * Whether the permission is locked by this role
  * @return locked
  **/
  @Schema(example = "false", description = "Whether the permission is locked by this role")
  public Boolean isLocked() {
    return locked;
  }
  public void setLocked(Boolean locked) {
    this.locked = locked;
  }
  public RolePermissions priorDefault(Boolean priorDefault) {
    this.priorDefault = priorDefault;
    return this;
  }

  

  /**
  * The value that would have been inherited from upstream if the role had not explicitly set a value. Only present if explicit is true.
  * @return priorDefault
  **/
  @Schema(example = "false", description = "The value that would have been inherited from upstream if the role had not explicitly set a value. Only present if explicit is true.")
  public Boolean isPriorDefault() {
    return priorDefault;
  }
  public void setPriorDefault(Boolean priorDefault) {
    this.priorDefault = priorDefault;
  }
  public RolePermissions readonly(Boolean readonly) {
    this.readonly = readonly;
    return this;
  }

  

  /**
  * Whether the permission can be modified in this role (i.e. whether the permission is locked by an upstream role).
  * @return readonly
  **/
  @Schema(example = "false", description = "Whether the permission can be modified in this role (i.e. whether the permission is locked by an upstream role).")
  public Boolean isReadonly() {
    return readonly;
  }
  public void setReadonly(Boolean readonly) {
    this.readonly = readonly;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RolePermissions rolePermissions = (RolePermissions) o;
    return Objects.equals(this.appliesToDescendants, rolePermissions.appliesToDescendants) &&
        Objects.equals(this.appliesToSelf, rolePermissions.appliesToSelf) &&
        Objects.equals(this.enabled, rolePermissions.enabled) &&
        Objects.equals(this.explicit, rolePermissions.explicit) &&
        Objects.equals(this.locked, rolePermissions.locked) &&
        Objects.equals(this.priorDefault, rolePermissions.priorDefault) &&
        Objects.equals(this.readonly, rolePermissions.readonly);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(appliesToDescendants, appliesToSelf, enabled, explicit, locked, priorDefault, readonly);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RolePermissions {\n");
    
    sb.append("    appliesToDescendants: ").append(toIndentedString(appliesToDescendants)).append("\n");
    sb.append("    appliesToSelf: ").append(toIndentedString(appliesToSelf)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    explicit: ").append(toIndentedString(explicit)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("    priorDefault: ").append(toIndentedString(priorDefault)).append("\n");
    sb.append("    readonly: ").append(toIndentedString(readonly)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
