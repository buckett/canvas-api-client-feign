/*
 * canvas.instructure.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.instructure.canvas.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.instructure.canvas.model.Progress;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.OffsetDateTime;

/**
 * QuizReport
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-11-06T15:34:49.014533Z[Europe/London]")
public class QuizReport {

  @JsonProperty("anonymous")

  private Boolean anonymous = null;

  @JsonProperty("created_at")

  private OffsetDateTime createdAt = null;

  @JsonProperty("file")

  private java.io.File file = null;

  @JsonProperty("generatable")

  private Boolean generatable = null;

  @JsonProperty("id")

  private Integer id = null;

  @JsonProperty("includes_all_versions")

  private Boolean includesAllVersions = null;

  @JsonProperty("progress")

  private Progress progress = null;

  @JsonProperty("progress_url")

  private String progressUrl = null;

  @JsonProperty("quiz_id")

  private Integer quizId = null;

  @JsonProperty("readable_type")

  private String readableType = null;

  @JsonProperty("report_type")

  private String reportType = null;

  @JsonProperty("updated_at")

  private OffsetDateTime updatedAt = null;

  @JsonProperty("url")

  private String url = null;
  public QuizReport anonymous(Boolean anonymous) {
    this.anonymous = anonymous;
    return this;
  }

  

  /**
  * boolean indicating whether the report is for an anonymous survey. if true, no student names will be included in the csv
  * @return anonymous
  **/
  @Schema(example = "false", description = "boolean indicating whether the report is for an anonymous survey. if true, no student names will be included in the csv")
  public Boolean isAnonymous() {
    return anonymous;
  }
  public void setAnonymous(Boolean anonymous) {
    this.anonymous = anonymous;
  }
  public QuizReport createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  

  /**
  * when the report was created
  * @return createdAt
  **/
  @Schema(description = "when the report was created")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }
  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }
  public QuizReport file(java.io.File file) {
    this.file = file;
    return this;
  }

  

  /**
  * Get file
  * @return file
  **/
  @Schema(description = "")
  public java.io.File getFile() {
    return file;
  }
  public void setFile(java.io.File file) {
    this.file = file;
  }
  public QuizReport generatable(Boolean generatable) {
    this.generatable = generatable;
    return this;
  }

  

  /**
  * boolean indicating whether the report can be generated, which is true unless the quiz is a survey one
  * @return generatable
  **/
  @Schema(example = "true", description = "boolean indicating whether the report can be generated, which is true unless the quiz is a survey one")
  public Boolean isGeneratable() {
    return generatable;
  }
  public void setGeneratable(Boolean generatable) {
    this.generatable = generatable;
  }
  public QuizReport id(Integer id) {
    this.id = id;
    return this;
  }

  

  /**
  * the ID of the quiz report
  * @return id
  **/
  @Schema(example = "5", description = "the ID of the quiz report")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }
  public QuizReport includesAllVersions(Boolean includesAllVersions) {
    this.includesAllVersions = includesAllVersions;
    return this;
  }

  

  /**
  * boolean indicating whether the report represents all submissions or only the most recent ones for each student
  * @return includesAllVersions
  **/
  @Schema(example = "true", description = "boolean indicating whether the report represents all submissions or only the most recent ones for each student")
  public Boolean isIncludesAllVersions() {
    return includesAllVersions;
  }
  public void setIncludesAllVersions(Boolean includesAllVersions) {
    this.includesAllVersions = includesAllVersions;
  }
  public QuizReport progress(Progress progress) {
    this.progress = progress;
    return this;
  }

  

  /**
  * Get progress
  * @return progress
  **/
  @Schema(description = "")
  public Progress getProgress() {
    return progress;
  }
  public void setProgress(Progress progress) {
    this.progress = progress;
  }
  public QuizReport progressUrl(String progressUrl) {
    this.progressUrl = progressUrl;
    return this;
  }

  

  /**
  * if the report has not yet finished generating, a URL where information about its progress can be retrieved. refer to the Progress API for more information (Note: not available in JSON-API format)
  * @return progressUrl
  **/
  @Schema(description = "if the report has not yet finished generating, a URL where information about its progress can be retrieved. refer to the Progress API for more information (Note: not available in JSON-API format)")
  public String getProgressUrl() {
    return progressUrl;
  }
  public void setProgressUrl(String progressUrl) {
    this.progressUrl = progressUrl;
  }
  public QuizReport quizId(Integer quizId) {
    this.quizId = quizId;
    return this;
  }

  

  /**
  * the ID of the quiz
  * @return quizId
  **/
  @Schema(example = "4", description = "the ID of the quiz")
  public Integer getQuizId() {
    return quizId;
  }
  public void setQuizId(Integer quizId) {
    this.quizId = quizId;
  }
  public QuizReport readableType(String readableType) {
    this.readableType = readableType;
    return this;
  }

  

  /**
  * a human-readable (and localized) version of the report_type
  * @return readableType
  **/
  @Schema(example = "Student Analysis", description = "a human-readable (and localized) version of the report_type")
  public String getReadableType() {
    return readableType;
  }
  public void setReadableType(String readableType) {
    this.readableType = readableType;
  }
  public QuizReport reportType(String reportType) {
    this.reportType = reportType;
    return this;
  }

  

  /**
  * which type of report this is possible values: &#x27;student_analysis&#x27;, &#x27;item_analysis&#x27;
  * @return reportType
  **/
  @Schema(example = "student_analysis", description = "which type of report this is possible values: 'student_analysis', 'item_analysis'")
  public String getReportType() {
    return reportType;
  }
  public void setReportType(String reportType) {
    this.reportType = reportType;
  }
  public QuizReport updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  

  /**
  * when the report was last updated
  * @return updatedAt
  **/
  @Schema(description = "when the report was last updated")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }
  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }
  public QuizReport url(String url) {
    this.url = url;
    return this;
  }

  

  /**
  * the API endpoint for this report
  * @return url
  **/
  @Schema(example = "http://canvas.example.com/api/v1/courses/1/quizzes/1/reports/1", description = "the API endpoint for this report")
  public String getUrl() {
    return url;
  }
  public void setUrl(String url) {
    this.url = url;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuizReport quizReport = (QuizReport) o;
    return Objects.equals(this.anonymous, quizReport.anonymous) &&
        Objects.equals(this.createdAt, quizReport.createdAt) &&
        Objects.equals(this.file, quizReport.file) &&
        Objects.equals(this.generatable, quizReport.generatable) &&
        Objects.equals(this.id, quizReport.id) &&
        Objects.equals(this.includesAllVersions, quizReport.includesAllVersions) &&
        Objects.equals(this.progress, quizReport.progress) &&
        Objects.equals(this.progressUrl, quizReport.progressUrl) &&
        Objects.equals(this.quizId, quizReport.quizId) &&
        Objects.equals(this.readableType, quizReport.readableType) &&
        Objects.equals(this.reportType, quizReport.reportType) &&
        Objects.equals(this.updatedAt, quizReport.updatedAt) &&
        Objects.equals(this.url, quizReport.url);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(anonymous, createdAt, file, generatable, id, includesAllVersions, progress, progressUrl, quizId, readableType, reportType, updatedAt, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuizReport {\n");
    
    sb.append("    anonymous: ").append(toIndentedString(anonymous)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    file: ").append(toIndentedString(file)).append("\n");
    sb.append("    generatable: ").append(toIndentedString(generatable)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    includesAllVersions: ").append(toIndentedString(includesAllVersions)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    progressUrl: ").append(toIndentedString(progressUrl)).append("\n");
    sb.append("    quizId: ").append(toIndentedString(quizId)).append("\n");
    sb.append("    readableType: ").append(toIndentedString(readableType)).append("\n");
    sb.append("    reportType: ").append(toIndentedString(reportType)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
