/*
 * canvas.instructure.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.instructure.canvas.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.instructure.canvas.model.OutcomeImportData;
import com.instructure.canvas.model.User;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * OutcomeImport
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-11-06T15:34:49.014533Z[Europe/London]")
public class OutcomeImport {

  @JsonProperty("created_at")

  private OffsetDateTime createdAt = null;

  @JsonProperty("data")

  private OutcomeImportData data = null;

  @JsonProperty("ended_at")

  private OffsetDateTime endedAt = null;

  @JsonProperty("id")

  private Integer id = null;

  @JsonProperty("processing_errors")

  private List<List<Object>> processingErrors = null;

  @JsonProperty("progress")

  private String progress = null;

  @JsonProperty("updated_at")

  private OffsetDateTime updatedAt = null;

  @JsonProperty("user")

  private User user = null;

  @JsonProperty("workflow_state")

  private String workflowState = null;
  public OutcomeImport createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  

  /**
  * The date the outcome import was created.
  * @return createdAt
  **/
  @Schema(description = "The date the outcome import was created.")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }
  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }
  public OutcomeImport data(OutcomeImportData data) {
    this.data = data;
    return this;
  }

  

  /**
  * Get data
  * @return data
  **/
  @Schema(description = "")
  public OutcomeImportData getData() {
    return data;
  }
  public void setData(OutcomeImportData data) {
    this.data = data;
  }
  public OutcomeImport endedAt(OffsetDateTime endedAt) {
    this.endedAt = endedAt;
    return this;
  }

  

  /**
  * The date the outcome import finished. Returns null if not finished.
  * @return endedAt
  **/
  @Schema(description = "The date the outcome import finished. Returns null if not finished.")
  public OffsetDateTime getEndedAt() {
    return endedAt;
  }
  public void setEndedAt(OffsetDateTime endedAt) {
    this.endedAt = endedAt;
  }
  public OutcomeImport id(Integer id) {
    this.id = id;
    return this;
  }

  

  /**
  * The unique identifier for the outcome import.
  * @return id
  **/
  @Schema(example = "1", description = "The unique identifier for the outcome import.")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }
  public OutcomeImport processingErrors(List<List<Object>> processingErrors) {
    this.processingErrors = processingErrors;
    return this;
  }

  public OutcomeImport addProcessingErrorsItem(List<Object> processingErrorsItem) {
    if (this.processingErrors == null) {
      this.processingErrors = new ArrayList<List<Object>>();
    }
    this.processingErrors.add(processingErrorsItem);
    return this;
  }

  /**
  * An array of row number / error message pairs. Returns the first 25 errors.
  * @return processingErrors
  **/
  @Schema(example = "[[1, Missing required fields: title]]", description = "An array of row number / error message pairs. Returns the first 25 errors.")
  public List<List<Object>> getProcessingErrors() {
    return processingErrors;
  }
  public void setProcessingErrors(List<List<Object>> processingErrors) {
    this.processingErrors = processingErrors;
  }
  public OutcomeImport progress(String progress) {
    this.progress = progress;
    return this;
  }

  

  /**
  * The progress of the outcome import.
  * @return progress
  **/
  @Schema(example = "100", description = "The progress of the outcome import.")
  public String getProgress() {
    return progress;
  }
  public void setProgress(String progress) {
    this.progress = progress;
  }
  public OutcomeImport updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  

  /**
  * The date the outcome import was last updated.
  * @return updatedAt
  **/
  @Schema(description = "The date the outcome import was last updated.")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }
  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }
  public OutcomeImport user(User user) {
    this.user = user;
    return this;
  }

  

  /**
  * Get user
  * @return user
  **/
  @Schema(description = "")
  public User getUser() {
    return user;
  }
  public void setUser(User user) {
    this.user = user;
  }
  public OutcomeImport workflowState(String workflowState) {
    this.workflowState = workflowState;
    return this;
  }

  

  /**
  * The current state of the outcome import.  - &#x27;created&#x27;: The outcome import has been created.  - &#x27;importing&#x27;: The outcome import is currently processing.  - &#x27;succeeded&#x27;: The outcome import has completed successfully.  - &#x27;failed&#x27;: The outcome import failed.
  * @return workflowState
  **/
  @Schema(example = "imported", description = "The current state of the outcome import.  - 'created': The outcome import has been created.  - 'importing': The outcome import is currently processing.  - 'succeeded': The outcome import has completed successfully.  - 'failed': The outcome import failed.")
  public String getWorkflowState() {
    return workflowState;
  }
  public void setWorkflowState(String workflowState) {
    this.workflowState = workflowState;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OutcomeImport outcomeImport = (OutcomeImport) o;
    return Objects.equals(this.createdAt, outcomeImport.createdAt) &&
        Objects.equals(this.data, outcomeImport.data) &&
        Objects.equals(this.endedAt, outcomeImport.endedAt) &&
        Objects.equals(this.id, outcomeImport.id) &&
        Objects.equals(this.processingErrors, outcomeImport.processingErrors) &&
        Objects.equals(this.progress, outcomeImport.progress) &&
        Objects.equals(this.updatedAt, outcomeImport.updatedAt) &&
        Objects.equals(this.user, outcomeImport.user) &&
        Objects.equals(this.workflowState, outcomeImport.workflowState);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(createdAt, data, endedAt, id, processingErrors, progress, updatedAt, user, workflowState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OutcomeImport {\n");
    
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    endedAt: ").append(toIndentedString(endedAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    processingErrors: ").append(toIndentedString(processingErrors)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    workflowState: ").append(toIndentedString(workflowState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
