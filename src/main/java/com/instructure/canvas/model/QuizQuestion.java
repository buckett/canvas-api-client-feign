/*
 * canvas.instructure.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.instructure.canvas.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.instructure.canvas.model.Answer;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;

/**
 * QuizQuestion
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-11-06T15:34:49.014533Z[Europe/London]")
public class QuizQuestion {

  @JsonProperty("answers")

  private List<Answer> answers = null;

  @JsonProperty("correct_comments")

  private String correctComments = null;

  @JsonProperty("id")

  private Long id = null;

  @JsonProperty("incorrect_comments")

  private String incorrectComments = null;

  @JsonProperty("neutral_comments")

  private String neutralComments = null;

  @JsonProperty("points_possible")

  private Long pointsPossible = null;

  @JsonProperty("position")

  private Long position = null;

  @JsonProperty("question_name")

  private String questionName = null;

  @JsonProperty("question_text")

  private String questionText = null;

  @JsonProperty("question_type")

  private String questionType = null;

  @JsonProperty("quiz_id")

  private Long quizId = null;
  public QuizQuestion answers(List<Answer> answers) {
    this.answers = answers;
    return this;
  }

  public QuizQuestion addAnswersItem(Answer answersItem) {
    if (this.answers == null) {
      this.answers = new ArrayList<Answer>();
    }
    this.answers.add(answersItem);
    return this;
  }

  /**
  * An array of available answers to display to the student.
  * @return answers
  **/
  @Schema(description = "An array of available answers to display to the student.")
  public List<Answer> getAnswers() {
    return answers;
  }
  public void setAnswers(List<Answer> answers) {
    this.answers = answers;
  }
  public QuizQuestion correctComments(String correctComments) {
    this.correctComments = correctComments;
    return this;
  }

  

  /**
  * The comments to display if the student answers the question correctly.
  * @return correctComments
  **/
  @Schema(example = "That's correct!", description = "The comments to display if the student answers the question correctly.")
  public String getCorrectComments() {
    return correctComments;
  }
  public void setCorrectComments(String correctComments) {
    this.correctComments = correctComments;
  }
  public QuizQuestion id(Long id) {
    this.id = id;
    return this;
  }

  

  /**
  * The ID of the quiz question.
  * @return id
  **/
  @Schema(example = "1", required = true, description = "The ID of the quiz question.")
  public Long getId() {
    return id;
  }
  public void setId(Long id) {
    this.id = id;
  }
  public QuizQuestion incorrectComments(String incorrectComments) {
    this.incorrectComments = incorrectComments;
    return this;
  }

  

  /**
  * The comments to display if the student answers incorrectly.
  * @return incorrectComments
  **/
  @Schema(example = "Unfortunately, that IS a prime number.", description = "The comments to display if the student answers incorrectly.")
  public String getIncorrectComments() {
    return incorrectComments;
  }
  public void setIncorrectComments(String incorrectComments) {
    this.incorrectComments = incorrectComments;
  }
  public QuizQuestion neutralComments(String neutralComments) {
    this.neutralComments = neutralComments;
    return this;
  }

  

  /**
  * The comments to display regardless of how the student answered.
  * @return neutralComments
  **/
  @Schema(example = "Goldbach's conjecture proposes that every even integer greater than 2 can be expressed as the sum of two prime numbers.", description = "The comments to display regardless of how the student answered.")
  public String getNeutralComments() {
    return neutralComments;
  }
  public void setNeutralComments(String neutralComments) {
    this.neutralComments = neutralComments;
  }
  public QuizQuestion pointsPossible(Long pointsPossible) {
    this.pointsPossible = pointsPossible;
    return this;
  }

  

  /**
  * The maximum amount of points possible received for getting this question correct.
  * @return pointsPossible
  **/
  @Schema(example = "5", description = "The maximum amount of points possible received for getting this question correct.")
  public Long getPointsPossible() {
    return pointsPossible;
  }
  public void setPointsPossible(Long pointsPossible) {
    this.pointsPossible = pointsPossible;
  }
  public QuizQuestion position(Long position) {
    this.position = position;
    return this;
  }

  

  /**
  * The order in which the question will be retrieved and displayed.
  * @return position
  **/
  @Schema(example = "1", description = "The order in which the question will be retrieved and displayed.")
  public Long getPosition() {
    return position;
  }
  public void setPosition(Long position) {
    this.position = position;
  }
  public QuizQuestion questionName(String questionName) {
    this.questionName = questionName;
    return this;
  }

  

  /**
  * The name of the question.
  * @return questionName
  **/
  @Schema(example = "Prime Number Identification", description = "The name of the question.")
  public String getQuestionName() {
    return questionName;
  }
  public void setQuestionName(String questionName) {
    this.questionName = questionName;
  }
  public QuizQuestion questionText(String questionText) {
    this.questionText = questionText;
    return this;
  }

  

  /**
  * The text of the question.
  * @return questionText
  **/
  @Schema(example = "Which of the following is NOT a prime number?", description = "The text of the question.")
  public String getQuestionText() {
    return questionText;
  }
  public void setQuestionText(String questionText) {
    this.questionText = questionText;
  }
  public QuizQuestion questionType(String questionType) {
    this.questionType = questionType;
    return this;
  }

  

  /**
  * The type of the question.
  * @return questionType
  **/
  @Schema(example = "multiple_choice_question", description = "The type of the question.")
  public String getQuestionType() {
    return questionType;
  }
  public void setQuestionType(String questionType) {
    this.questionType = questionType;
  }
  public QuizQuestion quizId(Long quizId) {
    this.quizId = quizId;
    return this;
  }

  

  /**
  * The ID of the Quiz the question belongs to.
  * @return quizId
  **/
  @Schema(example = "2", required = true, description = "The ID of the Quiz the question belongs to.")
  public Long getQuizId() {
    return quizId;
  }
  public void setQuizId(Long quizId) {
    this.quizId = quizId;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuizQuestion quizQuestion = (QuizQuestion) o;
    return Objects.equals(this.answers, quizQuestion.answers) &&
        Objects.equals(this.correctComments, quizQuestion.correctComments) &&
        Objects.equals(this.id, quizQuestion.id) &&
        Objects.equals(this.incorrectComments, quizQuestion.incorrectComments) &&
        Objects.equals(this.neutralComments, quizQuestion.neutralComments) &&
        Objects.equals(this.pointsPossible, quizQuestion.pointsPossible) &&
        Objects.equals(this.position, quizQuestion.position) &&
        Objects.equals(this.questionName, quizQuestion.questionName) &&
        Objects.equals(this.questionText, quizQuestion.questionText) &&
        Objects.equals(this.questionType, quizQuestion.questionType) &&
        Objects.equals(this.quizId, quizQuestion.quizId);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(answers, correctComments, id, incorrectComments, neutralComments, pointsPossible, position, questionName, questionText, questionType, quizId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuizQuestion {\n");
    
    sb.append("    answers: ").append(toIndentedString(answers)).append("\n");
    sb.append("    correctComments: ").append(toIndentedString(correctComments)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    incorrectComments: ").append(toIndentedString(incorrectComments)).append("\n");
    sb.append("    neutralComments: ").append(toIndentedString(neutralComments)).append("\n");
    sb.append("    pointsPossible: ").append(toIndentedString(pointsPossible)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    questionName: ").append(toIndentedString(questionName)).append("\n");
    sb.append("    questionText: ").append(toIndentedString(questionText)).append("\n");
    sb.append("    questionType: ").append(toIndentedString(questionType)).append("\n");
    sb.append("    quizId: ").append(toIndentedString(quizId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
