/*
 * canvas.instructure.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.instructure.canvas.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * AssignmentOverride
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-11-06T15:34:49.014533Z[Europe/London]")
public class AssignmentOverride {

  @JsonProperty("all_day")

  private Integer allDay = null;

  @JsonProperty("all_day_date")

  private OffsetDateTime allDayDate = null;

  @JsonProperty("assignment_id")

  private Integer assignmentId = null;

  @JsonProperty("course_section_id")

  private Integer courseSectionId = null;

  @JsonProperty("due_at")

  private OffsetDateTime dueAt = null;

  @JsonProperty("group_id")

  private Integer groupId = null;

  @JsonProperty("id")

  private Integer id = null;

  @JsonProperty("lock_at")

  private OffsetDateTime lockAt = null;

  @JsonProperty("student_ids")

  private List<Integer> studentIds = null;

  @JsonProperty("title")

  private String title = null;

  @JsonProperty("unlock_at")

  private OffsetDateTime unlockAt = null;
  public AssignmentOverride allDay(Integer allDay) {
    this.allDay = allDay;
    return this;
  }

  

  /**
  * the overridden all day flag (present if due_at is overridden)
  * @return allDay
  **/
  @Schema(description = "the overridden all day flag (present if due_at is overridden)")
  public Integer getAllDay() {
    return allDay;
  }
  public void setAllDay(Integer allDay) {
    this.allDay = allDay;
  }
  public AssignmentOverride allDayDate(OffsetDateTime allDayDate) {
    this.allDayDate = allDayDate;
    return this;
  }

  

  /**
  * the overridden all day date (present if due_at is overridden)
  * @return allDayDate
  **/
  @Schema(description = "the overridden all day date (present if due_at is overridden)")
  public OffsetDateTime getAllDayDate() {
    return allDayDate;
  }
  public void setAllDayDate(OffsetDateTime allDayDate) {
    this.allDayDate = allDayDate;
  }
  public AssignmentOverride assignmentId(Integer assignmentId) {
    this.assignmentId = assignmentId;
    return this;
  }

  

  /**
  * the ID of the assignment the override applies to
  * @return assignmentId
  **/
  @Schema(example = "123", description = "the ID of the assignment the override applies to")
  public Integer getAssignmentId() {
    return assignmentId;
  }
  public void setAssignmentId(Integer assignmentId) {
    this.assignmentId = assignmentId;
  }
  public AssignmentOverride courseSectionId(Integer courseSectionId) {
    this.courseSectionId = courseSectionId;
    return this;
  }

  

  /**
  * the ID of the overrides&#x27;s target section (present if the override targets a section)
  * @return courseSectionId
  **/
  @Schema(example = "1", description = "the ID of the overrides's target section (present if the override targets a section)")
  public Integer getCourseSectionId() {
    return courseSectionId;
  }
  public void setCourseSectionId(Integer courseSectionId) {
    this.courseSectionId = courseSectionId;
  }
  public AssignmentOverride dueAt(OffsetDateTime dueAt) {
    this.dueAt = dueAt;
    return this;
  }

  

  /**
  * the overridden due at (present if due_at is overridden)
  * @return dueAt
  **/
  @Schema(description = "the overridden due at (present if due_at is overridden)")
  public OffsetDateTime getDueAt() {
    return dueAt;
  }
  public void setDueAt(OffsetDateTime dueAt) {
    this.dueAt = dueAt;
  }
  public AssignmentOverride groupId(Integer groupId) {
    this.groupId = groupId;
    return this;
  }

  

  /**
  * the ID of the override&#x27;s target group (present if the override targets a group and the assignment is a group assignment)
  * @return groupId
  **/
  @Schema(example = "2", description = "the ID of the override's target group (present if the override targets a group and the assignment is a group assignment)")
  public Integer getGroupId() {
    return groupId;
  }
  public void setGroupId(Integer groupId) {
    this.groupId = groupId;
  }
  public AssignmentOverride id(Integer id) {
    this.id = id;
    return this;
  }

  

  /**
  * the ID of the assignment override
  * @return id
  **/
  @Schema(example = "4", description = "the ID of the assignment override")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }
  public AssignmentOverride lockAt(OffsetDateTime lockAt) {
    this.lockAt = lockAt;
    return this;
  }

  

  /**
  * the overridden lock at, if any (present if lock_at is overridden)
  * @return lockAt
  **/
  @Schema(description = "the overridden lock at, if any (present if lock_at is overridden)")
  public OffsetDateTime getLockAt() {
    return lockAt;
  }
  public void setLockAt(OffsetDateTime lockAt) {
    this.lockAt = lockAt;
  }
  public AssignmentOverride studentIds(List<Integer> studentIds) {
    this.studentIds = studentIds;
    return this;
  }

  public AssignmentOverride addStudentIdsItem(Integer studentIdsItem) {
    if (this.studentIds == null) {
      this.studentIds = new ArrayList<Integer>();
    }
    this.studentIds.add(studentIdsItem);
    return this;
  }

  /**
  * the IDs of the override&#x27;s target students (present if the override targets an ad-hoc set of students)
  * @return studentIds
  **/
  @Schema(example = "[1, 2, 3]", description = "the IDs of the override's target students (present if the override targets an ad-hoc set of students)")
  public List<Integer> getStudentIds() {
    return studentIds;
  }
  public void setStudentIds(List<Integer> studentIds) {
    this.studentIds = studentIds;
  }
  public AssignmentOverride title(String title) {
    this.title = title;
    return this;
  }

  

  /**
  * the title of the override
  * @return title
  **/
  @Schema(example = "an assignment override", description = "the title of the override")
  public String getTitle() {
    return title;
  }
  public void setTitle(String title) {
    this.title = title;
  }
  public AssignmentOverride unlockAt(OffsetDateTime unlockAt) {
    this.unlockAt = unlockAt;
    return this;
  }

  

  /**
  * the overridden unlock at (present if unlock_at is overridden)
  * @return unlockAt
  **/
  @Schema(description = "the overridden unlock at (present if unlock_at is overridden)")
  public OffsetDateTime getUnlockAt() {
    return unlockAt;
  }
  public void setUnlockAt(OffsetDateTime unlockAt) {
    this.unlockAt = unlockAt;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssignmentOverride assignmentOverride = (AssignmentOverride) o;
    return Objects.equals(this.allDay, assignmentOverride.allDay) &&
        Objects.equals(this.allDayDate, assignmentOverride.allDayDate) &&
        Objects.equals(this.assignmentId, assignmentOverride.assignmentId) &&
        Objects.equals(this.courseSectionId, assignmentOverride.courseSectionId) &&
        Objects.equals(this.dueAt, assignmentOverride.dueAt) &&
        Objects.equals(this.groupId, assignmentOverride.groupId) &&
        Objects.equals(this.id, assignmentOverride.id) &&
        Objects.equals(this.lockAt, assignmentOverride.lockAt) &&
        Objects.equals(this.studentIds, assignmentOverride.studentIds) &&
        Objects.equals(this.title, assignmentOverride.title) &&
        Objects.equals(this.unlockAt, assignmentOverride.unlockAt);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(allDay, allDayDate, assignmentId, courseSectionId, dueAt, groupId, id, lockAt, studentIds, title, unlockAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssignmentOverride {\n");
    
    sb.append("    allDay: ").append(toIndentedString(allDay)).append("\n");
    sb.append("    allDayDate: ").append(toIndentedString(allDayDate)).append("\n");
    sb.append("    assignmentId: ").append(toIndentedString(assignmentId)).append("\n");
    sb.append("    courseSectionId: ").append(toIndentedString(courseSectionId)).append("\n");
    sb.append("    dueAt: ").append(toIndentedString(dueAt)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lockAt: ").append(toIndentedString(lockAt)).append("\n");
    sb.append("    studentIds: ").append(toIndentedString(studentIds)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    unlockAt: ").append(toIndentedString(unlockAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
