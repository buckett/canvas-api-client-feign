/*
 * canvas.instructure.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.instructure.canvas.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * A collection of information around a specific notification of a problem
 */
@Schema(description = "A collection of information around a specific notification of a problem")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-11-06T15:34:49.014533Z[Europe/London]")
public class ErrorReport {

  @JsonProperty("comments")

  private String comments = null;

  @JsonProperty("context_asset_string")

  private String contextAssetString = null;

  @JsonProperty("email")

  private String email = null;

  @JsonProperty("subject")

  private String subject = null;

  @JsonProperty("url")

  private String url = null;

  @JsonProperty("user_perceived_severity")

  private String userPerceivedSeverity = null;

  @JsonProperty("user_roles")

  private String userRoles = null;
  public ErrorReport comments(String comments) {
    this.comments = comments;
    return this;
  }

  

  /**
  * long form documentation of what was witnessed
  * @return comments
  **/
  @Schema(example = "When I went to upload a .mov file to my files page, I got an error.  Retrying didn't help, other file types seem ok", description = "long form documentation of what was witnessed")
  public String getComments() {
    return comments;
  }
  public void setComments(String comments) {
    this.comments = comments;
  }
  public ErrorReport contextAssetString(String contextAssetString) {
    this.contextAssetString = contextAssetString;
    return this;
  }

  

  /**
  * string describing the asset being interacted with at the time of error.  Formatted &#x27;[type]_[id]&#x27;
  * @return contextAssetString
  **/
  @Schema(example = "user_1", description = "string describing the asset being interacted with at the time of error.  Formatted '[type]_[id]'")
  public String getContextAssetString() {
    return contextAssetString;
  }
  public void setContextAssetString(String contextAssetString) {
    this.contextAssetString = contextAssetString;
  }
  public ErrorReport email(String email) {
    this.email = email;
    return this;
  }

  

  /**
  * the email address of the reporting user
  * @return email
  **/
  @Schema(example = "name@example.com", description = "the email address of the reporting user")
  public String getEmail() {
    return email;
  }
  public void setEmail(String email) {
    this.email = email;
  }
  public ErrorReport subject(String subject) {
    this.subject = subject;
    return this;
  }

  

  /**
  * The users problem summary, like an email subject line
  * @return subject
  **/
  @Schema(example = "File upload breaking", description = "The users problem summary, like an email subject line")
  public String getSubject() {
    return subject;
  }
  public void setSubject(String subject) {
    this.subject = subject;
  }
  public ErrorReport url(String url) {
    this.url = url;
    return this;
  }

  

  /**
  * URL of the page on which the error was reported
  * @return url
  **/
  @Schema(example = "https://canvas.instructure.com/courses/1", description = "URL of the page on which the error was reported")
  public String getUrl() {
    return url;
  }
  public void setUrl(String url) {
    this.url = url;
  }
  public ErrorReport userPerceivedSeverity(String userPerceivedSeverity) {
    this.userPerceivedSeverity = userPerceivedSeverity;
    return this;
  }

  

  /**
  * categorization of how bad the user thinks the problem is.  Should be one of [just_a_comment, not_urgent, workaround_possible, blocks_what_i_need_to_do, extreme_critical_emergency].
  * @return userPerceivedSeverity
  **/
  @Schema(example = "just_a_comment", description = "categorization of how bad the user thinks the problem is.  Should be one of [just_a_comment, not_urgent, workaround_possible, blocks_what_i_need_to_do, extreme_critical_emergency].")
  public String getUserPerceivedSeverity() {
    return userPerceivedSeverity;
  }
  public void setUserPerceivedSeverity(String userPerceivedSeverity) {
    this.userPerceivedSeverity = userPerceivedSeverity;
  }
  public ErrorReport userRoles(String userRoles) {
    this.userRoles = userRoles;
    return this;
  }

  

  /**
  * comma seperated list of roles the reporting user holds.  Can be one [student], or many [teacher,admin]
  * @return userRoles
  **/
  @Schema(example = "user,teacher,admin", description = "comma seperated list of roles the reporting user holds.  Can be one [student], or many [teacher,admin]")
  public String getUserRoles() {
    return userRoles;
  }
  public void setUserRoles(String userRoles) {
    this.userRoles = userRoles;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ErrorReport errorReport = (ErrorReport) o;
    return Objects.equals(this.comments, errorReport.comments) &&
        Objects.equals(this.contextAssetString, errorReport.contextAssetString) &&
        Objects.equals(this.email, errorReport.email) &&
        Objects.equals(this.subject, errorReport.subject) &&
        Objects.equals(this.url, errorReport.url) &&
        Objects.equals(this.userPerceivedSeverity, errorReport.userPerceivedSeverity) &&
        Objects.equals(this.userRoles, errorReport.userRoles);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(comments, contextAssetString, email, subject, url, userPerceivedSeverity, userRoles);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ErrorReport {\n");
    
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    contextAssetString: ").append(toIndentedString(contextAssetString)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    userPerceivedSeverity: ").append(toIndentedString(userPerceivedSeverity)).append("\n");
    sb.append("    userRoles: ").append(toIndentedString(userRoles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
