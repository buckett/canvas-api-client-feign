/*
 * canvas.instructure.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.instructure.canvas.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.instructure.canvas.model.Grade;
import com.instructure.canvas.model.User;
import io.swagger.v3.oas.annotations.media.Schema;
import java.math.BigDecimal;
import org.threeten.bp.OffsetDateTime;

/**
 * Enrollment
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-11-06T15:34:49.014533Z[Europe/London]")
public class Enrollment {

  @JsonProperty("associated_user_id")

  private Integer associatedUserId = null;

  @JsonProperty("computed_current_grade")

  private String computedCurrentGrade = null;

  @JsonProperty("computed_current_score")

  private BigDecimal computedCurrentScore = null;

  @JsonProperty("computed_final_grade")

  private String computedFinalGrade = null;

  @JsonProperty("computed_final_score")

  private BigDecimal computedFinalScore = null;

  @JsonProperty("course_id")

  private Integer courseId = null;

  @JsonProperty("course_integration_id")

  private String courseIntegrationId = null;

  @JsonProperty("course_section_id")

  private Integer courseSectionId = null;

  @JsonProperty("created_at")

  private OffsetDateTime createdAt = null;

  @JsonProperty("current_grading_period_id")

  private Integer currentGradingPeriodId = null;

  @JsonProperty("current_grading_period_title")

  private String currentGradingPeriodTitle = null;

  @JsonProperty("current_period_computed_current_grade")

  private String currentPeriodComputedCurrentGrade = null;

  @JsonProperty("current_period_computed_current_score")

  private BigDecimal currentPeriodComputedCurrentScore = null;

  @JsonProperty("current_period_computed_final_grade")

  private String currentPeriodComputedFinalGrade = null;

  @JsonProperty("current_period_computed_final_score")

  private BigDecimal currentPeriodComputedFinalScore = null;

  @JsonProperty("current_period_unposted_current_grade")

  private String currentPeriodUnpostedCurrentGrade = null;

  @JsonProperty("current_period_unposted_current_score")

  private BigDecimal currentPeriodUnpostedCurrentScore = null;

  @JsonProperty("current_period_unposted_final_grade")

  private String currentPeriodUnpostedFinalGrade = null;

  @JsonProperty("current_period_unposted_final_score")

  private BigDecimal currentPeriodUnpostedFinalScore = null;

  @JsonProperty("end_at")

  private OffsetDateTime endAt = null;

  @JsonProperty("enrollment_state")

  private String enrollmentState = null;

  @JsonProperty("grades")

  private Grade grades = null;

  @JsonProperty("has_grading_periods")

  private Boolean hasGradingPeriods = null;

  @JsonProperty("html_url")

  private String htmlUrl = null;

  @JsonProperty("id")

  private Integer id = null;

  @JsonProperty("last_activity_at")

  private OffsetDateTime lastActivityAt = null;

  @JsonProperty("last_attended_at")

  private OffsetDateTime lastAttendedAt = null;

  @JsonProperty("limit_privileges_to_course_section")

  private Boolean limitPrivilegesToCourseSection = null;

  @JsonProperty("role")

  private String role = null;

  @JsonProperty("role_id")

  private Integer roleId = null;

  @JsonProperty("root_account_id")

  private Integer rootAccountId = null;

  @JsonProperty("section_integration_id")

  private String sectionIntegrationId = null;

  @JsonProperty("sis_account_id")

  private String sisAccountId = null;

  @JsonProperty("sis_course_id")

  private String sisCourseId = null;

  @JsonProperty("sis_import_id")

  private Integer sisImportId = null;

  @JsonProperty("sis_section_id")

  private String sisSectionId = null;

  @JsonProperty("sis_user_id")

  private String sisUserId = null;

  @JsonProperty("start_at")

  private OffsetDateTime startAt = null;

  @JsonProperty("total_activity_time")

  private Integer totalActivityTime = null;

  @JsonProperty("totals_for_all_grading_periods_option")

  private Boolean totalsForAllGradingPeriodsOption = null;

  @JsonProperty("type")

  private String type = null;

  @JsonProperty("unposted_current_grade")

  private String unpostedCurrentGrade = null;

  @JsonProperty("unposted_current_score")

  private String unpostedCurrentScore = null;

  @JsonProperty("unposted_final_grade")

  private String unpostedFinalGrade = null;

  @JsonProperty("unposted_final_score")

  private String unpostedFinalScore = null;

  @JsonProperty("updated_at")

  private OffsetDateTime updatedAt = null;

  @JsonProperty("user")

  private User user = null;

  @JsonProperty("user_id")

  private Integer userId = null;
  public Enrollment associatedUserId(Integer associatedUserId) {
    this.associatedUserId = associatedUserId;
    return this;
  }

  

  /**
  * The unique id of the associated user. Will be null unless type is ObserverEnrollment.
  * @return associatedUserId
  **/
  @Schema(description = "The unique id of the associated user. Will be null unless type is ObserverEnrollment.")
  public Integer getAssociatedUserId() {
    return associatedUserId;
  }
  public void setAssociatedUserId(Integer associatedUserId) {
    this.associatedUserId = associatedUserId;
  }
  public Enrollment computedCurrentGrade(String computedCurrentGrade) {
    this.computedCurrentGrade = computedCurrentGrade;
    return this;
  }

  

  /**
  * optional: The letter grade equivalent of computed_current_score, if available. (applies only to student enrollments, and only available in course endpoints)
  * @return computedCurrentGrade
  **/
  @Schema(example = "A-", description = "optional: The letter grade equivalent of computed_current_score, if available. (applies only to student enrollments, and only available in course endpoints)")
  public String getComputedCurrentGrade() {
    return computedCurrentGrade;
  }
  public void setComputedCurrentGrade(String computedCurrentGrade) {
    this.computedCurrentGrade = computedCurrentGrade;
  }
  public Enrollment computedCurrentScore(BigDecimal computedCurrentScore) {
    this.computedCurrentScore = computedCurrentScore;
    return this;
  }

  

  /**
  * optional: The student&#x27;s score in the course, ignoring ungraded assignments. (applies only to student enrollments, and only available in course endpoints)
  * @return computedCurrentScore
  **/
  @Schema(example = "90.25", description = "optional: The student's score in the course, ignoring ungraded assignments. (applies only to student enrollments, and only available in course endpoints)")
  public BigDecimal getComputedCurrentScore() {
    return computedCurrentScore;
  }
  public void setComputedCurrentScore(BigDecimal computedCurrentScore) {
    this.computedCurrentScore = computedCurrentScore;
  }
  public Enrollment computedFinalGrade(String computedFinalGrade) {
    this.computedFinalGrade = computedFinalGrade;
    return this;
  }

  

  /**
  * optional: The letter grade equivalent of computed_final_score, if available. (applies only to student enrollments, and only available in course endpoints)
  * @return computedFinalGrade
  **/
  @Schema(example = "B-", description = "optional: The letter grade equivalent of computed_final_score, if available. (applies only to student enrollments, and only available in course endpoints)")
  public String getComputedFinalGrade() {
    return computedFinalGrade;
  }
  public void setComputedFinalGrade(String computedFinalGrade) {
    this.computedFinalGrade = computedFinalGrade;
  }
  public Enrollment computedFinalScore(BigDecimal computedFinalScore) {
    this.computedFinalScore = computedFinalScore;
    return this;
  }

  

  /**
  * optional: The student&#x27;s score in the course including ungraded assignments with a score of 0. (applies only to student enrollments, and only available in course endpoints)
  * @return computedFinalScore
  **/
  @Schema(example = "80.67", description = "optional: The student's score in the course including ungraded assignments with a score of 0. (applies only to student enrollments, and only available in course endpoints)")
  public BigDecimal getComputedFinalScore() {
    return computedFinalScore;
  }
  public void setComputedFinalScore(BigDecimal computedFinalScore) {
    this.computedFinalScore = computedFinalScore;
  }
  public Enrollment courseId(Integer courseId) {
    this.courseId = courseId;
    return this;
  }

  

  /**
  * The unique id of the course.
  * @return courseId
  **/
  @Schema(example = "1", description = "The unique id of the course.")
  public Integer getCourseId() {
    return courseId;
  }
  public void setCourseId(Integer courseId) {
    this.courseId = courseId;
  }
  public Enrollment courseIntegrationId(String courseIntegrationId) {
    this.courseIntegrationId = courseIntegrationId;
    return this;
  }

  

  /**
  * The Course Integration ID in which the enrollment is associated. This field is only included if the user has permission to view SIS information.
  * @return courseIntegrationId
  **/
  @Schema(example = "SHEL93921", description = "The Course Integration ID in which the enrollment is associated. This field is only included if the user has permission to view SIS information.")
  public String getCourseIntegrationId() {
    return courseIntegrationId;
  }
  public void setCourseIntegrationId(String courseIntegrationId) {
    this.courseIntegrationId = courseIntegrationId;
  }
  public Enrollment courseSectionId(Integer courseSectionId) {
    this.courseSectionId = courseSectionId;
    return this;
  }

  

  /**
  * The unique id of the user&#x27;s section.
  * @return courseSectionId
  **/
  @Schema(example = "1", description = "The unique id of the user's section.")
  public Integer getCourseSectionId() {
    return courseSectionId;
  }
  public void setCourseSectionId(Integer courseSectionId) {
    this.courseSectionId = courseSectionId;
  }
  public Enrollment createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  

  /**
  * The created time of the enrollment, in ISO8601 format.
  * @return createdAt
  **/
  @Schema(description = "The created time of the enrollment, in ISO8601 format.")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }
  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }
  public Enrollment currentGradingPeriodId(Integer currentGradingPeriodId) {
    this.currentGradingPeriodId = currentGradingPeriodId;
    return this;
  }

  

  /**
  * optional: The id of the currently active grading period, if one exists. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)
  * @return currentGradingPeriodId
  **/
  @Schema(example = "5", description = "optional: The id of the currently active grading period, if one exists. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)")
  public Integer getCurrentGradingPeriodId() {
    return currentGradingPeriodId;
  }
  public void setCurrentGradingPeriodId(Integer currentGradingPeriodId) {
    this.currentGradingPeriodId = currentGradingPeriodId;
  }
  public Enrollment currentGradingPeriodTitle(String currentGradingPeriodTitle) {
    this.currentGradingPeriodTitle = currentGradingPeriodTitle;
    return this;
  }

  

  /**
  * optional: The name of the currently active grading period, if one exists. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)
  * @return currentGradingPeriodTitle
  **/
  @Schema(example = "Fall Grading Period", description = "optional: The name of the currently active grading period, if one exists. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)")
  public String getCurrentGradingPeriodTitle() {
    return currentGradingPeriodTitle;
  }
  public void setCurrentGradingPeriodTitle(String currentGradingPeriodTitle) {
    this.currentGradingPeriodTitle = currentGradingPeriodTitle;
  }
  public Enrollment currentPeriodComputedCurrentGrade(String currentPeriodComputedCurrentGrade) {
    this.currentPeriodComputedCurrentGrade = currentPeriodComputedCurrentGrade;
    return this;
  }

  

  /**
  * optional: The letter grade equivalent of current_period_computed_current_score, if available. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)
  * @return currentPeriodComputedCurrentGrade
  **/
  @Schema(example = "A", description = "optional: The letter grade equivalent of current_period_computed_current_score, if available. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)")
  public String getCurrentPeriodComputedCurrentGrade() {
    return currentPeriodComputedCurrentGrade;
  }
  public void setCurrentPeriodComputedCurrentGrade(String currentPeriodComputedCurrentGrade) {
    this.currentPeriodComputedCurrentGrade = currentPeriodComputedCurrentGrade;
  }
  public Enrollment currentPeriodComputedCurrentScore(BigDecimal currentPeriodComputedCurrentScore) {
    this.currentPeriodComputedCurrentScore = currentPeriodComputedCurrentScore;
    return this;
  }

  

  /**
  * optional: The student&#x27;s score in the course for the current grading period, ignoring ungraded assignments. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)
  * @return currentPeriodComputedCurrentScore
  **/
  @Schema(example = "95.8", description = "optional: The student's score in the course for the current grading period, ignoring ungraded assignments. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)")
  public BigDecimal getCurrentPeriodComputedCurrentScore() {
    return currentPeriodComputedCurrentScore;
  }
  public void setCurrentPeriodComputedCurrentScore(BigDecimal currentPeriodComputedCurrentScore) {
    this.currentPeriodComputedCurrentScore = currentPeriodComputedCurrentScore;
  }
  public Enrollment currentPeriodComputedFinalGrade(String currentPeriodComputedFinalGrade) {
    this.currentPeriodComputedFinalGrade = currentPeriodComputedFinalGrade;
    return this;
  }

  

  /**
  * optional: The letter grade equivalent of current_period_computed_final_score, if available. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)
  * @return currentPeriodComputedFinalGrade
  **/
  @Schema(example = "B", description = "optional: The letter grade equivalent of current_period_computed_final_score, if available. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)")
  public String getCurrentPeriodComputedFinalGrade() {
    return currentPeriodComputedFinalGrade;
  }
  public void setCurrentPeriodComputedFinalGrade(String currentPeriodComputedFinalGrade) {
    this.currentPeriodComputedFinalGrade = currentPeriodComputedFinalGrade;
  }
  public Enrollment currentPeriodComputedFinalScore(BigDecimal currentPeriodComputedFinalScore) {
    this.currentPeriodComputedFinalScore = currentPeriodComputedFinalScore;
    return this;
  }

  

  /**
  * optional: The student&#x27;s score in the course for the current grading period, including ungraded assignments with a score of 0. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)
  * @return currentPeriodComputedFinalScore
  **/
  @Schema(example = "85.25", description = "optional: The student's score in the course for the current grading period, including ungraded assignments with a score of 0. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)")
  public BigDecimal getCurrentPeriodComputedFinalScore() {
    return currentPeriodComputedFinalScore;
  }
  public void setCurrentPeriodComputedFinalScore(BigDecimal currentPeriodComputedFinalScore) {
    this.currentPeriodComputedFinalScore = currentPeriodComputedFinalScore;
  }
  public Enrollment currentPeriodUnpostedCurrentGrade(String currentPeriodUnpostedCurrentGrade) {
    this.currentPeriodUnpostedCurrentGrade = currentPeriodUnpostedCurrentGrade;
    return this;
  }

  

  /**
  * optional: The letter grade equivalent of current_period_unposted_current_score, if available. Only included if user has permission to view this grade, typically teachers, TAs, and admins. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)
  * @return currentPeriodUnpostedCurrentGrade
  **/
  @Schema(example = "A", description = "optional: The letter grade equivalent of current_period_unposted_current_score, if available. Only included if user has permission to view this grade, typically teachers, TAs, and admins. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)")
  public String getCurrentPeriodUnpostedCurrentGrade() {
    return currentPeriodUnpostedCurrentGrade;
  }
  public void setCurrentPeriodUnpostedCurrentGrade(String currentPeriodUnpostedCurrentGrade) {
    this.currentPeriodUnpostedCurrentGrade = currentPeriodUnpostedCurrentGrade;
  }
  public Enrollment currentPeriodUnpostedCurrentScore(BigDecimal currentPeriodUnpostedCurrentScore) {
    this.currentPeriodUnpostedCurrentScore = currentPeriodUnpostedCurrentScore;
    return this;
  }

  

  /**
  * optional: The student&#x27;s score in the course for the current grading period, including muted/unposted assignments. Only included if user has permission to view this score, typically teachers, TAs, and admins. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)
  * @return currentPeriodUnpostedCurrentScore
  **/
  @Schema(example = "95.8", description = "optional: The student's score in the course for the current grading period, including muted/unposted assignments. Only included if user has permission to view this score, typically teachers, TAs, and admins. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)")
  public BigDecimal getCurrentPeriodUnpostedCurrentScore() {
    return currentPeriodUnpostedCurrentScore;
  }
  public void setCurrentPeriodUnpostedCurrentScore(BigDecimal currentPeriodUnpostedCurrentScore) {
    this.currentPeriodUnpostedCurrentScore = currentPeriodUnpostedCurrentScore;
  }
  public Enrollment currentPeriodUnpostedFinalGrade(String currentPeriodUnpostedFinalGrade) {
    this.currentPeriodUnpostedFinalGrade = currentPeriodUnpostedFinalGrade;
    return this;
  }

  

  /**
  * optional: The letter grade equivalent of current_period_unposted_final_score, if available. Only included if user has permission to view this grade, typically teachers, TAs, and admins. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)
  * @return currentPeriodUnpostedFinalGrade
  **/
  @Schema(example = "B", description = "optional: The letter grade equivalent of current_period_unposted_final_score, if available. Only included if user has permission to view this grade, typically teachers, TAs, and admins. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)")
  public String getCurrentPeriodUnpostedFinalGrade() {
    return currentPeriodUnpostedFinalGrade;
  }
  public void setCurrentPeriodUnpostedFinalGrade(String currentPeriodUnpostedFinalGrade) {
    this.currentPeriodUnpostedFinalGrade = currentPeriodUnpostedFinalGrade;
  }
  public Enrollment currentPeriodUnpostedFinalScore(BigDecimal currentPeriodUnpostedFinalScore) {
    this.currentPeriodUnpostedFinalScore = currentPeriodUnpostedFinalScore;
    return this;
  }

  

  /**
  * optional: The student&#x27;s score in the course for the current grading period, including muted/unposted assignments and including ungraded assignments with a score of 0. Only included if user has permission to view this score, typically teachers, TAs, and admins. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)
  * @return currentPeriodUnpostedFinalScore
  **/
  @Schema(example = "85.25", description = "optional: The student's score in the course for the current grading period, including muted/unposted assignments and including ungraded assignments with a score of 0. Only included if user has permission to view this score, typically teachers, TAs, and admins. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)")
  public BigDecimal getCurrentPeriodUnpostedFinalScore() {
    return currentPeriodUnpostedFinalScore;
  }
  public void setCurrentPeriodUnpostedFinalScore(BigDecimal currentPeriodUnpostedFinalScore) {
    this.currentPeriodUnpostedFinalScore = currentPeriodUnpostedFinalScore;
  }
  public Enrollment endAt(OffsetDateTime endAt) {
    this.endAt = endAt;
    return this;
  }

  

  /**
  * The end time of the enrollment, in ISO8601 format.
  * @return endAt
  **/
  @Schema(description = "The end time of the enrollment, in ISO8601 format.")
  public OffsetDateTime getEndAt() {
    return endAt;
  }
  public void setEndAt(OffsetDateTime endAt) {
    this.endAt = endAt;
  }
  public Enrollment enrollmentState(String enrollmentState) {
    this.enrollmentState = enrollmentState;
    return this;
  }

  

  /**
  * The state of the user&#x27;s enrollment in the course.
  * @return enrollmentState
  **/
  @Schema(example = "active", description = "The state of the user's enrollment in the course.")
  public String getEnrollmentState() {
    return enrollmentState;
  }
  public void setEnrollmentState(String enrollmentState) {
    this.enrollmentState = enrollmentState;
  }
  public Enrollment grades(Grade grades) {
    this.grades = grades;
    return this;
  }

  

  /**
  * Get grades
  * @return grades
  **/
  @Schema(description = "")
  public Grade getGrades() {
    return grades;
  }
  public void setGrades(Grade grades) {
    this.grades = grades;
  }
  public Enrollment hasGradingPeriods(Boolean hasGradingPeriods) {
    this.hasGradingPeriods = hasGradingPeriods;
    return this;
  }

  

  /**
  * optional: Indicates whether the course the enrollment belongs to has grading periods set up. (applies only to student enrollments, and only available in course endpoints)
  * @return hasGradingPeriods
  **/
  @Schema(example = "true", description = "optional: Indicates whether the course the enrollment belongs to has grading periods set up. (applies only to student enrollments, and only available in course endpoints)")
  public Boolean isHasGradingPeriods() {
    return hasGradingPeriods;
  }
  public void setHasGradingPeriods(Boolean hasGradingPeriods) {
    this.hasGradingPeriods = hasGradingPeriods;
  }
  public Enrollment htmlUrl(String htmlUrl) {
    this.htmlUrl = htmlUrl;
    return this;
  }

  

  /**
  * The URL to the Canvas web UI page for this course enrollment.
  * @return htmlUrl
  **/
  @Schema(example = "https://...", description = "The URL to the Canvas web UI page for this course enrollment.")
  public String getHtmlUrl() {
    return htmlUrl;
  }
  public void setHtmlUrl(String htmlUrl) {
    this.htmlUrl = htmlUrl;
  }
  public Enrollment id(Integer id) {
    this.id = id;
    return this;
  }

  

  /**
  * The ID of the enrollment.
  * @return id
  **/
  @Schema(example = "1", description = "The ID of the enrollment.")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }
  public Enrollment lastActivityAt(OffsetDateTime lastActivityAt) {
    this.lastActivityAt = lastActivityAt;
    return this;
  }

  

  /**
  * The last activity time of the user for the enrollment, in ISO8601 format.
  * @return lastActivityAt
  **/
  @Schema(description = "The last activity time of the user for the enrollment, in ISO8601 format.")
  public OffsetDateTime getLastActivityAt() {
    return lastActivityAt;
  }
  public void setLastActivityAt(OffsetDateTime lastActivityAt) {
    this.lastActivityAt = lastActivityAt;
  }
  public Enrollment lastAttendedAt(OffsetDateTime lastAttendedAt) {
    this.lastAttendedAt = lastAttendedAt;
    return this;
  }

  

  /**
  * The last attended date of the user for the enrollment in a course, in ISO8601 format.
  * @return lastAttendedAt
  **/
  @Schema(description = "The last attended date of the user for the enrollment in a course, in ISO8601 format.")
  public OffsetDateTime getLastAttendedAt() {
    return lastAttendedAt;
  }
  public void setLastAttendedAt(OffsetDateTime lastAttendedAt) {
    this.lastAttendedAt = lastAttendedAt;
  }
  public Enrollment limitPrivilegesToCourseSection(Boolean limitPrivilegesToCourseSection) {
    this.limitPrivilegesToCourseSection = limitPrivilegesToCourseSection;
    return this;
  }

  

  /**
  * User can only access his or her own course section.
  * @return limitPrivilegesToCourseSection
  **/
  @Schema(example = "true", description = "User can only access his or her own course section.")
  public Boolean isLimitPrivilegesToCourseSection() {
    return limitPrivilegesToCourseSection;
  }
  public void setLimitPrivilegesToCourseSection(Boolean limitPrivilegesToCourseSection) {
    this.limitPrivilegesToCourseSection = limitPrivilegesToCourseSection;
  }
  public Enrollment role(String role) {
    this.role = role;
    return this;
  }

  

  /**
  * The enrollment role, for course-level permissions. This field will match &#x60;type&#x60; if the enrollment role has not been customized.
  * @return role
  **/
  @Schema(example = "StudentEnrollment", description = "The enrollment role, for course-level permissions. This field will match `type` if the enrollment role has not been customized.")
  public String getRole() {
    return role;
  }
  public void setRole(String role) {
    this.role = role;
  }
  public Enrollment roleId(Integer roleId) {
    this.roleId = roleId;
    return this;
  }

  

  /**
  * The id of the enrollment role.
  * @return roleId
  **/
  @Schema(example = "1", description = "The id of the enrollment role.")
  public Integer getRoleId() {
    return roleId;
  }
  public void setRoleId(Integer roleId) {
    this.roleId = roleId;
  }
  public Enrollment rootAccountId(Integer rootAccountId) {
    this.rootAccountId = rootAccountId;
    return this;
  }

  

  /**
  * The unique id of the user&#x27;s account.
  * @return rootAccountId
  **/
  @Schema(example = "1", description = "The unique id of the user's account.")
  public Integer getRootAccountId() {
    return rootAccountId;
  }
  public void setRootAccountId(Integer rootAccountId) {
    this.rootAccountId = rootAccountId;
  }
  public Enrollment sectionIntegrationId(String sectionIntegrationId) {
    this.sectionIntegrationId = sectionIntegrationId;
    return this;
  }

  

  /**
  * The Section Integration ID in which the enrollment is associated. This field is only included if the user has permission to view SIS information.
  * @return sectionIntegrationId
  **/
  @Schema(example = "SHEL93921", description = "The Section Integration ID in which the enrollment is associated. This field is only included if the user has permission to view SIS information.")
  public String getSectionIntegrationId() {
    return sectionIntegrationId;
  }
  public void setSectionIntegrationId(String sectionIntegrationId) {
    this.sectionIntegrationId = sectionIntegrationId;
  }
  public Enrollment sisAccountId(String sisAccountId) {
    this.sisAccountId = sisAccountId;
    return this;
  }

  

  /**
  * The SIS Account ID in which the enrollment is associated. Only displayed if present. This field is only included if the user has permission to view SIS information.
  * @return sisAccountId
  **/
  @Schema(example = "SHEL93921", description = "The SIS Account ID in which the enrollment is associated. Only displayed if present. This field is only included if the user has permission to view SIS information.")
  public String getSisAccountId() {
    return sisAccountId;
  }
  public void setSisAccountId(String sisAccountId) {
    this.sisAccountId = sisAccountId;
  }
  public Enrollment sisCourseId(String sisCourseId) {
    this.sisCourseId = sisCourseId;
    return this;
  }

  

  /**
  * The SIS Course ID in which the enrollment is associated. Only displayed if present. This field is only included if the user has permission to view SIS information.
  * @return sisCourseId
  **/
  @Schema(example = "SHEL93921", description = "The SIS Course ID in which the enrollment is associated. Only displayed if present. This field is only included if the user has permission to view SIS information.")
  public String getSisCourseId() {
    return sisCourseId;
  }
  public void setSisCourseId(String sisCourseId) {
    this.sisCourseId = sisCourseId;
  }
  public Enrollment sisImportId(Integer sisImportId) {
    this.sisImportId = sisImportId;
    return this;
  }

  

  /**
  * The unique identifier for the SIS import. This field is only included if the user has permission to manage SIS information.
  * @return sisImportId
  **/
  @Schema(example = "83", description = "The unique identifier for the SIS import. This field is only included if the user has permission to manage SIS information.")
  public Integer getSisImportId() {
    return sisImportId;
  }
  public void setSisImportId(Integer sisImportId) {
    this.sisImportId = sisImportId;
  }
  public Enrollment sisSectionId(String sisSectionId) {
    this.sisSectionId = sisSectionId;
    return this;
  }

  

  /**
  * The SIS Section ID in which the enrollment is associated. Only displayed if present. This field is only included if the user has permission to view SIS information.
  * @return sisSectionId
  **/
  @Schema(example = "SHEL93921", description = "The SIS Section ID in which the enrollment is associated. Only displayed if present. This field is only included if the user has permission to view SIS information.")
  public String getSisSectionId() {
    return sisSectionId;
  }
  public void setSisSectionId(String sisSectionId) {
    this.sisSectionId = sisSectionId;
  }
  public Enrollment sisUserId(String sisUserId) {
    this.sisUserId = sisUserId;
    return this;
  }

  

  /**
  * The SIS User ID in which the enrollment is associated. Only displayed if present. This field is only included if the user has permission to view SIS information.
  * @return sisUserId
  **/
  @Schema(example = "SHEL93921", description = "The SIS User ID in which the enrollment is associated. Only displayed if present. This field is only included if the user has permission to view SIS information.")
  public String getSisUserId() {
    return sisUserId;
  }
  public void setSisUserId(String sisUserId) {
    this.sisUserId = sisUserId;
  }
  public Enrollment startAt(OffsetDateTime startAt) {
    this.startAt = startAt;
    return this;
  }

  

  /**
  * The start time of the enrollment, in ISO8601 format.
  * @return startAt
  **/
  @Schema(description = "The start time of the enrollment, in ISO8601 format.")
  public OffsetDateTime getStartAt() {
    return startAt;
  }
  public void setStartAt(OffsetDateTime startAt) {
    this.startAt = startAt;
  }
  public Enrollment totalActivityTime(Integer totalActivityTime) {
    this.totalActivityTime = totalActivityTime;
    return this;
  }

  

  /**
  * The total activity time of the user for the enrollment, in seconds.
  * @return totalActivityTime
  **/
  @Schema(example = "260", description = "The total activity time of the user for the enrollment, in seconds.")
  public Integer getTotalActivityTime() {
    return totalActivityTime;
  }
  public void setTotalActivityTime(Integer totalActivityTime) {
    this.totalActivityTime = totalActivityTime;
  }
  public Enrollment totalsForAllGradingPeriodsOption(Boolean totalsForAllGradingPeriodsOption) {
    this.totalsForAllGradingPeriodsOption = totalsForAllGradingPeriodsOption;
    return this;
  }

  

  /**
  * optional: Indicates whether the course the enrollment belongs to has the Display Totals for &#x27;All Grading Periods&#x27; feature enabled. (applies only to student enrollments, and only available in course endpoints)
  * @return totalsForAllGradingPeriodsOption
  **/
  @Schema(example = "true", description = "optional: Indicates whether the course the enrollment belongs to has the Display Totals for 'All Grading Periods' feature enabled. (applies only to student enrollments, and only available in course endpoints)")
  public Boolean isTotalsForAllGradingPeriodsOption() {
    return totalsForAllGradingPeriodsOption;
  }
  public void setTotalsForAllGradingPeriodsOption(Boolean totalsForAllGradingPeriodsOption) {
    this.totalsForAllGradingPeriodsOption = totalsForAllGradingPeriodsOption;
  }
  public Enrollment type(String type) {
    this.type = type;
    return this;
  }

  

  /**
  * The enrollment type. One of &#x27;StudentEnrollment&#x27;, &#x27;TeacherEnrollment&#x27;, &#x27;TaEnrollment&#x27;, &#x27;DesignerEnrollment&#x27;, &#x27;ObserverEnrollment&#x27;.
  * @return type
  **/
  @Schema(example = "StudentEnrollment", description = "The enrollment type. One of 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'DesignerEnrollment', 'ObserverEnrollment'.")
  public String getType() {
    return type;
  }
  public void setType(String type) {
    this.type = type;
  }
  public Enrollment unpostedCurrentGrade(String unpostedCurrentGrade) {
    this.unpostedCurrentGrade = unpostedCurrentGrade;
    return this;
  }

  

  /**
  * The user&#x27;s current grade in the class including muted/unposted assignments. Only included if user has permissions to view this grade, typically teachers, TAs, and admins.
  * @return unpostedCurrentGrade
  **/
  @Schema(description = "The user's current grade in the class including muted/unposted assignments. Only included if user has permissions to view this grade, typically teachers, TAs, and admins.")
  public String getUnpostedCurrentGrade() {
    return unpostedCurrentGrade;
  }
  public void setUnpostedCurrentGrade(String unpostedCurrentGrade) {
    this.unpostedCurrentGrade = unpostedCurrentGrade;
  }
  public Enrollment unpostedCurrentScore(String unpostedCurrentScore) {
    this.unpostedCurrentScore = unpostedCurrentScore;
    return this;
  }

  

  /**
  * The user&#x27;s current score in the class including muted/unposted assignments. Only included if user has permissions to view this score, typically teachers, TAs, and admins..
  * @return unpostedCurrentScore
  **/
  @Schema(description = "The user's current score in the class including muted/unposted assignments. Only included if user has permissions to view this score, typically teachers, TAs, and admins..")
  public String getUnpostedCurrentScore() {
    return unpostedCurrentScore;
  }
  public void setUnpostedCurrentScore(String unpostedCurrentScore) {
    this.unpostedCurrentScore = unpostedCurrentScore;
  }
  public Enrollment unpostedFinalGrade(String unpostedFinalGrade) {
    this.unpostedFinalGrade = unpostedFinalGrade;
    return this;
  }

  

  /**
  * The user&#x27;s final grade for the class including muted/unposted assignments. Only included if user has permissions to view this grade, typically teachers, TAs, and admins..
  * @return unpostedFinalGrade
  **/
  @Schema(description = "The user's final grade for the class including muted/unposted assignments. Only included if user has permissions to view this grade, typically teachers, TAs, and admins..")
  public String getUnpostedFinalGrade() {
    return unpostedFinalGrade;
  }
  public void setUnpostedFinalGrade(String unpostedFinalGrade) {
    this.unpostedFinalGrade = unpostedFinalGrade;
  }
  public Enrollment unpostedFinalScore(String unpostedFinalScore) {
    this.unpostedFinalScore = unpostedFinalScore;
    return this;
  }

  

  /**
  * The user&#x27;s final score for the class including muted/unposted assignments. Only included if user has permissions to view this score, typically teachers, TAs, and admins..
  * @return unpostedFinalScore
  **/
  @Schema(description = "The user's final score for the class including muted/unposted assignments. Only included if user has permissions to view this score, typically teachers, TAs, and admins..")
  public String getUnpostedFinalScore() {
    return unpostedFinalScore;
  }
  public void setUnpostedFinalScore(String unpostedFinalScore) {
    this.unpostedFinalScore = unpostedFinalScore;
  }
  public Enrollment updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  

  /**
  * The updated time of the enrollment, in ISO8601 format.
  * @return updatedAt
  **/
  @Schema(description = "The updated time of the enrollment, in ISO8601 format.")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }
  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }
  public Enrollment user(User user) {
    this.user = user;
    return this;
  }

  

  /**
  * Get user
  * @return user
  **/
  @Schema(description = "")
  public User getUser() {
    return user;
  }
  public void setUser(User user) {
    this.user = user;
  }
  public Enrollment userId(Integer userId) {
    this.userId = userId;
    return this;
  }

  

  /**
  * The unique id of the user.
  * @return userId
  **/
  @Schema(example = "1", description = "The unique id of the user.")
  public Integer getUserId() {
    return userId;
  }
  public void setUserId(Integer userId) {
    this.userId = userId;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Enrollment enrollment = (Enrollment) o;
    return Objects.equals(this.associatedUserId, enrollment.associatedUserId) &&
        Objects.equals(this.computedCurrentGrade, enrollment.computedCurrentGrade) &&
        Objects.equals(this.computedCurrentScore, enrollment.computedCurrentScore) &&
        Objects.equals(this.computedFinalGrade, enrollment.computedFinalGrade) &&
        Objects.equals(this.computedFinalScore, enrollment.computedFinalScore) &&
        Objects.equals(this.courseId, enrollment.courseId) &&
        Objects.equals(this.courseIntegrationId, enrollment.courseIntegrationId) &&
        Objects.equals(this.courseSectionId, enrollment.courseSectionId) &&
        Objects.equals(this.createdAt, enrollment.createdAt) &&
        Objects.equals(this.currentGradingPeriodId, enrollment.currentGradingPeriodId) &&
        Objects.equals(this.currentGradingPeriodTitle, enrollment.currentGradingPeriodTitle) &&
        Objects.equals(this.currentPeriodComputedCurrentGrade, enrollment.currentPeriodComputedCurrentGrade) &&
        Objects.equals(this.currentPeriodComputedCurrentScore, enrollment.currentPeriodComputedCurrentScore) &&
        Objects.equals(this.currentPeriodComputedFinalGrade, enrollment.currentPeriodComputedFinalGrade) &&
        Objects.equals(this.currentPeriodComputedFinalScore, enrollment.currentPeriodComputedFinalScore) &&
        Objects.equals(this.currentPeriodUnpostedCurrentGrade, enrollment.currentPeriodUnpostedCurrentGrade) &&
        Objects.equals(this.currentPeriodUnpostedCurrentScore, enrollment.currentPeriodUnpostedCurrentScore) &&
        Objects.equals(this.currentPeriodUnpostedFinalGrade, enrollment.currentPeriodUnpostedFinalGrade) &&
        Objects.equals(this.currentPeriodUnpostedFinalScore, enrollment.currentPeriodUnpostedFinalScore) &&
        Objects.equals(this.endAt, enrollment.endAt) &&
        Objects.equals(this.enrollmentState, enrollment.enrollmentState) &&
        Objects.equals(this.grades, enrollment.grades) &&
        Objects.equals(this.hasGradingPeriods, enrollment.hasGradingPeriods) &&
        Objects.equals(this.htmlUrl, enrollment.htmlUrl) &&
        Objects.equals(this.id, enrollment.id) &&
        Objects.equals(this.lastActivityAt, enrollment.lastActivityAt) &&
        Objects.equals(this.lastAttendedAt, enrollment.lastAttendedAt) &&
        Objects.equals(this.limitPrivilegesToCourseSection, enrollment.limitPrivilegesToCourseSection) &&
        Objects.equals(this.role, enrollment.role) &&
        Objects.equals(this.roleId, enrollment.roleId) &&
        Objects.equals(this.rootAccountId, enrollment.rootAccountId) &&
        Objects.equals(this.sectionIntegrationId, enrollment.sectionIntegrationId) &&
        Objects.equals(this.sisAccountId, enrollment.sisAccountId) &&
        Objects.equals(this.sisCourseId, enrollment.sisCourseId) &&
        Objects.equals(this.sisImportId, enrollment.sisImportId) &&
        Objects.equals(this.sisSectionId, enrollment.sisSectionId) &&
        Objects.equals(this.sisUserId, enrollment.sisUserId) &&
        Objects.equals(this.startAt, enrollment.startAt) &&
        Objects.equals(this.totalActivityTime, enrollment.totalActivityTime) &&
        Objects.equals(this.totalsForAllGradingPeriodsOption, enrollment.totalsForAllGradingPeriodsOption) &&
        Objects.equals(this.type, enrollment.type) &&
        Objects.equals(this.unpostedCurrentGrade, enrollment.unpostedCurrentGrade) &&
        Objects.equals(this.unpostedCurrentScore, enrollment.unpostedCurrentScore) &&
        Objects.equals(this.unpostedFinalGrade, enrollment.unpostedFinalGrade) &&
        Objects.equals(this.unpostedFinalScore, enrollment.unpostedFinalScore) &&
        Objects.equals(this.updatedAt, enrollment.updatedAt) &&
        Objects.equals(this.user, enrollment.user) &&
        Objects.equals(this.userId, enrollment.userId);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(associatedUserId, computedCurrentGrade, computedCurrentScore, computedFinalGrade, computedFinalScore, courseId, courseIntegrationId, courseSectionId, createdAt, currentGradingPeriodId, currentGradingPeriodTitle, currentPeriodComputedCurrentGrade, currentPeriodComputedCurrentScore, currentPeriodComputedFinalGrade, currentPeriodComputedFinalScore, currentPeriodUnpostedCurrentGrade, currentPeriodUnpostedCurrentScore, currentPeriodUnpostedFinalGrade, currentPeriodUnpostedFinalScore, endAt, enrollmentState, grades, hasGradingPeriods, htmlUrl, id, lastActivityAt, lastAttendedAt, limitPrivilegesToCourseSection, role, roleId, rootAccountId, sectionIntegrationId, sisAccountId, sisCourseId, sisImportId, sisSectionId, sisUserId, startAt, totalActivityTime, totalsForAllGradingPeriodsOption, type, unpostedCurrentGrade, unpostedCurrentScore, unpostedFinalGrade, unpostedFinalScore, updatedAt, user, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Enrollment {\n");
    
    sb.append("    associatedUserId: ").append(toIndentedString(associatedUserId)).append("\n");
    sb.append("    computedCurrentGrade: ").append(toIndentedString(computedCurrentGrade)).append("\n");
    sb.append("    computedCurrentScore: ").append(toIndentedString(computedCurrentScore)).append("\n");
    sb.append("    computedFinalGrade: ").append(toIndentedString(computedFinalGrade)).append("\n");
    sb.append("    computedFinalScore: ").append(toIndentedString(computedFinalScore)).append("\n");
    sb.append("    courseId: ").append(toIndentedString(courseId)).append("\n");
    sb.append("    courseIntegrationId: ").append(toIndentedString(courseIntegrationId)).append("\n");
    sb.append("    courseSectionId: ").append(toIndentedString(courseSectionId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    currentGradingPeriodId: ").append(toIndentedString(currentGradingPeriodId)).append("\n");
    sb.append("    currentGradingPeriodTitle: ").append(toIndentedString(currentGradingPeriodTitle)).append("\n");
    sb.append("    currentPeriodComputedCurrentGrade: ").append(toIndentedString(currentPeriodComputedCurrentGrade)).append("\n");
    sb.append("    currentPeriodComputedCurrentScore: ").append(toIndentedString(currentPeriodComputedCurrentScore)).append("\n");
    sb.append("    currentPeriodComputedFinalGrade: ").append(toIndentedString(currentPeriodComputedFinalGrade)).append("\n");
    sb.append("    currentPeriodComputedFinalScore: ").append(toIndentedString(currentPeriodComputedFinalScore)).append("\n");
    sb.append("    currentPeriodUnpostedCurrentGrade: ").append(toIndentedString(currentPeriodUnpostedCurrentGrade)).append("\n");
    sb.append("    currentPeriodUnpostedCurrentScore: ").append(toIndentedString(currentPeriodUnpostedCurrentScore)).append("\n");
    sb.append("    currentPeriodUnpostedFinalGrade: ").append(toIndentedString(currentPeriodUnpostedFinalGrade)).append("\n");
    sb.append("    currentPeriodUnpostedFinalScore: ").append(toIndentedString(currentPeriodUnpostedFinalScore)).append("\n");
    sb.append("    endAt: ").append(toIndentedString(endAt)).append("\n");
    sb.append("    enrollmentState: ").append(toIndentedString(enrollmentState)).append("\n");
    sb.append("    grades: ").append(toIndentedString(grades)).append("\n");
    sb.append("    hasGradingPeriods: ").append(toIndentedString(hasGradingPeriods)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastActivityAt: ").append(toIndentedString(lastActivityAt)).append("\n");
    sb.append("    lastAttendedAt: ").append(toIndentedString(lastAttendedAt)).append("\n");
    sb.append("    limitPrivilegesToCourseSection: ").append(toIndentedString(limitPrivilegesToCourseSection)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    roleId: ").append(toIndentedString(roleId)).append("\n");
    sb.append("    rootAccountId: ").append(toIndentedString(rootAccountId)).append("\n");
    sb.append("    sectionIntegrationId: ").append(toIndentedString(sectionIntegrationId)).append("\n");
    sb.append("    sisAccountId: ").append(toIndentedString(sisAccountId)).append("\n");
    sb.append("    sisCourseId: ").append(toIndentedString(sisCourseId)).append("\n");
    sb.append("    sisImportId: ").append(toIndentedString(sisImportId)).append("\n");
    sb.append("    sisSectionId: ").append(toIndentedString(sisSectionId)).append("\n");
    sb.append("    sisUserId: ").append(toIndentedString(sisUserId)).append("\n");
    sb.append("    startAt: ").append(toIndentedString(startAt)).append("\n");
    sb.append("    totalActivityTime: ").append(toIndentedString(totalActivityTime)).append("\n");
    sb.append("    totalsForAllGradingPeriodsOption: ").append(toIndentedString(totalsForAllGradingPeriodsOption)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    unpostedCurrentGrade: ").append(toIndentedString(unpostedCurrentGrade)).append("\n");
    sb.append("    unpostedCurrentScore: ").append(toIndentedString(unpostedCurrentScore)).append("\n");
    sb.append("    unpostedFinalGrade: ").append(toIndentedString(unpostedFinalGrade)).append("\n");
    sb.append("    unpostedFinalScore: ").append(toIndentedString(unpostedFinalScore)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
