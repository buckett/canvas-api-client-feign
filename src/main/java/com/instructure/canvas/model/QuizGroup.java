/*
 * canvas.instructure.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.instructure.canvas.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * QuizGroup
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-11-06T15:34:49.014533Z[Europe/London]")
public class QuizGroup {

  @JsonProperty("assessment_question_bank_id")

  private Long assessmentQuestionBankId = null;

  @JsonProperty("id")

  private Long id = null;

  @JsonProperty("name")

  private String name = null;

  @JsonProperty("pick_count")

  private Long pickCount = null;

  @JsonProperty("position")

  private Long position = null;

  @JsonProperty("question_points")

  private Long questionPoints = null;

  @JsonProperty("quiz_id")

  private Long quizId = null;
  public QuizGroup assessmentQuestionBankId(Long assessmentQuestionBankId) {
    this.assessmentQuestionBankId = assessmentQuestionBankId;
    return this;
  }

  

  /**
  * The ID of the Assessment question bank to pull questions from.
  * @return assessmentQuestionBankId
  **/
  @Schema(example = "2", description = "The ID of the Assessment question bank to pull questions from.")
  public Long getAssessmentQuestionBankId() {
    return assessmentQuestionBankId;
  }
  public void setAssessmentQuestionBankId(Long assessmentQuestionBankId) {
    this.assessmentQuestionBankId = assessmentQuestionBankId;
  }
  public QuizGroup id(Long id) {
    this.id = id;
    return this;
  }

  

  /**
  * The ID of the question group.
  * @return id
  **/
  @Schema(example = "1", required = true, description = "The ID of the question group.")
  public Long getId() {
    return id;
  }
  public void setId(Long id) {
    this.id = id;
  }
  public QuizGroup name(String name) {
    this.name = name;
    return this;
  }

  

  /**
  * The name of the question group.
  * @return name
  **/
  @Schema(example = "Fraction questions", description = "The name of the question group.")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  public QuizGroup pickCount(Long pickCount) {
    this.pickCount = pickCount;
    return this;
  }

  

  /**
  * The number of questions to pick from the group to display to the student.
  * @return pickCount
  **/
  @Schema(example = "3", description = "The number of questions to pick from the group to display to the student.")
  public Long getPickCount() {
    return pickCount;
  }
  public void setPickCount(Long pickCount) {
    this.pickCount = pickCount;
  }
  public QuizGroup position(Long position) {
    this.position = position;
    return this;
  }

  

  /**
  * The order in which the question group will be retrieved and displayed.
  * @return position
  **/
  @Schema(example = "1", description = "The order in which the question group will be retrieved and displayed.")
  public Long getPosition() {
    return position;
  }
  public void setPosition(Long position) {
    this.position = position;
  }
  public QuizGroup questionPoints(Long questionPoints) {
    this.questionPoints = questionPoints;
    return this;
  }

  

  /**
  * The amount of points allotted to each question in the group.
  * @return questionPoints
  **/
  @Schema(example = "10", description = "The amount of points allotted to each question in the group.")
  public Long getQuestionPoints() {
    return questionPoints;
  }
  public void setQuestionPoints(Long questionPoints) {
    this.questionPoints = questionPoints;
  }
  public QuizGroup quizId(Long quizId) {
    this.quizId = quizId;
    return this;
  }

  

  /**
  * The ID of the Quiz the question group belongs to.
  * @return quizId
  **/
  @Schema(example = "2", required = true, description = "The ID of the Quiz the question group belongs to.")
  public Long getQuizId() {
    return quizId;
  }
  public void setQuizId(Long quizId) {
    this.quizId = quizId;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuizGroup quizGroup = (QuizGroup) o;
    return Objects.equals(this.assessmentQuestionBankId, quizGroup.assessmentQuestionBankId) &&
        Objects.equals(this.id, quizGroup.id) &&
        Objects.equals(this.name, quizGroup.name) &&
        Objects.equals(this.pickCount, quizGroup.pickCount) &&
        Objects.equals(this.position, quizGroup.position) &&
        Objects.equals(this.questionPoints, quizGroup.questionPoints) &&
        Objects.equals(this.quizId, quizGroup.quizId);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(assessmentQuestionBankId, id, name, pickCount, position, questionPoints, quizId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuizGroup {\n");
    
    sb.append("    assessmentQuestionBankId: ").append(toIndentedString(assessmentQuestionBankId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pickCount: ").append(toIndentedString(pickCount)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    questionPoints: ").append(toIndentedString(questionPoints)).append("\n");
    sb.append("    quizId: ").append(toIndentedString(quizId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
