/*
 * canvas.instructure.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.instructure.canvas.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.OffsetDateTime;

/**
 * User-controlled setting for whether an item should be displayed on the planner or not
 */
@Schema(description = "User-controlled setting for whether an item should be displayed on the planner or not")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-11-06T15:34:49.014533Z[Europe/London]")
public class PlannerOverride {

  @JsonProperty("assignment_id")

  private Integer assignmentId = null;

  @JsonProperty("created_at")

  private OffsetDateTime createdAt = null;

  @JsonProperty("deleted_at")

  private OffsetDateTime deletedAt = null;

  @JsonProperty("dismissed")

  private Boolean dismissed = null;

  @JsonProperty("id")

  private Integer id = null;

  @JsonProperty("marked_complete")

  private Boolean markedComplete = null;

  @JsonProperty("plannable_id")

  private Integer plannableId = null;

  @JsonProperty("plannable_type")

  private String plannableType = null;

  @JsonProperty("updated_at")

  private OffsetDateTime updatedAt = null;

  @JsonProperty("user_id")

  private Integer userId = null;

  @JsonProperty("workflow_state")

  private String workflowState = null;
  public PlannerOverride assignmentId(Integer assignmentId) {
    this.assignmentId = assignmentId;
    return this;
  }

  

  /**
  * The id of the plannable&#x27;s associated assignment, if it has one
  * @return assignmentId
  **/
  @Schema(example = "1578941", description = "The id of the plannable's associated assignment, if it has one")
  public Integer getAssignmentId() {
    return assignmentId;
  }
  public void setAssignmentId(Integer assignmentId) {
    this.assignmentId = assignmentId;
  }
  public PlannerOverride createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  

  /**
  * The datetime of when the planner override was created
  * @return createdAt
  **/
  @Schema(description = "The datetime of when the planner override was created")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }
  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }
  public PlannerOverride deletedAt(OffsetDateTime deletedAt) {
    this.deletedAt = deletedAt;
    return this;
  }

  

  /**
  * The datetime of when the planner override was deleted, if applicable
  * @return deletedAt
  **/
  @Schema(description = "The datetime of when the planner override was deleted, if applicable")
  public OffsetDateTime getDeletedAt() {
    return deletedAt;
  }
  public void setDeletedAt(OffsetDateTime deletedAt) {
    this.deletedAt = deletedAt;
  }
  public PlannerOverride dismissed(Boolean dismissed) {
    this.dismissed = dismissed;
    return this;
  }

  

  /**
  * Controls whether or not the associated plannable item shows up in the opportunities list
  * @return dismissed
  **/
  @Schema(example = "false", description = "Controls whether or not the associated plannable item shows up in the opportunities list")
  public Boolean isDismissed() {
    return dismissed;
  }
  public void setDismissed(Boolean dismissed) {
    this.dismissed = dismissed;
  }
  public PlannerOverride id(Integer id) {
    this.id = id;
    return this;
  }

  

  /**
  * The ID of the planner override
  * @return id
  **/
  @Schema(example = "234", description = "The ID of the planner override")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }
  public PlannerOverride markedComplete(Boolean markedComplete) {
    this.markedComplete = markedComplete;
    return this;
  }

  

  /**
  * Controls whether or not the associated plannable item is marked complete on the planner
  * @return markedComplete
  **/
  @Schema(example = "false", description = "Controls whether or not the associated plannable item is marked complete on the planner")
  public Boolean isMarkedComplete() {
    return markedComplete;
  }
  public void setMarkedComplete(Boolean markedComplete) {
    this.markedComplete = markedComplete;
  }
  public PlannerOverride plannableId(Integer plannableId) {
    this.plannableId = plannableId;
    return this;
  }

  

  /**
  * The id of the associated object for the planner override
  * @return plannableId
  **/
  @Schema(example = "1578941", description = "The id of the associated object for the planner override")
  public Integer getPlannableId() {
    return plannableId;
  }
  public void setPlannableId(Integer plannableId) {
    this.plannableId = plannableId;
  }
  public PlannerOverride plannableType(String plannableType) {
    this.plannableType = plannableType;
    return this;
  }

  

  /**
  * The type of the associated object for the planner override
  * @return plannableType
  **/
  @Schema(example = "Assignment", description = "The type of the associated object for the planner override")
  public String getPlannableType() {
    return plannableType;
  }
  public void setPlannableType(String plannableType) {
    this.plannableType = plannableType;
  }
  public PlannerOverride updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  

  /**
  * The datetime of when the planner override was updated
  * @return updatedAt
  **/
  @Schema(description = "The datetime of when the planner override was updated")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }
  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }
  public PlannerOverride userId(Integer userId) {
    this.userId = userId;
    return this;
  }

  

  /**
  * The id of the associated user for the planner override
  * @return userId
  **/
  @Schema(example = "1578941", description = "The id of the associated user for the planner override")
  public Integer getUserId() {
    return userId;
  }
  public void setUserId(Integer userId) {
    this.userId = userId;
  }
  public PlannerOverride workflowState(String workflowState) {
    this.workflowState = workflowState;
    return this;
  }

  

  /**
  * The current published state of the item, synced with the associated object
  * @return workflowState
  **/
  @Schema(example = "published", description = "The current published state of the item, synced with the associated object")
  public String getWorkflowState() {
    return workflowState;
  }
  public void setWorkflowState(String workflowState) {
    this.workflowState = workflowState;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlannerOverride plannerOverride = (PlannerOverride) o;
    return Objects.equals(this.assignmentId, plannerOverride.assignmentId) &&
        Objects.equals(this.createdAt, plannerOverride.createdAt) &&
        Objects.equals(this.deletedAt, plannerOverride.deletedAt) &&
        Objects.equals(this.dismissed, plannerOverride.dismissed) &&
        Objects.equals(this.id, plannerOverride.id) &&
        Objects.equals(this.markedComplete, plannerOverride.markedComplete) &&
        Objects.equals(this.plannableId, plannerOverride.plannableId) &&
        Objects.equals(this.plannableType, plannerOverride.plannableType) &&
        Objects.equals(this.updatedAt, plannerOverride.updatedAt) &&
        Objects.equals(this.userId, plannerOverride.userId) &&
        Objects.equals(this.workflowState, plannerOverride.workflowState);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(assignmentId, createdAt, deletedAt, dismissed, id, markedComplete, plannableId, plannableType, updatedAt, userId, workflowState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlannerOverride {\n");
    
    sb.append("    assignmentId: ").append(toIndentedString(assignmentId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("    dismissed: ").append(toIndentedString(dismissed)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    markedComplete: ").append(toIndentedString(markedComplete)).append("\n");
    sb.append("    plannableId: ").append(toIndentedString(plannableId)).append("\n");
    sb.append("    plannableType: ").append(toIndentedString(plannableType)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    workflowState: ").append(toIndentedString(workflowState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
