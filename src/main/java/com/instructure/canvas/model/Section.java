/*
 * canvas.instructure.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.instructure.canvas.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.OffsetDateTime;

/**
 * Section
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-11-06T15:34:49.014533Z[Europe/London]")
public class Section {

  @JsonProperty("course_id")

  private Integer courseId = null;

  @JsonProperty("end_at")

  private OffsetDateTime endAt = null;

  @JsonProperty("id")

  private Integer id = null;

  @JsonProperty("integration_id")

  private String integrationId = null;

  @JsonProperty("name")

  private String name = null;

  @JsonProperty("nonxlist_course_id")

  private Integer nonxlistCourseId = null;

  @JsonProperty("restrict_enrollments_to_section_dates")

  private Boolean restrictEnrollmentsToSectionDates = null;

  @JsonProperty("sis_course_id")

  private String sisCourseId = null;

  @JsonProperty("sis_import_id")

  private Integer sisImportId = null;

  @JsonProperty("sis_section_id")

  private String sisSectionId = null;

  @JsonProperty("start_at")

  private OffsetDateTime startAt = null;

  @JsonProperty("total_students")

  private Integer totalStudents = null;
  public Section courseId(Integer courseId) {
    this.courseId = courseId;
    return this;
  }

  

  /**
  * The unique Canvas identifier for the course in which the section belongs
  * @return courseId
  **/
  @Schema(example = "7", description = "The unique Canvas identifier for the course in which the section belongs")
  public Integer getCourseId() {
    return courseId;
  }
  public void setCourseId(Integer courseId) {
    this.courseId = courseId;
  }
  public Section endAt(OffsetDateTime endAt) {
    this.endAt = endAt;
    return this;
  }

  

  /**
  * the end date for the section, if applicable
  * @return endAt
  **/
  @Schema(description = "the end date for the section, if applicable")
  public OffsetDateTime getEndAt() {
    return endAt;
  }
  public void setEndAt(OffsetDateTime endAt) {
    this.endAt = endAt;
  }
  public Section id(Integer id) {
    this.id = id;
    return this;
  }

  

  /**
  * The unique identifier for the section.
  * @return id
  **/
  @Schema(example = "1", description = "The unique identifier for the section.")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }
  public Section integrationId(String integrationId) {
    this.integrationId = integrationId;
    return this;
  }

  

  /**
  * Optional: The integration ID of the section. This field is only included if the user has permission to view SIS information.
  * @return integrationId
  **/
  @Schema(example = "3452342345", description = "Optional: The integration ID of the section. This field is only included if the user has permission to view SIS information.")
  public String getIntegrationId() {
    return integrationId;
  }
  public void setIntegrationId(String integrationId) {
    this.integrationId = integrationId;
  }
  public Section name(String name) {
    this.name = name;
    return this;
  }

  

  /**
  * The name of the section.
  * @return name
  **/
  @Schema(example = "Section A", description = "The name of the section.")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  public Section nonxlistCourseId(Integer nonxlistCourseId) {
    this.nonxlistCourseId = nonxlistCourseId;
    return this;
  }

  

  /**
  * The unique identifier of the original course of a cross-listed section
  * @return nonxlistCourseId
  **/
  @Schema(description = "The unique identifier of the original course of a cross-listed section")
  public Integer getNonxlistCourseId() {
    return nonxlistCourseId;
  }
  public void setNonxlistCourseId(Integer nonxlistCourseId) {
    this.nonxlistCourseId = nonxlistCourseId;
  }
  public Section restrictEnrollmentsToSectionDates(Boolean restrictEnrollmentsToSectionDates) {
    this.restrictEnrollmentsToSectionDates = restrictEnrollmentsToSectionDates;
    return this;
  }

  

  /**
  * Restrict user enrollments to the start and end dates of the section
  * @return restrictEnrollmentsToSectionDates
  **/
  @Schema(description = "Restrict user enrollments to the start and end dates of the section")
  public Boolean isRestrictEnrollmentsToSectionDates() {
    return restrictEnrollmentsToSectionDates;
  }
  public void setRestrictEnrollmentsToSectionDates(Boolean restrictEnrollmentsToSectionDates) {
    this.restrictEnrollmentsToSectionDates = restrictEnrollmentsToSectionDates;
  }
  public Section sisCourseId(String sisCourseId) {
    this.sisCourseId = sisCourseId;
    return this;
  }

  

  /**
  * The unique SIS identifier for the course in which the section belongs. This field is only included if the user has permission to view SIS information.
  * @return sisCourseId
  **/
  @Schema(example = "7", description = "The unique SIS identifier for the course in which the section belongs. This field is only included if the user has permission to view SIS information.")
  public String getSisCourseId() {
    return sisCourseId;
  }
  public void setSisCourseId(String sisCourseId) {
    this.sisCourseId = sisCourseId;
  }
  public Section sisImportId(Integer sisImportId) {
    this.sisImportId = sisImportId;
    return this;
  }

  

  /**
  * The unique identifier for the SIS import if created through SIS. This field is only included if the user has permission to manage SIS information.
  * @return sisImportId
  **/
  @Schema(example = "47", description = "The unique identifier for the SIS import if created through SIS. This field is only included if the user has permission to manage SIS information.")
  public Integer getSisImportId() {
    return sisImportId;
  }
  public void setSisImportId(Integer sisImportId) {
    this.sisImportId = sisImportId;
  }
  public Section sisSectionId(String sisSectionId) {
    this.sisSectionId = sisSectionId;
    return this;
  }

  

  /**
  * The sis id of the section. This field is only included if the user has permission to view SIS information.
  * @return sisSectionId
  **/
  @Schema(example = "s34643", description = "The sis id of the section. This field is only included if the user has permission to view SIS information.")
  public String getSisSectionId() {
    return sisSectionId;
  }
  public void setSisSectionId(String sisSectionId) {
    this.sisSectionId = sisSectionId;
  }
  public Section startAt(OffsetDateTime startAt) {
    this.startAt = startAt;
    return this;
  }

  

  /**
  * the start date for the section, if applicable
  * @return startAt
  **/
  @Schema(description = "the start date for the section, if applicable")
  public OffsetDateTime getStartAt() {
    return startAt;
  }
  public void setStartAt(OffsetDateTime startAt) {
    this.startAt = startAt;
  }
  public Section totalStudents(Integer totalStudents) {
    this.totalStudents = totalStudents;
    return this;
  }

  

  /**
  * optional: the total number of active and invited students in the section
  * @return totalStudents
  **/
  @Schema(example = "13", description = "optional: the total number of active and invited students in the section")
  public Integer getTotalStudents() {
    return totalStudents;
  }
  public void setTotalStudents(Integer totalStudents) {
    this.totalStudents = totalStudents;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Section section = (Section) o;
    return Objects.equals(this.courseId, section.courseId) &&
        Objects.equals(this.endAt, section.endAt) &&
        Objects.equals(this.id, section.id) &&
        Objects.equals(this.integrationId, section.integrationId) &&
        Objects.equals(this.name, section.name) &&
        Objects.equals(this.nonxlistCourseId, section.nonxlistCourseId) &&
        Objects.equals(this.restrictEnrollmentsToSectionDates, section.restrictEnrollmentsToSectionDates) &&
        Objects.equals(this.sisCourseId, section.sisCourseId) &&
        Objects.equals(this.sisImportId, section.sisImportId) &&
        Objects.equals(this.sisSectionId, section.sisSectionId) &&
        Objects.equals(this.startAt, section.startAt) &&
        Objects.equals(this.totalStudents, section.totalStudents);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(courseId, endAt, id, integrationId, name, nonxlistCourseId, restrictEnrollmentsToSectionDates, sisCourseId, sisImportId, sisSectionId, startAt, totalStudents);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Section {\n");
    
    sb.append("    courseId: ").append(toIndentedString(courseId)).append("\n");
    sb.append("    endAt: ").append(toIndentedString(endAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    integrationId: ").append(toIndentedString(integrationId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nonxlistCourseId: ").append(toIndentedString(nonxlistCourseId)).append("\n");
    sb.append("    restrictEnrollmentsToSectionDates: ").append(toIndentedString(restrictEnrollmentsToSectionDates)).append("\n");
    sb.append("    sisCourseId: ").append(toIndentedString(sisCourseId)).append("\n");
    sb.append("    sisImportId: ").append(toIndentedString(sisImportId)).append("\n");
    sb.append("    sisSectionId: ").append(toIndentedString(sisSectionId)).append("\n");
    sb.append("    startAt: ").append(toIndentedString(startAt)).append("\n");
    sb.append("    totalStudents: ").append(toIndentedString(totalStudents)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
