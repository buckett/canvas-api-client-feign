/*
 * canvas.instructure.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.instructure.canvas.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.OffsetDateTime;

/**
 * Folder
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-11-06T15:34:49.014533Z[Europe/London]")
public class Folder {

  @JsonProperty("context_id")

  private Integer contextId = null;

  @JsonProperty("context_type")

  private String contextType = null;

  @JsonProperty("created_at")

  private OffsetDateTime createdAt = null;

  @JsonProperty("files_count")

  private Integer filesCount = null;

  @JsonProperty("files_url")

  private String filesUrl = null;

  @JsonProperty("folders_count")

  private Integer foldersCount = null;

  @JsonProperty("folders_url")

  private String foldersUrl = null;

  @JsonProperty("for_submissions")

  private Boolean forSubmissions = null;

  @JsonProperty("full_name")

  private String fullName = null;

  @JsonProperty("hidden")

  private Boolean hidden = null;

  @JsonProperty("hidden_for_user")

  private Boolean hiddenForUser = null;

  @JsonProperty("id")

  private Integer id = null;

  @JsonProperty("lock_at")

  private OffsetDateTime lockAt = null;

  @JsonProperty("locked")

  private Boolean locked = null;

  @JsonProperty("locked_for_user")

  private Boolean lockedForUser = null;

  @JsonProperty("name")

  private String name = null;

  @JsonProperty("parent_folder_id")

  private Integer parentFolderId = null;

  @JsonProperty("position")

  private Integer position = null;

  @JsonProperty("unlock_at")

  private OffsetDateTime unlockAt = null;

  @JsonProperty("updated_at")

  private OffsetDateTime updatedAt = null;
  public Folder contextId(Integer contextId) {
    this.contextId = contextId;
    return this;
  }

  

  /**
  * Get contextId
  * @return contextId
  **/
  @Schema(example = "1401", description = "")
  public Integer getContextId() {
    return contextId;
  }
  public void setContextId(Integer contextId) {
    this.contextId = contextId;
  }
  public Folder contextType(String contextType) {
    this.contextType = contextType;
    return this;
  }

  

  /**
  * Get contextType
  * @return contextType
  **/
  @Schema(example = "Course", description = "")
  public String getContextType() {
    return contextType;
  }
  public void setContextType(String contextType) {
    this.contextType = contextType;
  }
  public Folder createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  

  /**
  * Get createdAt
  * @return createdAt
  **/
  @Schema(description = "")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }
  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }
  public Folder filesCount(Integer filesCount) {
    this.filesCount = filesCount;
    return this;
  }

  

  /**
  * Get filesCount
  * @return filesCount
  **/
  @Schema(example = "0", description = "")
  public Integer getFilesCount() {
    return filesCount;
  }
  public void setFilesCount(Integer filesCount) {
    this.filesCount = filesCount;
  }
  public Folder filesUrl(String filesUrl) {
    this.filesUrl = filesUrl;
    return this;
  }

  

  /**
  * Get filesUrl
  * @return filesUrl
  **/
  @Schema(example = "https://www.example.com/api/v1/folders/2937/files", description = "")
  public String getFilesUrl() {
    return filesUrl;
  }
  public void setFilesUrl(String filesUrl) {
    this.filesUrl = filesUrl;
  }
  public Folder foldersCount(Integer foldersCount) {
    this.foldersCount = foldersCount;
    return this;
  }

  

  /**
  * Get foldersCount
  * @return foldersCount
  **/
  @Schema(example = "0", description = "")
  public Integer getFoldersCount() {
    return foldersCount;
  }
  public void setFoldersCount(Integer foldersCount) {
    this.foldersCount = foldersCount;
  }
  public Folder foldersUrl(String foldersUrl) {
    this.foldersUrl = foldersUrl;
    return this;
  }

  

  /**
  * Get foldersUrl
  * @return foldersUrl
  **/
  @Schema(example = "https://www.example.com/api/v1/folders/2937/folders", description = "")
  public String getFoldersUrl() {
    return foldersUrl;
  }
  public void setFoldersUrl(String foldersUrl) {
    this.foldersUrl = foldersUrl;
  }
  public Folder forSubmissions(Boolean forSubmissions) {
    this.forSubmissions = forSubmissions;
    return this;
  }

  

  /**
  * If true, indicates this is a read-only folder containing files submitted to assignments
  * @return forSubmissions
  **/
  @Schema(example = "false", description = "If true, indicates this is a read-only folder containing files submitted to assignments")
  public Boolean isForSubmissions() {
    return forSubmissions;
  }
  public void setForSubmissions(Boolean forSubmissions) {
    this.forSubmissions = forSubmissions;
  }
  public Folder fullName(String fullName) {
    this.fullName = fullName;
    return this;
  }

  

  /**
  * Get fullName
  * @return fullName
  **/
  @Schema(example = "course files/11folder", description = "")
  public String getFullName() {
    return fullName;
  }
  public void setFullName(String fullName) {
    this.fullName = fullName;
  }
  public Folder hidden(Boolean hidden) {
    this.hidden = hidden;
    return this;
  }

  

  /**
  * Get hidden
  * @return hidden
  **/
  @Schema(example = "false", description = "")
  public Boolean isHidden() {
    return hidden;
  }
  public void setHidden(Boolean hidden) {
    this.hidden = hidden;
  }
  public Folder hiddenForUser(Boolean hiddenForUser) {
    this.hiddenForUser = hiddenForUser;
    return this;
  }

  

  /**
  * Get hiddenForUser
  * @return hiddenForUser
  **/
  @Schema(example = "false", description = "")
  public Boolean isHiddenForUser() {
    return hiddenForUser;
  }
  public void setHiddenForUser(Boolean hiddenForUser) {
    this.hiddenForUser = hiddenForUser;
  }
  public Folder id(Integer id) {
    this.id = id;
    return this;
  }

  

  /**
  * Get id
  * @return id
  **/
  @Schema(example = "2937", description = "")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }
  public Folder lockAt(OffsetDateTime lockAt) {
    this.lockAt = lockAt;
    return this;
  }

  

  /**
  * Get lockAt
  * @return lockAt
  **/
  @Schema(description = "")
  public OffsetDateTime getLockAt() {
    return lockAt;
  }
  public void setLockAt(OffsetDateTime lockAt) {
    this.lockAt = lockAt;
  }
  public Folder locked(Boolean locked) {
    this.locked = locked;
    return this;
  }

  

  /**
  * Get locked
  * @return locked
  **/
  @Schema(example = "true", description = "")
  public Boolean isLocked() {
    return locked;
  }
  public void setLocked(Boolean locked) {
    this.locked = locked;
  }
  public Folder lockedForUser(Boolean lockedForUser) {
    this.lockedForUser = lockedForUser;
    return this;
  }

  

  /**
  * Get lockedForUser
  * @return lockedForUser
  **/
  @Schema(example = "false", description = "")
  public Boolean isLockedForUser() {
    return lockedForUser;
  }
  public void setLockedForUser(Boolean lockedForUser) {
    this.lockedForUser = lockedForUser;
  }
  public Folder name(String name) {
    this.name = name;
    return this;
  }

  

  /**
  * Get name
  * @return name
  **/
  @Schema(example = "11folder", description = "")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  public Folder parentFolderId(Integer parentFolderId) {
    this.parentFolderId = parentFolderId;
    return this;
  }

  

  /**
  * Get parentFolderId
  * @return parentFolderId
  **/
  @Schema(example = "2934", description = "")
  public Integer getParentFolderId() {
    return parentFolderId;
  }
  public void setParentFolderId(Integer parentFolderId) {
    this.parentFolderId = parentFolderId;
  }
  public Folder position(Integer position) {
    this.position = position;
    return this;
  }

  

  /**
  * Get position
  * @return position
  **/
  @Schema(example = "3", description = "")
  public Integer getPosition() {
    return position;
  }
  public void setPosition(Integer position) {
    this.position = position;
  }
  public Folder unlockAt(OffsetDateTime unlockAt) {
    this.unlockAt = unlockAt;
    return this;
  }

  

  /**
  * Get unlockAt
  * @return unlockAt
  **/
  @Schema(description = "")
  public OffsetDateTime getUnlockAt() {
    return unlockAt;
  }
  public void setUnlockAt(OffsetDateTime unlockAt) {
    this.unlockAt = unlockAt;
  }
  public Folder updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  

  /**
  * Get updatedAt
  * @return updatedAt
  **/
  @Schema(description = "")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }
  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Folder folder = (Folder) o;
    return Objects.equals(this.contextId, folder.contextId) &&
        Objects.equals(this.contextType, folder.contextType) &&
        Objects.equals(this.createdAt, folder.createdAt) &&
        Objects.equals(this.filesCount, folder.filesCount) &&
        Objects.equals(this.filesUrl, folder.filesUrl) &&
        Objects.equals(this.foldersCount, folder.foldersCount) &&
        Objects.equals(this.foldersUrl, folder.foldersUrl) &&
        Objects.equals(this.forSubmissions, folder.forSubmissions) &&
        Objects.equals(this.fullName, folder.fullName) &&
        Objects.equals(this.hidden, folder.hidden) &&
        Objects.equals(this.hiddenForUser, folder.hiddenForUser) &&
        Objects.equals(this.id, folder.id) &&
        Objects.equals(this.lockAt, folder.lockAt) &&
        Objects.equals(this.locked, folder.locked) &&
        Objects.equals(this.lockedForUser, folder.lockedForUser) &&
        Objects.equals(this.name, folder.name) &&
        Objects.equals(this.parentFolderId, folder.parentFolderId) &&
        Objects.equals(this.position, folder.position) &&
        Objects.equals(this.unlockAt, folder.unlockAt) &&
        Objects.equals(this.updatedAt, folder.updatedAt);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(contextId, contextType, createdAt, filesCount, filesUrl, foldersCount, foldersUrl, forSubmissions, fullName, hidden, hiddenForUser, id, lockAt, locked, lockedForUser, name, parentFolderId, position, unlockAt, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Folder {\n");
    
    sb.append("    contextId: ").append(toIndentedString(contextId)).append("\n");
    sb.append("    contextType: ").append(toIndentedString(contextType)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    filesCount: ").append(toIndentedString(filesCount)).append("\n");
    sb.append("    filesUrl: ").append(toIndentedString(filesUrl)).append("\n");
    sb.append("    foldersCount: ").append(toIndentedString(foldersCount)).append("\n");
    sb.append("    foldersUrl: ").append(toIndentedString(foldersUrl)).append("\n");
    sb.append("    forSubmissions: ").append(toIndentedString(forSubmissions)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    hiddenForUser: ").append(toIndentedString(hiddenForUser)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lockAt: ").append(toIndentedString(lockAt)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("    lockedForUser: ").append(toIndentedString(lockedForUser)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parentFolderId: ").append(toIndentedString(parentFolderId)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    unlockAt: ").append(toIndentedString(unlockAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
