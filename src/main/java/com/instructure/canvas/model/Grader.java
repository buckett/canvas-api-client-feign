/*
 * canvas.instructure.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.instructure.canvas.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;

/**
 * Grader
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-11-06T15:34:49.014533Z[Europe/London]")
public class Grader {

  @JsonProperty("assignments")

  private List<Integer> assignments = null;

  @JsonProperty("id")

  private Integer id = null;

  @JsonProperty("name")

  private String name = null;
  public Grader assignments(List<Integer> assignments) {
    this.assignments = assignments;
    return this;
  }

  public Grader addAssignmentsItem(Integer assignmentsItem) {
    if (this.assignments == null) {
      this.assignments = new ArrayList<Integer>();
    }
    this.assignments.add(assignmentsItem);
    return this;
  }

  /**
  * the assignment groups for all submissions in this response that were graded by this user.  The details are not nested inside here, but the fact that an assignment is present here means that the grader did grade submissions for this assignment on the contextual date. You can use the id of a grader and of an assignment to make another API call to find all submissions for a grader/assignment combination on a given date.
  * @return assignments
  **/
  @Schema(example = "[1, 2, 3]", description = "the assignment groups for all submissions in this response that were graded by this user.  The details are not nested inside here, but the fact that an assignment is present here means that the grader did grade submissions for this assignment on the contextual date. You can use the id of a grader and of an assignment to make another API call to find all submissions for a grader/assignment combination on a given date.")
  public List<Integer> getAssignments() {
    return assignments;
  }
  public void setAssignments(List<Integer> assignments) {
    this.assignments = assignments;
  }
  public Grader id(Integer id) {
    this.id = id;
    return this;
  }

  

  /**
  * the user_id of the user who graded the contained submissions
  * @return id
  **/
  @Schema(example = "27", description = "the user_id of the user who graded the contained submissions")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }
  public Grader name(String name) {
    this.name = name;
    return this;
  }

  

  /**
  * the name of the user who graded the contained submissions
  * @return name
  **/
  @Schema(example = "Some User", description = "the name of the user who graded the contained submissions")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Grader grader = (Grader) o;
    return Objects.equals(this.assignments, grader.assignments) &&
        Objects.equals(this.id, grader.id) &&
        Objects.equals(this.name, grader.name);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(assignments, id, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Grader {\n");
    
    sb.append("    assignments: ").append(toIndentedString(assignments)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
