/*
 * canvas.instructure.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.instructure.canvas.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.instructure.canvas.model.ToolSetting;
import io.swagger.v3.oas.annotations.media.Schema;
import java.math.BigDecimal;

/**
 * OriginalityReport
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-11-06T15:34:49.014533Z[Europe/London]")
public class OriginalityReport {

  @JsonProperty("file_id")

  private Integer fileId = null;

  @JsonProperty("id")

  private Integer id = null;

  @JsonProperty("originality_report_file_id")

  private Integer originalityReportFileId = null;

  @JsonProperty("originality_report_url")

  private String originalityReportUrl = null;

  @JsonProperty("originality_score")

  private BigDecimal originalityScore = null;

  @JsonProperty("tool_setting")

  private ToolSetting toolSetting = null;
  public OriginalityReport fileId(Integer fileId) {
    this.fileId = fileId;
    return this;
  }

  

  /**
  * The id of the file receiving the originality score
  * @return fileId
  **/
  @Schema(example = "8", description = "The id of the file receiving the originality score")
  public Integer getFileId() {
    return fileId;
  }
  public void setFileId(Integer fileId) {
    this.fileId = fileId;
  }
  public OriginalityReport id(Integer id) {
    this.id = id;
    return this;
  }

  

  /**
  * The id of the OriginalityReport
  * @return id
  **/
  @Schema(example = "4", description = "The id of the OriginalityReport")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }
  public OriginalityReport originalityReportFileId(Integer originalityReportFileId) {
    this.originalityReportFileId = originalityReportFileId;
    return this;
  }

  

  /**
  * The ID of the file within Canvas containing the originality report document (if provided)
  * @return originalityReportFileId
  **/
  @Schema(example = "23", description = "The ID of the file within Canvas containing the originality report document (if provided)")
  public Integer getOriginalityReportFileId() {
    return originalityReportFileId;
  }
  public void setOriginalityReportFileId(Integer originalityReportFileId) {
    this.originalityReportFileId = originalityReportFileId;
  }
  public OriginalityReport originalityReportUrl(String originalityReportUrl) {
    this.originalityReportUrl = originalityReportUrl;
    return this;
  }

  

  /**
  * A non-LTI launch URL where the originality score of the file may be found.
  * @return originalityReportUrl
  **/
  @Schema(example = "http://www.example.com/report", description = "A non-LTI launch URL where the originality score of the file may be found.")
  public String getOriginalityReportUrl() {
    return originalityReportUrl;
  }
  public void setOriginalityReportUrl(String originalityReportUrl) {
    this.originalityReportUrl = originalityReportUrl;
  }
  public OriginalityReport originalityScore(BigDecimal originalityScore) {
    this.originalityScore = originalityScore;
    return this;
  }

  

  /**
  * A number between 0 and 100 representing the originality score
  * @return originalityScore
  **/
  @Schema(example = "0.16", description = "A number between 0 and 100 representing the originality score")
  public BigDecimal getOriginalityScore() {
    return originalityScore;
  }
  public void setOriginalityScore(BigDecimal originalityScore) {
    this.originalityScore = originalityScore;
  }
  public OriginalityReport toolSetting(ToolSetting toolSetting) {
    this.toolSetting = toolSetting;
    return this;
  }

  

  /**
  * Get toolSetting
  * @return toolSetting
  **/
  @Schema(description = "")
  public ToolSetting getToolSetting() {
    return toolSetting;
  }
  public void setToolSetting(ToolSetting toolSetting) {
    this.toolSetting = toolSetting;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OriginalityReport originalityReport = (OriginalityReport) o;
    return Objects.equals(this.fileId, originalityReport.fileId) &&
        Objects.equals(this.id, originalityReport.id) &&
        Objects.equals(this.originalityReportFileId, originalityReport.originalityReportFileId) &&
        Objects.equals(this.originalityReportUrl, originalityReport.originalityReportUrl) &&
        Objects.equals(this.originalityScore, originalityReport.originalityScore) &&
        Objects.equals(this.toolSetting, originalityReport.toolSetting);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(fileId, id, originalityReportFileId, originalityReportUrl, originalityScore, toolSetting);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OriginalityReport {\n");
    
    sb.append("    fileId: ").append(toIndentedString(fileId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    originalityReportFileId: ").append(toIndentedString(originalityReportFileId)).append("\n");
    sb.append("    originalityReportUrl: ").append(toIndentedString(originalityReportUrl)).append("\n");
    sb.append("    originalityScore: ").append(toIndentedString(originalityScore)).append("\n");
    sb.append("    toolSetting: ").append(toIndentedString(toolSetting)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
