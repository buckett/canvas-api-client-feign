/*
 * canvas.instructure.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.instructure.canvas.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.OffsetDateTime;

/**
 * A planner note
 */
@Schema(description = "A planner note")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-11-06T15:34:49.014533Z[Europe/London]")
public class PlannerNote {

  @JsonProperty("course_id")

  private Integer courseId = null;

  @JsonProperty("description")

  private String description = null;

  @JsonProperty("id")

  private Integer id = null;

  @JsonProperty("linked_object_html_url")

  private String linkedObjectHtmlUrl = null;

  @JsonProperty("linked_object_id")

  private Integer linkedObjectId = null;

  @JsonProperty("linked_object_type")

  private String linkedObjectType = null;

  @JsonProperty("linked_object_url")

  private String linkedObjectUrl = null;

  @JsonProperty("title")

  private String title = null;

  @JsonProperty("todo_date")

  private OffsetDateTime todoDate = null;

  @JsonProperty("user_id")

  private Integer userId = null;

  @JsonProperty("workflow_state")

  private String workflowState = null;
  public PlannerNote courseId(Integer courseId) {
    this.courseId = courseId;
    return this;
  }

  

  /**
  * The course that the note is in relation too, if applicable
  * @return courseId
  **/
  @Schema(example = "1578941", description = "The course that the note is in relation too, if applicable")
  public Integer getCourseId() {
    return courseId;
  }
  public void setCourseId(Integer courseId) {
    this.courseId = courseId;
  }
  public PlannerNote description(String description) {
    this.description = description;
    return this;
  }

  

  /**
  * The description of the planner note
  * @return description
  **/
  @Schema(example = "I need to bring books tomorrow for my course on biology", description = "The description of the planner note")
  public String getDescription() {
    return description;
  }
  public void setDescription(String description) {
    this.description = description;
  }
  public PlannerNote id(Integer id) {
    this.id = id;
    return this;
  }

  

  /**
  * The ID of the planner note
  * @return id
  **/
  @Schema(example = "234", description = "The ID of the planner note")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }
  public PlannerNote linkedObjectHtmlUrl(String linkedObjectHtmlUrl) {
    this.linkedObjectHtmlUrl = linkedObjectHtmlUrl;
    return this;
  }

  

  /**
  * the Canvas web URL of the linked learning object
  * @return linkedObjectHtmlUrl
  **/
  @Schema(example = "https://canvas.example.com/courses/1578941/assignments/131072", description = "the Canvas web URL of the linked learning object")
  public String getLinkedObjectHtmlUrl() {
    return linkedObjectHtmlUrl;
  }
  public void setLinkedObjectHtmlUrl(String linkedObjectHtmlUrl) {
    this.linkedObjectHtmlUrl = linkedObjectHtmlUrl;
  }
  public PlannerNote linkedObjectId(Integer linkedObjectId) {
    this.linkedObjectId = linkedObjectId;
    return this;
  }

  

  /**
  * the id of the linked learning object
  * @return linkedObjectId
  **/
  @Schema(example = "131072", description = "the id of the linked learning object")
  public Integer getLinkedObjectId() {
    return linkedObjectId;
  }
  public void setLinkedObjectId(Integer linkedObjectId) {
    this.linkedObjectId = linkedObjectId;
  }
  public PlannerNote linkedObjectType(String linkedObjectType) {
    this.linkedObjectType = linkedObjectType;
    return this;
  }

  

  /**
  * the type of the linked learning object
  * @return linkedObjectType
  **/
  @Schema(example = "assignment", description = "the type of the linked learning object")
  public String getLinkedObjectType() {
    return linkedObjectType;
  }
  public void setLinkedObjectType(String linkedObjectType) {
    this.linkedObjectType = linkedObjectType;
  }
  public PlannerNote linkedObjectUrl(String linkedObjectUrl) {
    this.linkedObjectUrl = linkedObjectUrl;
    return this;
  }

  

  /**
  * the API URL of the linked learning object
  * @return linkedObjectUrl
  **/
  @Schema(example = "https://canvas.example.com/api/v1/courses/1578941/assignments/131072", description = "the API URL of the linked learning object")
  public String getLinkedObjectUrl() {
    return linkedObjectUrl;
  }
  public void setLinkedObjectUrl(String linkedObjectUrl) {
    this.linkedObjectUrl = linkedObjectUrl;
  }
  public PlannerNote title(String title) {
    this.title = title;
    return this;
  }

  

  /**
  * The title for a planner note
  * @return title
  **/
  @Schema(example = "Bring books tomorrow", description = "The title for a planner note")
  public String getTitle() {
    return title;
  }
  public void setTitle(String title) {
    this.title = title;
  }
  public PlannerNote todoDate(OffsetDateTime todoDate) {
    this.todoDate = todoDate;
    return this;
  }

  

  /**
  * The datetime of when the planner note should show up on their planner
  * @return todoDate
  **/
  @Schema(description = "The datetime of when the planner note should show up on their planner")
  public OffsetDateTime getTodoDate() {
    return todoDate;
  }
  public void setTodoDate(OffsetDateTime todoDate) {
    this.todoDate = todoDate;
  }
  public PlannerNote userId(Integer userId) {
    this.userId = userId;
    return this;
  }

  

  /**
  * The id of the associated user creating the planner note
  * @return userId
  **/
  @Schema(example = "1578941", description = "The id of the associated user creating the planner note")
  public Integer getUserId() {
    return userId;
  }
  public void setUserId(Integer userId) {
    this.userId = userId;
  }
  public PlannerNote workflowState(String workflowState) {
    this.workflowState = workflowState;
    return this;
  }

  

  /**
  * The current published state of the planner note
  * @return workflowState
  **/
  @Schema(example = "active", description = "The current published state of the planner note")
  public String getWorkflowState() {
    return workflowState;
  }
  public void setWorkflowState(String workflowState) {
    this.workflowState = workflowState;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlannerNote plannerNote = (PlannerNote) o;
    return Objects.equals(this.courseId, plannerNote.courseId) &&
        Objects.equals(this.description, plannerNote.description) &&
        Objects.equals(this.id, plannerNote.id) &&
        Objects.equals(this.linkedObjectHtmlUrl, plannerNote.linkedObjectHtmlUrl) &&
        Objects.equals(this.linkedObjectId, plannerNote.linkedObjectId) &&
        Objects.equals(this.linkedObjectType, plannerNote.linkedObjectType) &&
        Objects.equals(this.linkedObjectUrl, plannerNote.linkedObjectUrl) &&
        Objects.equals(this.title, plannerNote.title) &&
        Objects.equals(this.todoDate, plannerNote.todoDate) &&
        Objects.equals(this.userId, plannerNote.userId) &&
        Objects.equals(this.workflowState, plannerNote.workflowState);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(courseId, description, id, linkedObjectHtmlUrl, linkedObjectId, linkedObjectType, linkedObjectUrl, title, todoDate, userId, workflowState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlannerNote {\n");
    
    sb.append("    courseId: ").append(toIndentedString(courseId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    linkedObjectHtmlUrl: ").append(toIndentedString(linkedObjectHtmlUrl)).append("\n");
    sb.append("    linkedObjectId: ").append(toIndentedString(linkedObjectId)).append("\n");
    sb.append("    linkedObjectType: ").append(toIndentedString(linkedObjectType)).append("\n");
    sb.append("    linkedObjectUrl: ").append(toIndentedString(linkedObjectUrl)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    todoDate: ").append(toIndentedString(todoDate)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    workflowState: ").append(toIndentedString(workflowState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
