/*
 * canvas.instructure.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.instructure.canvas.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.math.BigDecimal;

/**
 * Generic statistics for all submissions for a quiz.
 */
@Schema(description = "Generic statistics for all submissions for a quiz.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-11-06T15:34:49.014533Z[Europe/London]")
public class QuizStatisticsSubmissionStatistics {

  @JsonProperty("correct_count_average")

  private BigDecimal correctCountAverage = null;

  @JsonProperty("duration_average")

  private BigDecimal durationAverage = null;

  @JsonProperty("incorrect_count_average")

  private BigDecimal incorrectCountAverage = null;

  @JsonProperty("score_average")

  private BigDecimal scoreAverage = null;

  @JsonProperty("score_high")

  private BigDecimal scoreHigh = null;

  @JsonProperty("score_low")

  private BigDecimal scoreLow = null;

  @JsonProperty("score_stdev")

  private BigDecimal scoreStdev = null;

  @JsonProperty("scores")

  private Object scores = null;

  @JsonProperty("unique_count")

  private Long uniqueCount = null;
  public QuizStatisticsSubmissionStatistics correctCountAverage(BigDecimal correctCountAverage) {
    this.correctCountAverage = correctCountAverage;
    return this;
  }

  

  /**
  * The mean of the number of questions answered correctly by each student.
  * @return correctCountAverage
  **/
  @Schema(example = "3.66666666666667", description = "The mean of the number of questions answered correctly by each student.")
  public BigDecimal getCorrectCountAverage() {
    return correctCountAverage;
  }
  public void setCorrectCountAverage(BigDecimal correctCountAverage) {
    this.correctCountAverage = correctCountAverage;
  }
  public QuizStatisticsSubmissionStatistics durationAverage(BigDecimal durationAverage) {
    this.durationAverage = durationAverage;
    return this;
  }

  

  /**
  * The average time spent by students while taking the quiz.
  * @return durationAverage
  **/
  @Schema(example = "42.333333333", description = "The average time spent by students while taking the quiz.")
  public BigDecimal getDurationAverage() {
    return durationAverage;
  }
  public void setDurationAverage(BigDecimal durationAverage) {
    this.durationAverage = durationAverage;
  }
  public QuizStatisticsSubmissionStatistics incorrectCountAverage(BigDecimal incorrectCountAverage) {
    this.incorrectCountAverage = incorrectCountAverage;
    return this;
  }

  

  /**
  * The mean of the number of questions answered incorrectly by each student.
  * @return incorrectCountAverage
  **/
  @Schema(example = "5.0", description = "The mean of the number of questions answered incorrectly by each student.")
  public BigDecimal getIncorrectCountAverage() {
    return incorrectCountAverage;
  }
  public void setIncorrectCountAverage(BigDecimal incorrectCountAverage) {
    this.incorrectCountAverage = incorrectCountAverage;
  }
  public QuizStatisticsSubmissionStatistics scoreAverage(BigDecimal scoreAverage) {
    this.scoreAverage = scoreAverage;
    return this;
  }

  

  /**
  * The mean of the student submission scores.
  * @return scoreAverage
  **/
  @Schema(example = "4.33333333333333", description = "The mean of the student submission scores.")
  public BigDecimal getScoreAverage() {
    return scoreAverage;
  }
  public void setScoreAverage(BigDecimal scoreAverage) {
    this.scoreAverage = scoreAverage;
  }
  public QuizStatisticsSubmissionStatistics scoreHigh(BigDecimal scoreHigh) {
    this.scoreHigh = scoreHigh;
    return this;
  }

  

  /**
  * The highest submission score.
  * @return scoreHigh
  **/
  @Schema(example = "6.0", description = "The highest submission score.")
  public BigDecimal getScoreHigh() {
    return scoreHigh;
  }
  public void setScoreHigh(BigDecimal scoreHigh) {
    this.scoreHigh = scoreHigh;
  }
  public QuizStatisticsSubmissionStatistics scoreLow(BigDecimal scoreLow) {
    this.scoreLow = scoreLow;
    return this;
  }

  

  /**
  * The lowest submission score.
  * @return scoreLow
  **/
  @Schema(example = "3.0", description = "The lowest submission score.")
  public BigDecimal getScoreLow() {
    return scoreLow;
  }
  public void setScoreLow(BigDecimal scoreLow) {
    this.scoreLow = scoreLow;
  }
  public QuizStatisticsSubmissionStatistics scoreStdev(BigDecimal scoreStdev) {
    this.scoreStdev = scoreStdev;
    return this;
  }

  

  /**
  * Standard deviation of the submission scores.
  * @return scoreStdev
  **/
  @Schema(example = "1.24721912892465", description = "Standard deviation of the submission scores.")
  public BigDecimal getScoreStdev() {
    return scoreStdev;
  }
  public void setScoreStdev(BigDecimal scoreStdev) {
    this.scoreStdev = scoreStdev;
  }
  public QuizStatisticsSubmissionStatistics scores(Object scores) {
    this.scores = scores;
    return this;
  }

  

  /**
  * A percentile distribution of the student scores, each key is the percentile (ranges between 0 and 100%) while the value is the number of students who received that score.
  * @return scores
  **/
  @Schema(example = "{\"34\":5,\"50\":1,\"100\":1}", description = "A percentile distribution of the student scores, each key is the percentile (ranges between 0 and 100%) while the value is the number of students who received that score.")
  public Object getScores() {
    return scores;
  }
  public void setScores(Object scores) {
    this.scores = scores;
  }
  public QuizStatisticsSubmissionStatistics uniqueCount(Long uniqueCount) {
    this.uniqueCount = uniqueCount;
    return this;
  }

  

  /**
  * The number of students who have taken the quiz.
  * @return uniqueCount
  **/
  @Schema(example = "3", description = "The number of students who have taken the quiz.")
  public Long getUniqueCount() {
    return uniqueCount;
  }
  public void setUniqueCount(Long uniqueCount) {
    this.uniqueCount = uniqueCount;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuizStatisticsSubmissionStatistics quizStatisticsSubmissionStatistics = (QuizStatisticsSubmissionStatistics) o;
    return Objects.equals(this.correctCountAverage, quizStatisticsSubmissionStatistics.correctCountAverage) &&
        Objects.equals(this.durationAverage, quizStatisticsSubmissionStatistics.durationAverage) &&
        Objects.equals(this.incorrectCountAverage, quizStatisticsSubmissionStatistics.incorrectCountAverage) &&
        Objects.equals(this.scoreAverage, quizStatisticsSubmissionStatistics.scoreAverage) &&
        Objects.equals(this.scoreHigh, quizStatisticsSubmissionStatistics.scoreHigh) &&
        Objects.equals(this.scoreLow, quizStatisticsSubmissionStatistics.scoreLow) &&
        Objects.equals(this.scoreStdev, quizStatisticsSubmissionStatistics.scoreStdev) &&
        Objects.equals(this.scores, quizStatisticsSubmissionStatistics.scores) &&
        Objects.equals(this.uniqueCount, quizStatisticsSubmissionStatistics.uniqueCount);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(correctCountAverage, durationAverage, incorrectCountAverage, scoreAverage, scoreHigh, scoreLow, scoreStdev, scores, uniqueCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuizStatisticsSubmissionStatistics {\n");
    
    sb.append("    correctCountAverage: ").append(toIndentedString(correctCountAverage)).append("\n");
    sb.append("    durationAverage: ").append(toIndentedString(durationAverage)).append("\n");
    sb.append("    incorrectCountAverage: ").append(toIndentedString(incorrectCountAverage)).append("\n");
    sb.append("    scoreAverage: ").append(toIndentedString(scoreAverage)).append("\n");
    sb.append("    scoreHigh: ").append(toIndentedString(scoreHigh)).append("\n");
    sb.append("    scoreLow: ").append(toIndentedString(scoreLow)).append("\n");
    sb.append("    scoreStdev: ").append(toIndentedString(scoreStdev)).append("\n");
    sb.append("    scores: ").append(toIndentedString(scores)).append("\n");
    sb.append("    uniqueCount: ").append(toIndentedString(uniqueCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
