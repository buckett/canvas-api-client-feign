/*
 * canvas.instructure.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.instructure.canvas.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;

/**
 * Migrator
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-11-06T15:34:49.014533Z[Europe/London]")
public class Migrator {

  @JsonProperty("name")

  private String name = null;

  @JsonProperty("required_settings")

  private List<String> requiredSettings = null;

  @JsonProperty("requires_file_upload")

  private Boolean requiresFileUpload = null;

  @JsonProperty("type")

  private String type = null;
  public Migrator name(String name) {
    this.name = name;
    return this;
  }

  

  /**
  * Description of the package type expected
  * @return name
  **/
  @Schema(example = "Common Cartridge 1.0/1.1/1.2 Package", description = "Description of the package type expected")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  public Migrator requiredSettings(List<String> requiredSettings) {
    this.requiredSettings = requiredSettings;
    return this;
  }

  public Migrator addRequiredSettingsItem(String requiredSettingsItem) {
    if (this.requiredSettings == null) {
      this.requiredSettings = new ArrayList<String>();
    }
    this.requiredSettings.add(requiredSettingsItem);
    return this;
  }

  /**
  * A list of fields this system requires
  * @return requiredSettings
  **/
  @Schema(example = "[source_course_id]", description = "A list of fields this system requires")
  public List<String> getRequiredSettings() {
    return requiredSettings;
  }
  public void setRequiredSettings(List<String> requiredSettings) {
    this.requiredSettings = requiredSettings;
  }
  public Migrator requiresFileUpload(Boolean requiresFileUpload) {
    this.requiresFileUpload = requiresFileUpload;
    return this;
  }

  

  /**
  * Whether this endpoint requires a file upload
  * @return requiresFileUpload
  **/
  @Schema(example = "true", description = "Whether this endpoint requires a file upload")
  public Boolean isRequiresFileUpload() {
    return requiresFileUpload;
  }
  public void setRequiresFileUpload(Boolean requiresFileUpload) {
    this.requiresFileUpload = requiresFileUpload;
  }
  public Migrator type(String type) {
    this.type = type;
    return this;
  }

  

  /**
  * The value to pass to the create endpoint
  * @return type
  **/
  @Schema(example = "common_cartridge_importer", description = "The value to pass to the create endpoint")
  public String getType() {
    return type;
  }
  public void setType(String type) {
    this.type = type;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Migrator migrator = (Migrator) o;
    return Objects.equals(this.name, migrator.name) &&
        Objects.equals(this.requiredSettings, migrator.requiredSettings) &&
        Objects.equals(this.requiresFileUpload, migrator.requiresFileUpload) &&
        Objects.equals(this.type, migrator.type);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(name, requiredSettings, requiresFileUpload, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Migrator {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    requiredSettings: ").append(toIndentedString(requiredSettings)).append("\n");
    sb.append("    requiresFileUpload: ").append(toIndentedString(requiresFileUpload)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
