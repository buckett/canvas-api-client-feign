/*
 * canvas.instructure.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.instructure.canvas.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;

/**
 * Describes the copyright and license information for a File
 */
@Schema(description = "Describes the copyright and license information for a File")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-11-06T15:34:49.014533Z[Europe/London]")
public class UsageRights {

  @JsonProperty("file_ids")

  private List<Integer> fileIds = null;

  @JsonProperty("legal_copyright")

  private String legalCopyright = null;

  @JsonProperty("license")

  private String license = null;

  @JsonProperty("license_name")

  private String licenseName = null;

  @JsonProperty("message")

  private String message = null;

  @JsonProperty("use_justification")

  private String useJustification = null;
  public UsageRights fileIds(List<Integer> fileIds) {
    this.fileIds = fileIds;
    return this;
  }

  public UsageRights addFileIdsItem(Integer fileIdsItem) {
    if (this.fileIds == null) {
      this.fileIds = new ArrayList<Integer>();
    }
    this.fileIds.add(fileIdsItem);
    return this;
  }

  /**
  * List of ids of files that were updated
  * @return fileIds
  **/
  @Schema(example = "[1, 2, 3]", description = "List of ids of files that were updated")
  public List<Integer> getFileIds() {
    return fileIds;
  }
  public void setFileIds(List<Integer> fileIds) {
    this.fileIds = fileIds;
  }
  public UsageRights legalCopyright(String legalCopyright) {
    this.legalCopyright = legalCopyright;
    return this;
  }

  

  /**
  * Copyright line for the file
  * @return legalCopyright
  **/
  @Schema(example = "(C) 2014 Incom Corporation Ltd", description = "Copyright line for the file")
  public String getLegalCopyright() {
    return legalCopyright;
  }
  public void setLegalCopyright(String legalCopyright) {
    this.legalCopyright = legalCopyright;
  }
  public UsageRights license(String license) {
    this.license = license;
    return this;
  }

  

  /**
  * License identifier for the file.
  * @return license
  **/
  @Schema(example = "cc_by_sa", description = "License identifier for the file.")
  public String getLicense() {
    return license;
  }
  public void setLicense(String license) {
    this.license = license;
  }
  public UsageRights licenseName(String licenseName) {
    this.licenseName = licenseName;
    return this;
  }

  

  /**
  * Readable license name
  * @return licenseName
  **/
  @Schema(example = "CC Attribution Share-Alike", description = "Readable license name")
  public String getLicenseName() {
    return licenseName;
  }
  public void setLicenseName(String licenseName) {
    this.licenseName = licenseName;
  }
  public UsageRights message(String message) {
    this.message = message;
    return this;
  }

  

  /**
  * Explanation of the action performed
  * @return message
  **/
  @Schema(example = "4 files updated", description = "Explanation of the action performed")
  public String getMessage() {
    return message;
  }
  public void setMessage(String message) {
    this.message = message;
  }
  public UsageRights useJustification(String useJustification) {
    this.useJustification = useJustification;
    return this;
  }

  

  /**
  * Justification for using the file in a Canvas course. Valid values are &#x27;own_copyright&#x27;, &#x27;public_domain&#x27;, &#x27;used_by_permission&#x27;, &#x27;fair_use&#x27;, &#x27;creative_commons&#x27;
  * @return useJustification
  **/
  @Schema(example = "creative_commons", description = "Justification for using the file in a Canvas course. Valid values are 'own_copyright', 'public_domain', 'used_by_permission', 'fair_use', 'creative_commons'")
  public String getUseJustification() {
    return useJustification;
  }
  public void setUseJustification(String useJustification) {
    this.useJustification = useJustification;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsageRights usageRights = (UsageRights) o;
    return Objects.equals(this.fileIds, usageRights.fileIds) &&
        Objects.equals(this.legalCopyright, usageRights.legalCopyright) &&
        Objects.equals(this.license, usageRights.license) &&
        Objects.equals(this.licenseName, usageRights.licenseName) &&
        Objects.equals(this.message, usageRights.message) &&
        Objects.equals(this.useJustification, usageRights.useJustification);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(fileIds, legalCopyright, license, licenseName, message, useJustification);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsageRights {\n");
    
    sb.append("    fileIds: ").append(toIndentedString(fileIds)).append("\n");
    sb.append("    legalCopyright: ").append(toIndentedString(legalCopyright)).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    licenseName: ").append(toIndentedString(licenseName)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    useJustification: ").append(toIndentedString(useJustification)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
