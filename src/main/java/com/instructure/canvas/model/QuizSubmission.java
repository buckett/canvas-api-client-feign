/*
 * canvas.instructure.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.instructure.canvas.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.OffsetDateTime;

/**
 * QuizSubmission
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-11-06T15:34:49.014533Z[Europe/London]")
public class QuizSubmission {

  @JsonProperty("attempt")

  private Long attempt = null;

  @JsonProperty("end_at")

  private OffsetDateTime endAt = null;

  @JsonProperty("extra_attempts")

  private Long extraAttempts = null;

  @JsonProperty("extra_time")

  private Long extraTime = null;

  @JsonProperty("finished_at")

  private OffsetDateTime finishedAt = null;

  @JsonProperty("fudge_points")

  private Long fudgePoints = null;

  @JsonProperty("has_seen_results")

  private Boolean hasSeenResults = null;

  @JsonProperty("id")

  private Long id = null;

  @JsonProperty("kept_score")

  private Long keptScore = null;

  @JsonProperty("manually_unlocked")

  private Boolean manuallyUnlocked = null;

  @JsonProperty("overdue_and_needs_submission")

  private Boolean overdueAndNeedsSubmission = null;

  @JsonProperty("quiz_id")

  private Long quizId = null;

  @JsonProperty("score")

  private Long score = null;

  @JsonProperty("score_before_regrade")

  private Long scoreBeforeRegrade = null;

  @JsonProperty("started_at")

  private OffsetDateTime startedAt = null;

  @JsonProperty("submission_id")

  private Long submissionId = null;

  @JsonProperty("time_spent")

  private Long timeSpent = null;

  @JsonProperty("user_id")

  private Long userId = null;

  @JsonProperty("workflow_state")

  private String workflowState = null;
  public QuizSubmission attempt(Long attempt) {
    this.attempt = attempt;
    return this;
  }

  

  /**
  * For quizzes that allow multiple attempts, this field specifies the quiz submission attempt number.
  * @return attempt
  **/
  @Schema(example = "3", description = "For quizzes that allow multiple attempts, this field specifies the quiz submission attempt number.")
  public Long getAttempt() {
    return attempt;
  }
  public void setAttempt(Long attempt) {
    this.attempt = attempt;
  }
  public QuizSubmission endAt(OffsetDateTime endAt) {
    this.endAt = endAt;
    return this;
  }

  

  /**
  * The time at which the quiz submission will be overdue, and be flagged as a late submission.
  * @return endAt
  **/
  @Schema(description = "The time at which the quiz submission will be overdue, and be flagged as a late submission.")
  public OffsetDateTime getEndAt() {
    return endAt;
  }
  public void setEndAt(OffsetDateTime endAt) {
    this.endAt = endAt;
  }
  public QuizSubmission extraAttempts(Long extraAttempts) {
    this.extraAttempts = extraAttempts;
    return this;
  }

  

  /**
  * Number of times the student was allowed to re-take the quiz over the multiple-attempt limit.
  * @return extraAttempts
  **/
  @Schema(example = "1", description = "Number of times the student was allowed to re-take the quiz over the multiple-attempt limit.")
  public Long getExtraAttempts() {
    return extraAttempts;
  }
  public void setExtraAttempts(Long extraAttempts) {
    this.extraAttempts = extraAttempts;
  }
  public QuizSubmission extraTime(Long extraTime) {
    this.extraTime = extraTime;
    return this;
  }

  

  /**
  * Amount of extra time allowed for the quiz submission, in minutes.
  * @return extraTime
  **/
  @Schema(example = "60", description = "Amount of extra time allowed for the quiz submission, in minutes.")
  public Long getExtraTime() {
    return extraTime;
  }
  public void setExtraTime(Long extraTime) {
    this.extraTime = extraTime;
  }
  public QuizSubmission finishedAt(OffsetDateTime finishedAt) {
    this.finishedAt = finishedAt;
    return this;
  }

  

  /**
  * The time at which the student submitted the quiz submission.
  * @return finishedAt
  **/
  @Schema(description = "The time at which the student submitted the quiz submission.")
  public OffsetDateTime getFinishedAt() {
    return finishedAt;
  }
  public void setFinishedAt(OffsetDateTime finishedAt) {
    this.finishedAt = finishedAt;
  }
  public QuizSubmission fudgePoints(Long fudgePoints) {
    this.fudgePoints = fudgePoints;
    return this;
  }

  

  /**
  * Number of points the quiz submission&#x27;s score was fudged by.
  * @return fudgePoints
  **/
  @Schema(example = "1", description = "Number of points the quiz submission's score was fudged by.")
  public Long getFudgePoints() {
    return fudgePoints;
  }
  public void setFudgePoints(Long fudgePoints) {
    this.fudgePoints = fudgePoints;
  }
  public QuizSubmission hasSeenResults(Boolean hasSeenResults) {
    this.hasSeenResults = hasSeenResults;
    return this;
  }

  

  /**
  * Whether the student has viewed their results to the quiz.
  * @return hasSeenResults
  **/
  @Schema(example = "true", description = "Whether the student has viewed their results to the quiz.")
  public Boolean isHasSeenResults() {
    return hasSeenResults;
  }
  public void setHasSeenResults(Boolean hasSeenResults) {
    this.hasSeenResults = hasSeenResults;
  }
  public QuizSubmission id(Long id) {
    this.id = id;
    return this;
  }

  

  /**
  * The ID of the quiz submission.
  * @return id
  **/
  @Schema(example = "1", required = true, description = "The ID of the quiz submission.")
  public Long getId() {
    return id;
  }
  public void setId(Long id) {
    this.id = id;
  }
  public QuizSubmission keptScore(Long keptScore) {
    this.keptScore = keptScore;
    return this;
  }

  

  /**
  * For quizzes that allow multiple attempts, this is the score that will be used, which might be the score of the latest, or the highest, quiz submission.
  * @return keptScore
  **/
  @Schema(example = "5", description = "For quizzes that allow multiple attempts, this is the score that will be used, which might be the score of the latest, or the highest, quiz submission.")
  public Long getKeptScore() {
    return keptScore;
  }
  public void setKeptScore(Long keptScore) {
    this.keptScore = keptScore;
  }
  public QuizSubmission manuallyUnlocked(Boolean manuallyUnlocked) {
    this.manuallyUnlocked = manuallyUnlocked;
    return this;
  }

  

  /**
  * The student can take the quiz even if it&#x27;s locked for everyone else
  * @return manuallyUnlocked
  **/
  @Schema(example = "true", description = "The student can take the quiz even if it's locked for everyone else")
  public Boolean isManuallyUnlocked() {
    return manuallyUnlocked;
  }
  public void setManuallyUnlocked(Boolean manuallyUnlocked) {
    this.manuallyUnlocked = manuallyUnlocked;
  }
  public QuizSubmission overdueAndNeedsSubmission(Boolean overdueAndNeedsSubmission) {
    this.overdueAndNeedsSubmission = overdueAndNeedsSubmission;
    return this;
  }

  

  /**
  * Indicates whether the quiz submission is overdue and needs submission
  * @return overdueAndNeedsSubmission
  **/
  @Schema(example = "false", description = "Indicates whether the quiz submission is overdue and needs submission")
  public Boolean isOverdueAndNeedsSubmission() {
    return overdueAndNeedsSubmission;
  }
  public void setOverdueAndNeedsSubmission(Boolean overdueAndNeedsSubmission) {
    this.overdueAndNeedsSubmission = overdueAndNeedsSubmission;
  }
  public QuizSubmission quizId(Long quizId) {
    this.quizId = quizId;
    return this;
  }

  

  /**
  * The ID of the Quiz the quiz submission belongs to.
  * @return quizId
  **/
  @Schema(example = "2", required = true, description = "The ID of the Quiz the quiz submission belongs to.")
  public Long getQuizId() {
    return quizId;
  }
  public void setQuizId(Long quizId) {
    this.quizId = quizId;
  }
  public QuizSubmission score(Long score) {
    this.score = score;
    return this;
  }

  

  /**
  * The score of the quiz submission, if graded.
  * @return score
  **/
  @Schema(example = "3", description = "The score of the quiz submission, if graded.")
  public Long getScore() {
    return score;
  }
  public void setScore(Long score) {
    this.score = score;
  }
  public QuizSubmission scoreBeforeRegrade(Long scoreBeforeRegrade) {
    this.scoreBeforeRegrade = scoreBeforeRegrade;
    return this;
  }

  

  /**
  * The original score of the quiz submission prior to any re-grading.
  * @return scoreBeforeRegrade
  **/
  @Schema(example = "2", description = "The original score of the quiz submission prior to any re-grading.")
  public Long getScoreBeforeRegrade() {
    return scoreBeforeRegrade;
  }
  public void setScoreBeforeRegrade(Long scoreBeforeRegrade) {
    this.scoreBeforeRegrade = scoreBeforeRegrade;
  }
  public QuizSubmission startedAt(OffsetDateTime startedAt) {
    this.startedAt = startedAt;
    return this;
  }

  

  /**
  * The time at which the student started the quiz submission.
  * @return startedAt
  **/
  @Schema(description = "The time at which the student started the quiz submission.")
  public OffsetDateTime getStartedAt() {
    return startedAt;
  }
  public void setStartedAt(OffsetDateTime startedAt) {
    this.startedAt = startedAt;
  }
  public QuizSubmission submissionId(Long submissionId) {
    this.submissionId = submissionId;
    return this;
  }

  

  /**
  * The ID of the Submission the quiz submission represents.
  * @return submissionId
  **/
  @Schema(example = "1", description = "The ID of the Submission the quiz submission represents.")
  public Long getSubmissionId() {
    return submissionId;
  }
  public void setSubmissionId(Long submissionId) {
    this.submissionId = submissionId;
  }
  public QuizSubmission timeSpent(Long timeSpent) {
    this.timeSpent = timeSpent;
    return this;
  }

  

  /**
  * Amount of time spent, in seconds.
  * @return timeSpent
  **/
  @Schema(example = "300", description = "Amount of time spent, in seconds.")
  public Long getTimeSpent() {
    return timeSpent;
  }
  public void setTimeSpent(Long timeSpent) {
    this.timeSpent = timeSpent;
  }
  public QuizSubmission userId(Long userId) {
    this.userId = userId;
    return this;
  }

  

  /**
  * The ID of the Student that made the quiz submission.
  * @return userId
  **/
  @Schema(example = "3", description = "The ID of the Student that made the quiz submission.")
  public Long getUserId() {
    return userId;
  }
  public void setUserId(Long userId) {
    this.userId = userId;
  }
  public QuizSubmission workflowState(String workflowState) {
    this.workflowState = workflowState;
    return this;
  }

  

  /**
  * The current state of the quiz submission. Possible values: [&#x27;untaken&#x27;|&#x27;pending_review&#x27;|&#x27;complete&#x27;|&#x27;settings_only&#x27;|&#x27;preview&#x27;].
  * @return workflowState
  **/
  @Schema(example = "untaken", description = "The current state of the quiz submission. Possible values: ['untaken'|'pending_review'|'complete'|'settings_only'|'preview'].")
  public String getWorkflowState() {
    return workflowState;
  }
  public void setWorkflowState(String workflowState) {
    this.workflowState = workflowState;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuizSubmission quizSubmission = (QuizSubmission) o;
    return Objects.equals(this.attempt, quizSubmission.attempt) &&
        Objects.equals(this.endAt, quizSubmission.endAt) &&
        Objects.equals(this.extraAttempts, quizSubmission.extraAttempts) &&
        Objects.equals(this.extraTime, quizSubmission.extraTime) &&
        Objects.equals(this.finishedAt, quizSubmission.finishedAt) &&
        Objects.equals(this.fudgePoints, quizSubmission.fudgePoints) &&
        Objects.equals(this.hasSeenResults, quizSubmission.hasSeenResults) &&
        Objects.equals(this.id, quizSubmission.id) &&
        Objects.equals(this.keptScore, quizSubmission.keptScore) &&
        Objects.equals(this.manuallyUnlocked, quizSubmission.manuallyUnlocked) &&
        Objects.equals(this.overdueAndNeedsSubmission, quizSubmission.overdueAndNeedsSubmission) &&
        Objects.equals(this.quizId, quizSubmission.quizId) &&
        Objects.equals(this.score, quizSubmission.score) &&
        Objects.equals(this.scoreBeforeRegrade, quizSubmission.scoreBeforeRegrade) &&
        Objects.equals(this.startedAt, quizSubmission.startedAt) &&
        Objects.equals(this.submissionId, quizSubmission.submissionId) &&
        Objects.equals(this.timeSpent, quizSubmission.timeSpent) &&
        Objects.equals(this.userId, quizSubmission.userId) &&
        Objects.equals(this.workflowState, quizSubmission.workflowState);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(attempt, endAt, extraAttempts, extraTime, finishedAt, fudgePoints, hasSeenResults, id, keptScore, manuallyUnlocked, overdueAndNeedsSubmission, quizId, score, scoreBeforeRegrade, startedAt, submissionId, timeSpent, userId, workflowState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuizSubmission {\n");
    
    sb.append("    attempt: ").append(toIndentedString(attempt)).append("\n");
    sb.append("    endAt: ").append(toIndentedString(endAt)).append("\n");
    sb.append("    extraAttempts: ").append(toIndentedString(extraAttempts)).append("\n");
    sb.append("    extraTime: ").append(toIndentedString(extraTime)).append("\n");
    sb.append("    finishedAt: ").append(toIndentedString(finishedAt)).append("\n");
    sb.append("    fudgePoints: ").append(toIndentedString(fudgePoints)).append("\n");
    sb.append("    hasSeenResults: ").append(toIndentedString(hasSeenResults)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    keptScore: ").append(toIndentedString(keptScore)).append("\n");
    sb.append("    manuallyUnlocked: ").append(toIndentedString(manuallyUnlocked)).append("\n");
    sb.append("    overdueAndNeedsSubmission: ").append(toIndentedString(overdueAndNeedsSubmission)).append("\n");
    sb.append("    quizId: ").append(toIndentedString(quizId)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    scoreBeforeRegrade: ").append(toIndentedString(scoreBeforeRegrade)).append("\n");
    sb.append("    startedAt: ").append(toIndentedString(startedAt)).append("\n");
    sb.append("    submissionId: ").append(toIndentedString(submissionId)).append("\n");
    sb.append("    timeSpent: ").append(toIndentedString(timeSpent)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    workflowState: ").append(toIndentedString(workflowState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
