/*
 * canvas.instructure.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.instructure.canvas.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.instructure.canvas.model.LockInfo;
import com.instructure.canvas.model.User;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.OffsetDateTime;

/**
 * Page
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-11-06T15:34:49.014533Z[Europe/London]")
public class Page {

  @JsonProperty("body")

  private String body = null;

  @JsonProperty("created_at")

  private OffsetDateTime createdAt = null;

  @JsonProperty("editing_roles")

  private String editingRoles = null;

  @JsonProperty("front_page")

  private Boolean frontPage = null;

  @JsonProperty("hide_from_students")

  private Boolean hideFromStudents = null;

  @JsonProperty("last_edited_by")

  private User lastEditedBy = null;

  @JsonProperty("lock_explanation")

  private String lockExplanation = null;

  @JsonProperty("lock_info")

  private LockInfo lockInfo = null;

  @JsonProperty("locked_for_user")

  private Boolean lockedForUser = null;

  @JsonProperty("published")

  private Boolean published = null;

  @JsonProperty("title")

  private String title = null;

  @JsonProperty("updated_at")

  private OffsetDateTime updatedAt = null;

  @JsonProperty("url")

  private String url = null;
  public Page body(String body) {
    this.body = body;
    return this;
  }

  

  /**
  * the page content, in HTML (present when requesting a single page; omitted when listing pages)
  * @return body
  **/
  @Schema(example = "<p>Page Content</p>", description = "the page content, in HTML (present when requesting a single page; omitted when listing pages)")
  public String getBody() {
    return body;
  }
  public void setBody(String body) {
    this.body = body;
  }
  public Page createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  

  /**
  * the creation date for the page
  * @return createdAt
  **/
  @Schema(description = "the creation date for the page")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }
  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }
  public Page editingRoles(String editingRoles) {
    this.editingRoles = editingRoles;
    return this;
  }

  

  /**
  * roles allowed to edit the page; comma-separated list comprising a combination of &#x27;teachers&#x27;, &#x27;students&#x27;, &#x27;members&#x27;, and/or &#x27;public&#x27; if not supplied, course defaults are used
  * @return editingRoles
  **/
  @Schema(example = "teachers,students", description = "roles allowed to edit the page; comma-separated list comprising a combination of 'teachers', 'students', 'members', and/or 'public' if not supplied, course defaults are used")
  public String getEditingRoles() {
    return editingRoles;
  }
  public void setEditingRoles(String editingRoles) {
    this.editingRoles = editingRoles;
  }
  public Page frontPage(Boolean frontPage) {
    this.frontPage = frontPage;
    return this;
  }

  

  /**
  * whether this page is the front page for the wiki
  * @return frontPage
  **/
  @Schema(example = "false", description = "whether this page is the front page for the wiki")
  public Boolean isFrontPage() {
    return frontPage;
  }
  public void setFrontPage(Boolean frontPage) {
    this.frontPage = frontPage;
  }
  public Page hideFromStudents(Boolean hideFromStudents) {
    this.hideFromStudents = hideFromStudents;
    return this;
  }

  

  /**
  * (DEPRECATED) whether this page is hidden from students (note: this is always reflected as the inverse of the published value)
  * @return hideFromStudents
  **/
  @Schema(example = "false", description = "(DEPRECATED) whether this page is hidden from students (note: this is always reflected as the inverse of the published value)")
  public Boolean isHideFromStudents() {
    return hideFromStudents;
  }
  public void setHideFromStudents(Boolean hideFromStudents) {
    this.hideFromStudents = hideFromStudents;
  }
  public Page lastEditedBy(User lastEditedBy) {
    this.lastEditedBy = lastEditedBy;
    return this;
  }

  

  /**
  * Get lastEditedBy
  * @return lastEditedBy
  **/
  @Schema(description = "")
  public User getLastEditedBy() {
    return lastEditedBy;
  }
  public void setLastEditedBy(User lastEditedBy) {
    this.lastEditedBy = lastEditedBy;
  }
  public Page lockExplanation(String lockExplanation) {
    this.lockExplanation = lockExplanation;
    return this;
  }

  

  /**
  * (Optional) An explanation of why this is locked for the user. Present when locked_for_user is true.
  * @return lockExplanation
  **/
  @Schema(example = "This page is locked until September 1 at 12:00am", description = "(Optional) An explanation of why this is locked for the user. Present when locked_for_user is true.")
  public String getLockExplanation() {
    return lockExplanation;
  }
  public void setLockExplanation(String lockExplanation) {
    this.lockExplanation = lockExplanation;
  }
  public Page lockInfo(LockInfo lockInfo) {
    this.lockInfo = lockInfo;
    return this;
  }

  

  /**
  * Get lockInfo
  * @return lockInfo
  **/
  @Schema(description = "")
  public LockInfo getLockInfo() {
    return lockInfo;
  }
  public void setLockInfo(LockInfo lockInfo) {
    this.lockInfo = lockInfo;
  }
  public Page lockedForUser(Boolean lockedForUser) {
    this.lockedForUser = lockedForUser;
    return this;
  }

  

  /**
  * Whether or not this is locked for the user.
  * @return lockedForUser
  **/
  @Schema(example = "false", description = "Whether or not this is locked for the user.")
  public Boolean isLockedForUser() {
    return lockedForUser;
  }
  public void setLockedForUser(Boolean lockedForUser) {
    this.lockedForUser = lockedForUser;
  }
  public Page published(Boolean published) {
    this.published = published;
    return this;
  }

  

  /**
  * whether the page is published (true) or draft state (false).
  * @return published
  **/
  @Schema(example = "true", description = "whether the page is published (true) or draft state (false).")
  public Boolean isPublished() {
    return published;
  }
  public void setPublished(Boolean published) {
    this.published = published;
  }
  public Page title(String title) {
    this.title = title;
    return this;
  }

  

  /**
  * the title of the page
  * @return title
  **/
  @Schema(example = "My Page Title", description = "the title of the page")
  public String getTitle() {
    return title;
  }
  public void setTitle(String title) {
    this.title = title;
  }
  public Page updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  

  /**
  * the date the page was last updated
  * @return updatedAt
  **/
  @Schema(description = "the date the page was last updated")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }
  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }
  public Page url(String url) {
    this.url = url;
    return this;
  }

  

  /**
  * the unique locator for the page
  * @return url
  **/
  @Schema(example = "my-page-title", description = "the unique locator for the page")
  public String getUrl() {
    return url;
  }
  public void setUrl(String url) {
    this.url = url;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Page page = (Page) o;
    return Objects.equals(this.body, page.body) &&
        Objects.equals(this.createdAt, page.createdAt) &&
        Objects.equals(this.editingRoles, page.editingRoles) &&
        Objects.equals(this.frontPage, page.frontPage) &&
        Objects.equals(this.hideFromStudents, page.hideFromStudents) &&
        Objects.equals(this.lastEditedBy, page.lastEditedBy) &&
        Objects.equals(this.lockExplanation, page.lockExplanation) &&
        Objects.equals(this.lockInfo, page.lockInfo) &&
        Objects.equals(this.lockedForUser, page.lockedForUser) &&
        Objects.equals(this.published, page.published) &&
        Objects.equals(this.title, page.title) &&
        Objects.equals(this.updatedAt, page.updatedAt) &&
        Objects.equals(this.url, page.url);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(body, createdAt, editingRoles, frontPage, hideFromStudents, lastEditedBy, lockExplanation, lockInfo, lockedForUser, published, title, updatedAt, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Page {\n");
    
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    editingRoles: ").append(toIndentedString(editingRoles)).append("\n");
    sb.append("    frontPage: ").append(toIndentedString(frontPage)).append("\n");
    sb.append("    hideFromStudents: ").append(toIndentedString(hideFromStudents)).append("\n");
    sb.append("    lastEditedBy: ").append(toIndentedString(lastEditedBy)).append("\n");
    sb.append("    lockExplanation: ").append(toIndentedString(lockExplanation)).append("\n");
    sb.append("    lockInfo: ").append(toIndentedString(lockInfo)).append("\n");
    sb.append("    lockedForUser: ").append(toIndentedString(lockedForUser)).append("\n");
    sb.append("    published: ").append(toIndentedString(published)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
