/*
 * canvas.instructure.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.instructure.canvas.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.instructure.canvas.model.AssignmentDate;
import com.instructure.canvas.model.LockInfo;
import com.instructure.canvas.model.QuizPermissions;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * Quiz
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-11-06T15:34:49.014533Z[Europe/London]")
public class Quiz {

  @JsonProperty("access_code")

  private String accessCode = null;

  @JsonProperty("all_dates")

  private List<AssignmentDate> allDates = null;

  @JsonProperty("allowed_attempts")

  private Integer allowedAttempts = null;

  @JsonProperty("anonymous_submissions")

  private Boolean anonymousSubmissions = null;

  @JsonProperty("assignment_group_id")

  private Integer assignmentGroupId = null;

  @JsonProperty("cant_go_back")

  private Boolean cantGoBack = null;

  @JsonProperty("description")

  private String description = null;

  @JsonProperty("due_at")

  private OffsetDateTime dueAt = null;

  @JsonProperty("hide_correct_answers_at")

  private OffsetDateTime hideCorrectAnswersAt = null;

  @JsonProperty("hide_results")

  private String hideResults = null;

  @JsonProperty("html_url")

  private String htmlUrl = null;

  @JsonProperty("id")

  private Integer id = null;

  @JsonProperty("ip_filter")

  private String ipFilter = null;

  @JsonProperty("lock_at")

  private OffsetDateTime lockAt = null;

  @JsonProperty("lock_explanation")

  private String lockExplanation = null;

  @JsonProperty("lock_info")

  private LockInfo lockInfo = null;

  @JsonProperty("locked_for_user")

  private Boolean lockedForUser = null;

  @JsonProperty("mobile_url")

  private String mobileUrl = null;

  @JsonProperty("one_question_at_a_time")

  private Boolean oneQuestionAtATime = null;

  @JsonProperty("one_time_results")

  private Boolean oneTimeResults = null;

  @JsonProperty("permissions")

  private QuizPermissions permissions = null;

  @JsonProperty("points_possible")

  private Integer pointsPossible = null;

  @JsonProperty("preview_url")

  private String previewUrl = null;

  @JsonProperty("published")

  private Boolean published = null;

  @JsonProperty("question_count")

  private Integer questionCount = null;

  @JsonProperty("question_types")

  private List<String> questionTypes = null;

  @JsonProperty("quiz_extensions_url")

  private String quizExtensionsUrl = null;

  @JsonProperty("quiz_type")

  private String quizType = null;

  @JsonProperty("scoring_policy")

  private String scoringPolicy = null;

  @JsonProperty("show_correct_answers")

  private Boolean showCorrectAnswers = null;

  @JsonProperty("show_correct_answers_at")

  private OffsetDateTime showCorrectAnswersAt = null;

  @JsonProperty("show_correct_answers_last_attempt")

  private Boolean showCorrectAnswersLastAttempt = null;

  @JsonProperty("shuffle_answers")

  private Boolean shuffleAnswers = null;

  @JsonProperty("speedgrader_url")

  private String speedgraderUrl = null;

  @JsonProperty("time_limit")

  private Integer timeLimit = null;

  @JsonProperty("title")

  private String title = null;

  @JsonProperty("unlock_at")

  private OffsetDateTime unlockAt = null;

  @JsonProperty("unpublishable")

  private Boolean unpublishable = null;

  @JsonProperty("version_number")

  private Integer versionNumber = null;
  public Quiz accessCode(String accessCode) {
    this.accessCode = accessCode;
    return this;
  }

  

  /**
  * access code to restrict quiz access
  * @return accessCode
  **/
  @Schema(example = "2beornot2be", description = "access code to restrict quiz access")
  public String getAccessCode() {
    return accessCode;
  }
  public void setAccessCode(String accessCode) {
    this.accessCode = accessCode;
  }
  public Quiz allDates(List<AssignmentDate> allDates) {
    this.allDates = allDates;
    return this;
  }

  public Quiz addAllDatesItem(AssignmentDate allDatesItem) {
    if (this.allDates == null) {
      this.allDates = new ArrayList<AssignmentDate>();
    }
    this.allDates.add(allDatesItem);
    return this;
  }

  /**
  * list of due dates for the quiz
  * @return allDates
  **/
  @Schema(description = "list of due dates for the quiz")
  public List<AssignmentDate> getAllDates() {
    return allDates;
  }
  public void setAllDates(List<AssignmentDate> allDates) {
    this.allDates = allDates;
  }
  public Quiz allowedAttempts(Integer allowedAttempts) {
    this.allowedAttempts = allowedAttempts;
    return this;
  }

  

  /**
  * how many times a student can take the quiz -1 &#x3D; unlimited attempts
  * @return allowedAttempts
  **/
  @Schema(example = "3", description = "how many times a student can take the quiz -1 = unlimited attempts")
  public Integer getAllowedAttempts() {
    return allowedAttempts;
  }
  public void setAllowedAttempts(Integer allowedAttempts) {
    this.allowedAttempts = allowedAttempts;
  }
  public Quiz anonymousSubmissions(Boolean anonymousSubmissions) {
    this.anonymousSubmissions = anonymousSubmissions;
    return this;
  }

  

  /**
  * Whether survey submissions will be kept anonymous (only applicable to &#x27;graded_survey&#x27;, &#x27;survey&#x27; quiz types)
  * @return anonymousSubmissions
  **/
  @Schema(example = "false", description = "Whether survey submissions will be kept anonymous (only applicable to 'graded_survey', 'survey' quiz types)")
  public Boolean isAnonymousSubmissions() {
    return anonymousSubmissions;
  }
  public void setAnonymousSubmissions(Boolean anonymousSubmissions) {
    this.anonymousSubmissions = anonymousSubmissions;
  }
  public Quiz assignmentGroupId(Integer assignmentGroupId) {
    this.assignmentGroupId = assignmentGroupId;
    return this;
  }

  

  /**
  * the ID of the quiz&#x27;s assignment group:
  * @return assignmentGroupId
  **/
  @Schema(example = "3", description = "the ID of the quiz's assignment group:")
  public Integer getAssignmentGroupId() {
    return assignmentGroupId;
  }
  public void setAssignmentGroupId(Integer assignmentGroupId) {
    this.assignmentGroupId = assignmentGroupId;
  }
  public Quiz cantGoBack(Boolean cantGoBack) {
    this.cantGoBack = cantGoBack;
    return this;
  }

  

  /**
  * lock questions after answering? only valid if one_question_at_a_time&#x3D;true
  * @return cantGoBack
  **/
  @Schema(example = "false", description = "lock questions after answering? only valid if one_question_at_a_time=true")
  public Boolean isCantGoBack() {
    return cantGoBack;
  }
  public void setCantGoBack(Boolean cantGoBack) {
    this.cantGoBack = cantGoBack;
  }
  public Quiz description(String description) {
    this.description = description;
    return this;
  }

  

  /**
  * the description of the quiz
  * @return description
  **/
  @Schema(example = "This is a quiz on Act 3 of Hamlet", description = "the description of the quiz")
  public String getDescription() {
    return description;
  }
  public void setDescription(String description) {
    this.description = description;
  }
  public Quiz dueAt(OffsetDateTime dueAt) {
    this.dueAt = dueAt;
    return this;
  }

  

  /**
  * when the quiz is due
  * @return dueAt
  **/
  @Schema(description = "when the quiz is due")
  public OffsetDateTime getDueAt() {
    return dueAt;
  }
  public void setDueAt(OffsetDateTime dueAt) {
    this.dueAt = dueAt;
  }
  public Quiz hideCorrectAnswersAt(OffsetDateTime hideCorrectAnswersAt) {
    this.hideCorrectAnswersAt = hideCorrectAnswersAt;
    return this;
  }

  

  /**
  * prevent the students from seeing correct answers after the specified date has passed. only valid if show_correct_answers&#x3D;true
  * @return hideCorrectAnswersAt
  **/
  @Schema(description = "prevent the students from seeing correct answers after the specified date has passed. only valid if show_correct_answers=true")
  public OffsetDateTime getHideCorrectAnswersAt() {
    return hideCorrectAnswersAt;
  }
  public void setHideCorrectAnswersAt(OffsetDateTime hideCorrectAnswersAt) {
    this.hideCorrectAnswersAt = hideCorrectAnswersAt;
  }
  public Quiz hideResults(String hideResults) {
    this.hideResults = hideResults;
    return this;
  }

  

  /**
  * let students see their quiz responses? possible values: null, &#x27;always&#x27;, &#x27;until_after_last_attempt&#x27;
  * @return hideResults
  **/
  @Schema(example = "always", description = "let students see their quiz responses? possible values: null, 'always', 'until_after_last_attempt'")
  public String getHideResults() {
    return hideResults;
  }
  public void setHideResults(String hideResults) {
    this.hideResults = hideResults;
  }
  public Quiz htmlUrl(String htmlUrl) {
    this.htmlUrl = htmlUrl;
    return this;
  }

  

  /**
  * the HTTP/HTTPS URL to the quiz
  * @return htmlUrl
  **/
  @Schema(example = "http://canvas.example.edu/courses/1/quizzes/2", description = "the HTTP/HTTPS URL to the quiz")
  public String getHtmlUrl() {
    return htmlUrl;
  }
  public void setHtmlUrl(String htmlUrl) {
    this.htmlUrl = htmlUrl;
  }
  public Quiz id(Integer id) {
    this.id = id;
    return this;
  }

  

  /**
  * the ID of the quiz
  * @return id
  **/
  @Schema(example = "5", description = "the ID of the quiz")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }
  public Quiz ipFilter(String ipFilter) {
    this.ipFilter = ipFilter;
    return this;
  }

  

  /**
  * IP address or range that quiz access is limited to
  * @return ipFilter
  **/
  @Schema(example = "123.123.123.123", description = "IP address or range that quiz access is limited to")
  public String getIpFilter() {
    return ipFilter;
  }
  public void setIpFilter(String ipFilter) {
    this.ipFilter = ipFilter;
  }
  public Quiz lockAt(OffsetDateTime lockAt) {
    this.lockAt = lockAt;
    return this;
  }

  

  /**
  * when to lock the quiz
  * @return lockAt
  **/
  @Schema(description = "when to lock the quiz")
  public OffsetDateTime getLockAt() {
    return lockAt;
  }
  public void setLockAt(OffsetDateTime lockAt) {
    this.lockAt = lockAt;
  }
  public Quiz lockExplanation(String lockExplanation) {
    this.lockExplanation = lockExplanation;
    return this;
  }

  

  /**
  * (Optional) An explanation of why this is locked for the user. Present when locked_for_user is true.
  * @return lockExplanation
  **/
  @Schema(example = "This quiz is locked until September 1 at 12:00am", description = "(Optional) An explanation of why this is locked for the user. Present when locked_for_user is true.")
  public String getLockExplanation() {
    return lockExplanation;
  }
  public void setLockExplanation(String lockExplanation) {
    this.lockExplanation = lockExplanation;
  }
  public Quiz lockInfo(LockInfo lockInfo) {
    this.lockInfo = lockInfo;
    return this;
  }

  

  /**
  * Get lockInfo
  * @return lockInfo
  **/
  @Schema(description = "")
  public LockInfo getLockInfo() {
    return lockInfo;
  }
  public void setLockInfo(LockInfo lockInfo) {
    this.lockInfo = lockInfo;
  }
  public Quiz lockedForUser(Boolean lockedForUser) {
    this.lockedForUser = lockedForUser;
    return this;
  }

  

  /**
  * Whether or not this is locked for the user.
  * @return lockedForUser
  **/
  @Schema(example = "false", description = "Whether or not this is locked for the user.")
  public Boolean isLockedForUser() {
    return lockedForUser;
  }
  public void setLockedForUser(Boolean lockedForUser) {
    this.lockedForUser = lockedForUser;
  }
  public Quiz mobileUrl(String mobileUrl) {
    this.mobileUrl = mobileUrl;
    return this;
  }

  

  /**
  * a url suitable for loading the quiz in a mobile webview.  it will persiste the headless session and, for quizzes in public courses, will force the user to login
  * @return mobileUrl
  **/
  @Schema(example = "http://canvas.example.edu/courses/1/quizzes/2?persist_healdess=1&force_user=1", description = "a url suitable for loading the quiz in a mobile webview.  it will persiste the headless session and, for quizzes in public courses, will force the user to login")
  public String getMobileUrl() {
    return mobileUrl;
  }
  public void setMobileUrl(String mobileUrl) {
    this.mobileUrl = mobileUrl;
  }
  public Quiz oneQuestionAtATime(Boolean oneQuestionAtATime) {
    this.oneQuestionAtATime = oneQuestionAtATime;
    return this;
  }

  

  /**
  * show one question at a time?
  * @return oneQuestionAtATime
  **/
  @Schema(example = "false", description = "show one question at a time?")
  public Boolean isOneQuestionAtATime() {
    return oneQuestionAtATime;
  }
  public void setOneQuestionAtATime(Boolean oneQuestionAtATime) {
    this.oneQuestionAtATime = oneQuestionAtATime;
  }
  public Quiz oneTimeResults(Boolean oneTimeResults) {
    this.oneTimeResults = oneTimeResults;
    return this;
  }

  

  /**
  * prevent the students from seeing their results more than once (right after they submit the quiz)
  * @return oneTimeResults
  **/
  @Schema(example = "true", description = "prevent the students from seeing their results more than once (right after they submit the quiz)")
  public Boolean isOneTimeResults() {
    return oneTimeResults;
  }
  public void setOneTimeResults(Boolean oneTimeResults) {
    this.oneTimeResults = oneTimeResults;
  }
  public Quiz permissions(QuizPermissions permissions) {
    this.permissions = permissions;
    return this;
  }

  

  /**
  * Get permissions
  * @return permissions
  **/
  @Schema(description = "")
  public QuizPermissions getPermissions() {
    return permissions;
  }
  public void setPermissions(QuizPermissions permissions) {
    this.permissions = permissions;
  }
  public Quiz pointsPossible(Integer pointsPossible) {
    this.pointsPossible = pointsPossible;
    return this;
  }

  

  /**
  * The total point value given to the quiz
  * @return pointsPossible
  **/
  @Schema(example = "20", description = "The total point value given to the quiz")
  public Integer getPointsPossible() {
    return pointsPossible;
  }
  public void setPointsPossible(Integer pointsPossible) {
    this.pointsPossible = pointsPossible;
  }
  public Quiz previewUrl(String previewUrl) {
    this.previewUrl = previewUrl;
    return this;
  }

  

  /**
  * A url that can be visited in the browser with a POST request to preview a quiz as the teacher. Only present when the user may grade
  * @return previewUrl
  **/
  @Schema(example = "http://canvas.example.edu/courses/1/quizzes/2/take?preview=1", description = "A url that can be visited in the browser with a POST request to preview a quiz as the teacher. Only present when the user may grade")
  public String getPreviewUrl() {
    return previewUrl;
  }
  public void setPreviewUrl(String previewUrl) {
    this.previewUrl = previewUrl;
  }
  public Quiz published(Boolean published) {
    this.published = published;
    return this;
  }

  

  /**
  * whether the quiz has a published or unpublished draft state.
  * @return published
  **/
  @Schema(example = "true", description = "whether the quiz has a published or unpublished draft state.")
  public Boolean isPublished() {
    return published;
  }
  public void setPublished(Boolean published) {
    this.published = published;
  }
  public Quiz questionCount(Integer questionCount) {
    this.questionCount = questionCount;
    return this;
  }

  

  /**
  * the number of questions in the quiz
  * @return questionCount
  **/
  @Schema(example = "12", description = "the number of questions in the quiz")
  public Integer getQuestionCount() {
    return questionCount;
  }
  public void setQuestionCount(Integer questionCount) {
    this.questionCount = questionCount;
  }
  public Quiz questionTypes(List<String> questionTypes) {
    this.questionTypes = questionTypes;
    return this;
  }

  public Quiz addQuestionTypesItem(String questionTypesItem) {
    if (this.questionTypes == null) {
      this.questionTypes = new ArrayList<String>();
    }
    this.questionTypes.add(questionTypesItem);
    return this;
  }

  /**
  * List of question types in the quiz
  * @return questionTypes
  **/
  @Schema(example = "[multiple_choice, essay]", description = "List of question types in the quiz")
  public List<String> getQuestionTypes() {
    return questionTypes;
  }
  public void setQuestionTypes(List<String> questionTypes) {
    this.questionTypes = questionTypes;
  }
  public Quiz quizExtensionsUrl(String quizExtensionsUrl) {
    this.quizExtensionsUrl = quizExtensionsUrl;
    return this;
  }

  

  /**
  * Link to endpoint to send extensions for this quiz.
  * @return quizExtensionsUrl
  **/
  @Schema(example = "http://canvas.instructure.com/courses/1/quizzes/2/quiz_extensions", description = "Link to endpoint to send extensions for this quiz.")
  public String getQuizExtensionsUrl() {
    return quizExtensionsUrl;
  }
  public void setQuizExtensionsUrl(String quizExtensionsUrl) {
    this.quizExtensionsUrl = quizExtensionsUrl;
  }
  public Quiz quizType(String quizType) {
    this.quizType = quizType;
    return this;
  }

  

  /**
  * type of quiz possible values: &#x27;practice_quiz&#x27;, &#x27;assignment&#x27;, &#x27;graded_survey&#x27;, &#x27;survey&#x27;
  * @return quizType
  **/
  @Schema(example = "assignment", description = "type of quiz possible values: 'practice_quiz', 'assignment', 'graded_survey', 'survey'")
  public String getQuizType() {
    return quizType;
  }
  public void setQuizType(String quizType) {
    this.quizType = quizType;
  }
  public Quiz scoringPolicy(String scoringPolicy) {
    this.scoringPolicy = scoringPolicy;
    return this;
  }

  

  /**
  * which quiz score to keep (only if allowed_attempts !&#x3D; 1) possible values: &#x27;keep_highest&#x27;, &#x27;keep_latest&#x27;
  * @return scoringPolicy
  **/
  @Schema(example = "keep_highest", description = "which quiz score to keep (only if allowed_attempts != 1) possible values: 'keep_highest', 'keep_latest'")
  public String getScoringPolicy() {
    return scoringPolicy;
  }
  public void setScoringPolicy(String scoringPolicy) {
    this.scoringPolicy = scoringPolicy;
  }
  public Quiz showCorrectAnswers(Boolean showCorrectAnswers) {
    this.showCorrectAnswers = showCorrectAnswers;
    return this;
  }

  

  /**
  * show which answers were correct when results are shown? only valid if hide_results&#x3D;null
  * @return showCorrectAnswers
  **/
  @Schema(example = "true", description = "show which answers were correct when results are shown? only valid if hide_results=null")
  public Boolean isShowCorrectAnswers() {
    return showCorrectAnswers;
  }
  public void setShowCorrectAnswers(Boolean showCorrectAnswers) {
    this.showCorrectAnswers = showCorrectAnswers;
  }
  public Quiz showCorrectAnswersAt(OffsetDateTime showCorrectAnswersAt) {
    this.showCorrectAnswersAt = showCorrectAnswersAt;
    return this;
  }

  

  /**
  * when should the correct answers be visible by students? only valid if show_correct_answers&#x3D;true
  * @return showCorrectAnswersAt
  **/
  @Schema(description = "when should the correct answers be visible by students? only valid if show_correct_answers=true")
  public OffsetDateTime getShowCorrectAnswersAt() {
    return showCorrectAnswersAt;
  }
  public void setShowCorrectAnswersAt(OffsetDateTime showCorrectAnswersAt) {
    this.showCorrectAnswersAt = showCorrectAnswersAt;
  }
  public Quiz showCorrectAnswersLastAttempt(Boolean showCorrectAnswersLastAttempt) {
    this.showCorrectAnswersLastAttempt = showCorrectAnswersLastAttempt;
    return this;
  }

  

  /**
  * restrict the show_correct_answers option above to apply only to the last submitted attempt of a quiz that allows multiple attempts. only valid if show_correct_answers&#x3D;true and allowed_attempts &gt; 1
  * @return showCorrectAnswersLastAttempt
  **/
  @Schema(example = "true", description = "restrict the show_correct_answers option above to apply only to the last submitted attempt of a quiz that allows multiple attempts. only valid if show_correct_answers=true and allowed_attempts > 1")
  public Boolean isShowCorrectAnswersLastAttempt() {
    return showCorrectAnswersLastAttempt;
  }
  public void setShowCorrectAnswersLastAttempt(Boolean showCorrectAnswersLastAttempt) {
    this.showCorrectAnswersLastAttempt = showCorrectAnswersLastAttempt;
  }
  public Quiz shuffleAnswers(Boolean shuffleAnswers) {
    this.shuffleAnswers = shuffleAnswers;
    return this;
  }

  

  /**
  * shuffle answers for students?
  * @return shuffleAnswers
  **/
  @Schema(example = "false", description = "shuffle answers for students?")
  public Boolean isShuffleAnswers() {
    return shuffleAnswers;
  }
  public void setShuffleAnswers(Boolean shuffleAnswers) {
    this.shuffleAnswers = shuffleAnswers;
  }
  public Quiz speedgraderUrl(String speedgraderUrl) {
    this.speedgraderUrl = speedgraderUrl;
    return this;
  }

  

  /**
  * Link to Speed Grader for this quiz. Will not be present if quiz is unpublished
  * @return speedgraderUrl
  **/
  @Schema(example = "http://canvas.instructure.com/courses/1/speed_grader?assignment_id=1", description = "Link to Speed Grader for this quiz. Will not be present if quiz is unpublished")
  public String getSpeedgraderUrl() {
    return speedgraderUrl;
  }
  public void setSpeedgraderUrl(String speedgraderUrl) {
    this.speedgraderUrl = speedgraderUrl;
  }
  public Quiz timeLimit(Integer timeLimit) {
    this.timeLimit = timeLimit;
    return this;
  }

  

  /**
  * quiz time limit in minutes
  * @return timeLimit
  **/
  @Schema(example = "5", description = "quiz time limit in minutes")
  public Integer getTimeLimit() {
    return timeLimit;
  }
  public void setTimeLimit(Integer timeLimit) {
    this.timeLimit = timeLimit;
  }
  public Quiz title(String title) {
    this.title = title;
    return this;
  }

  

  /**
  * the title of the quiz
  * @return title
  **/
  @Schema(example = "Hamlet Act 3 Quiz", description = "the title of the quiz")
  public String getTitle() {
    return title;
  }
  public void setTitle(String title) {
    this.title = title;
  }
  public Quiz unlockAt(OffsetDateTime unlockAt) {
    this.unlockAt = unlockAt;
    return this;
  }

  

  /**
  * when to unlock the quiz
  * @return unlockAt
  **/
  @Schema(description = "when to unlock the quiz")
  public OffsetDateTime getUnlockAt() {
    return unlockAt;
  }
  public void setUnlockAt(OffsetDateTime unlockAt) {
    this.unlockAt = unlockAt;
  }
  public Quiz unpublishable(Boolean unpublishable) {
    this.unpublishable = unpublishable;
    return this;
  }

  

  /**
  * Whether the assignment&#x27;s &#x27;published&#x27; state can be changed to false. Will be false if there are student submissions for the quiz.
  * @return unpublishable
  **/
  @Schema(example = "true", description = "Whether the assignment's 'published' state can be changed to false. Will be false if there are student submissions for the quiz.")
  public Boolean isUnpublishable() {
    return unpublishable;
  }
  public void setUnpublishable(Boolean unpublishable) {
    this.unpublishable = unpublishable;
  }
  public Quiz versionNumber(Integer versionNumber) {
    this.versionNumber = versionNumber;
    return this;
  }

  

  /**
  * Current version number of the quiz
  * @return versionNumber
  **/
  @Schema(example = "3", description = "Current version number of the quiz")
  public Integer getVersionNumber() {
    return versionNumber;
  }
  public void setVersionNumber(Integer versionNumber) {
    this.versionNumber = versionNumber;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Quiz quiz = (Quiz) o;
    return Objects.equals(this.accessCode, quiz.accessCode) &&
        Objects.equals(this.allDates, quiz.allDates) &&
        Objects.equals(this.allowedAttempts, quiz.allowedAttempts) &&
        Objects.equals(this.anonymousSubmissions, quiz.anonymousSubmissions) &&
        Objects.equals(this.assignmentGroupId, quiz.assignmentGroupId) &&
        Objects.equals(this.cantGoBack, quiz.cantGoBack) &&
        Objects.equals(this.description, quiz.description) &&
        Objects.equals(this.dueAt, quiz.dueAt) &&
        Objects.equals(this.hideCorrectAnswersAt, quiz.hideCorrectAnswersAt) &&
        Objects.equals(this.hideResults, quiz.hideResults) &&
        Objects.equals(this.htmlUrl, quiz.htmlUrl) &&
        Objects.equals(this.id, quiz.id) &&
        Objects.equals(this.ipFilter, quiz.ipFilter) &&
        Objects.equals(this.lockAt, quiz.lockAt) &&
        Objects.equals(this.lockExplanation, quiz.lockExplanation) &&
        Objects.equals(this.lockInfo, quiz.lockInfo) &&
        Objects.equals(this.lockedForUser, quiz.lockedForUser) &&
        Objects.equals(this.mobileUrl, quiz.mobileUrl) &&
        Objects.equals(this.oneQuestionAtATime, quiz.oneQuestionAtATime) &&
        Objects.equals(this.oneTimeResults, quiz.oneTimeResults) &&
        Objects.equals(this.permissions, quiz.permissions) &&
        Objects.equals(this.pointsPossible, quiz.pointsPossible) &&
        Objects.equals(this.previewUrl, quiz.previewUrl) &&
        Objects.equals(this.published, quiz.published) &&
        Objects.equals(this.questionCount, quiz.questionCount) &&
        Objects.equals(this.questionTypes, quiz.questionTypes) &&
        Objects.equals(this.quizExtensionsUrl, quiz.quizExtensionsUrl) &&
        Objects.equals(this.quizType, quiz.quizType) &&
        Objects.equals(this.scoringPolicy, quiz.scoringPolicy) &&
        Objects.equals(this.showCorrectAnswers, quiz.showCorrectAnswers) &&
        Objects.equals(this.showCorrectAnswersAt, quiz.showCorrectAnswersAt) &&
        Objects.equals(this.showCorrectAnswersLastAttempt, quiz.showCorrectAnswersLastAttempt) &&
        Objects.equals(this.shuffleAnswers, quiz.shuffleAnswers) &&
        Objects.equals(this.speedgraderUrl, quiz.speedgraderUrl) &&
        Objects.equals(this.timeLimit, quiz.timeLimit) &&
        Objects.equals(this.title, quiz.title) &&
        Objects.equals(this.unlockAt, quiz.unlockAt) &&
        Objects.equals(this.unpublishable, quiz.unpublishable) &&
        Objects.equals(this.versionNumber, quiz.versionNumber);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(accessCode, allDates, allowedAttempts, anonymousSubmissions, assignmentGroupId, cantGoBack, description, dueAt, hideCorrectAnswersAt, hideResults, htmlUrl, id, ipFilter, lockAt, lockExplanation, lockInfo, lockedForUser, mobileUrl, oneQuestionAtATime, oneTimeResults, permissions, pointsPossible, previewUrl, published, questionCount, questionTypes, quizExtensionsUrl, quizType, scoringPolicy, showCorrectAnswers, showCorrectAnswersAt, showCorrectAnswersLastAttempt, shuffleAnswers, speedgraderUrl, timeLimit, title, unlockAt, unpublishable, versionNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Quiz {\n");
    
    sb.append("    accessCode: ").append(toIndentedString(accessCode)).append("\n");
    sb.append("    allDates: ").append(toIndentedString(allDates)).append("\n");
    sb.append("    allowedAttempts: ").append(toIndentedString(allowedAttempts)).append("\n");
    sb.append("    anonymousSubmissions: ").append(toIndentedString(anonymousSubmissions)).append("\n");
    sb.append("    assignmentGroupId: ").append(toIndentedString(assignmentGroupId)).append("\n");
    sb.append("    cantGoBack: ").append(toIndentedString(cantGoBack)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    dueAt: ").append(toIndentedString(dueAt)).append("\n");
    sb.append("    hideCorrectAnswersAt: ").append(toIndentedString(hideCorrectAnswersAt)).append("\n");
    sb.append("    hideResults: ").append(toIndentedString(hideResults)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ipFilter: ").append(toIndentedString(ipFilter)).append("\n");
    sb.append("    lockAt: ").append(toIndentedString(lockAt)).append("\n");
    sb.append("    lockExplanation: ").append(toIndentedString(lockExplanation)).append("\n");
    sb.append("    lockInfo: ").append(toIndentedString(lockInfo)).append("\n");
    sb.append("    lockedForUser: ").append(toIndentedString(lockedForUser)).append("\n");
    sb.append("    mobileUrl: ").append(toIndentedString(mobileUrl)).append("\n");
    sb.append("    oneQuestionAtATime: ").append(toIndentedString(oneQuestionAtATime)).append("\n");
    sb.append("    oneTimeResults: ").append(toIndentedString(oneTimeResults)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    pointsPossible: ").append(toIndentedString(pointsPossible)).append("\n");
    sb.append("    previewUrl: ").append(toIndentedString(previewUrl)).append("\n");
    sb.append("    published: ").append(toIndentedString(published)).append("\n");
    sb.append("    questionCount: ").append(toIndentedString(questionCount)).append("\n");
    sb.append("    questionTypes: ").append(toIndentedString(questionTypes)).append("\n");
    sb.append("    quizExtensionsUrl: ").append(toIndentedString(quizExtensionsUrl)).append("\n");
    sb.append("    quizType: ").append(toIndentedString(quizType)).append("\n");
    sb.append("    scoringPolicy: ").append(toIndentedString(scoringPolicy)).append("\n");
    sb.append("    showCorrectAnswers: ").append(toIndentedString(showCorrectAnswers)).append("\n");
    sb.append("    showCorrectAnswersAt: ").append(toIndentedString(showCorrectAnswersAt)).append("\n");
    sb.append("    showCorrectAnswersLastAttempt: ").append(toIndentedString(showCorrectAnswersLastAttempt)).append("\n");
    sb.append("    shuffleAnswers: ").append(toIndentedString(shuffleAnswers)).append("\n");
    sb.append("    speedgraderUrl: ").append(toIndentedString(speedgraderUrl)).append("\n");
    sb.append("    timeLimit: ").append(toIndentedString(timeLimit)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    unlockAt: ").append(toIndentedString(unlockAt)).append("\n");
    sb.append("    unpublishable: ").append(toIndentedString(unpublishable)).append("\n");
    sb.append("    versionNumber: ").append(toIndentedString(versionNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
