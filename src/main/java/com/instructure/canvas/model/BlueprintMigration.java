/*
 * canvas.instructure.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.instructure.canvas.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.OffsetDateTime;

/**
 * BlueprintMigration
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-11-06T15:34:49.014533Z[Europe/London]")
public class BlueprintMigration {

  @JsonProperty("comment")

  private String comment = null;

  @JsonProperty("created_at")

  private OffsetDateTime createdAt = null;

  @JsonProperty("exports_started_at")

  private OffsetDateTime exportsStartedAt = null;

  @JsonProperty("id")

  private Long id = null;

  @JsonProperty("imports_completed_at")

  private OffsetDateTime importsCompletedAt = null;

  @JsonProperty("imports_queued_at")

  private OffsetDateTime importsQueuedAt = null;

  @JsonProperty("subscription_id")

  private Long subscriptionId = null;

  @JsonProperty("template_id")

  private Long templateId = null;

  @JsonProperty("user_id")

  private Long userId = null;

  @JsonProperty("workflow_state")

  private String workflowState = null;
  public BlueprintMigration comment(String comment) {
    this.comment = comment;
    return this;
  }

  

  /**
  * User-specified comment describing changes made in this operation
  * @return comment
  **/
  @Schema(example = "Fixed spelling in question 3 of midterm exam", description = "User-specified comment describing changes made in this operation")
  public String getComment() {
    return comment;
  }
  public void setComment(String comment) {
    this.comment = comment;
  }
  public BlueprintMigration createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  

  /**
  * Time when the migration was queued
  * @return createdAt
  **/
  @Schema(description = "Time when the migration was queued")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }
  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }
  public BlueprintMigration exportsStartedAt(OffsetDateTime exportsStartedAt) {
    this.exportsStartedAt = exportsStartedAt;
    return this;
  }

  

  /**
  * Time when the exports begun
  * @return exportsStartedAt
  **/
  @Schema(description = "Time when the exports begun")
  public OffsetDateTime getExportsStartedAt() {
    return exportsStartedAt;
  }
  public void setExportsStartedAt(OffsetDateTime exportsStartedAt) {
    this.exportsStartedAt = exportsStartedAt;
  }
  public BlueprintMigration id(Long id) {
    this.id = id;
    return this;
  }

  

  /**
  * The ID of the migration.
  * @return id
  **/
  @Schema(example = "1", description = "The ID of the migration.")
  public Long getId() {
    return id;
  }
  public void setId(Long id) {
    this.id = id;
  }
  public BlueprintMigration importsCompletedAt(OffsetDateTime importsCompletedAt) {
    this.importsCompletedAt = importsCompletedAt;
    return this;
  }

  

  /**
  * Time when the imports were completed
  * @return importsCompletedAt
  **/
  @Schema(description = "Time when the imports were completed")
  public OffsetDateTime getImportsCompletedAt() {
    return importsCompletedAt;
  }
  public void setImportsCompletedAt(OffsetDateTime importsCompletedAt) {
    this.importsCompletedAt = importsCompletedAt;
  }
  public BlueprintMigration importsQueuedAt(OffsetDateTime importsQueuedAt) {
    this.importsQueuedAt = importsQueuedAt;
    return this;
  }

  

  /**
  * Time when the exports were completed and imports were queued
  * @return importsQueuedAt
  **/
  @Schema(description = "Time when the exports were completed and imports were queued")
  public OffsetDateTime getImportsQueuedAt() {
    return importsQueuedAt;
  }
  public void setImportsQueuedAt(OffsetDateTime importsQueuedAt) {
    this.importsQueuedAt = importsQueuedAt;
  }
  public BlueprintMigration subscriptionId(Long subscriptionId) {
    this.subscriptionId = subscriptionId;
    return this;
  }

  

  /**
  * The ID of the associated course&#x27;s blueprint subscription. Only present when querying a course associated with a blueprint.
  * @return subscriptionId
  **/
  @Schema(example = "101", description = "The ID of the associated course's blueprint subscription. Only present when querying a course associated with a blueprint.")
  public Long getSubscriptionId() {
    return subscriptionId;
  }
  public void setSubscriptionId(Long subscriptionId) {
    this.subscriptionId = subscriptionId;
  }
  public BlueprintMigration templateId(Long templateId) {
    this.templateId = templateId;
    return this;
  }

  

  /**
  * The ID of the template the migration belongs to. Only present when querying a blueprint course.
  * @return templateId
  **/
  @Schema(example = "2", description = "The ID of the template the migration belongs to. Only present when querying a blueprint course.")
  public Long getTemplateId() {
    return templateId;
  }
  public void setTemplateId(Long templateId) {
    this.templateId = templateId;
  }
  public BlueprintMigration userId(Long userId) {
    this.userId = userId;
    return this;
  }

  

  /**
  * The ID of the user who queued the migration.
  * @return userId
  **/
  @Schema(example = "3", description = "The ID of the user who queued the migration.")
  public Long getUserId() {
    return userId;
  }
  public void setUserId(Long userId) {
    this.userId = userId;
  }
  public BlueprintMigration workflowState(String workflowState) {
    this.workflowState = workflowState;
    return this;
  }

  

  /**
  * Current state of the content migration: queued, exporting, imports_queued, completed, exports_failed, imports_failed
  * @return workflowState
  **/
  @Schema(example = "running", description = "Current state of the content migration: queued, exporting, imports_queued, completed, exports_failed, imports_failed")
  public String getWorkflowState() {
    return workflowState;
  }
  public void setWorkflowState(String workflowState) {
    this.workflowState = workflowState;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlueprintMigration blueprintMigration = (BlueprintMigration) o;
    return Objects.equals(this.comment, blueprintMigration.comment) &&
        Objects.equals(this.createdAt, blueprintMigration.createdAt) &&
        Objects.equals(this.exportsStartedAt, blueprintMigration.exportsStartedAt) &&
        Objects.equals(this.id, blueprintMigration.id) &&
        Objects.equals(this.importsCompletedAt, blueprintMigration.importsCompletedAt) &&
        Objects.equals(this.importsQueuedAt, blueprintMigration.importsQueuedAt) &&
        Objects.equals(this.subscriptionId, blueprintMigration.subscriptionId) &&
        Objects.equals(this.templateId, blueprintMigration.templateId) &&
        Objects.equals(this.userId, blueprintMigration.userId) &&
        Objects.equals(this.workflowState, blueprintMigration.workflowState);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(comment, createdAt, exportsStartedAt, id, importsCompletedAt, importsQueuedAt, subscriptionId, templateId, userId, workflowState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlueprintMigration {\n");
    
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    exportsStartedAt: ").append(toIndentedString(exportsStartedAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    importsCompletedAt: ").append(toIndentedString(importsCompletedAt)).append("\n");
    sb.append("    importsQueuedAt: ").append(toIndentedString(importsQueuedAt)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    workflowState: ").append(toIndentedString(workflowState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
