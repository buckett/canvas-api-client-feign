/*
 * canvas.instructure.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.instructure.canvas.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.OffsetDateTime;

/**
 * CourseProgress
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-11-06T15:34:49.014533Z[Europe/London]")
public class CourseProgress {

  @JsonProperty("completed_at")

  private OffsetDateTime completedAt = null;

  @JsonProperty("next_requirement_url")

  private String nextRequirementUrl = null;

  @JsonProperty("requirement_completed_count")

  private Integer requirementCompletedCount = null;

  @JsonProperty("requirement_count")

  private Integer requirementCount = null;
  public CourseProgress completedAt(OffsetDateTime completedAt) {
    this.completedAt = completedAt;
    return this;
  }

  

  /**
  * date the course was completed. null if the course has not been completed by this user
  * @return completedAt
  **/
  @Schema(description = "date the course was completed. null if the course has not been completed by this user")
  public OffsetDateTime getCompletedAt() {
    return completedAt;
  }
  public void setCompletedAt(OffsetDateTime completedAt) {
    this.completedAt = completedAt;
  }
  public CourseProgress nextRequirementUrl(String nextRequirementUrl) {
    this.nextRequirementUrl = nextRequirementUrl;
    return this;
  }

  

  /**
  * url to next module item that has an unmet requirement. null if the user has completed the course or the current module does not require sequential progress
  * @return nextRequirementUrl
  **/
  @Schema(example = "http://localhost/courses/1/modules/items/2", description = "url to next module item that has an unmet requirement. null if the user has completed the course or the current module does not require sequential progress")
  public String getNextRequirementUrl() {
    return nextRequirementUrl;
  }
  public void setNextRequirementUrl(String nextRequirementUrl) {
    this.nextRequirementUrl = nextRequirementUrl;
  }
  public CourseProgress requirementCompletedCount(Integer requirementCompletedCount) {
    this.requirementCompletedCount = requirementCompletedCount;
    return this;
  }

  

  /**
  * total number of requirements the user has completed from all modules
  * @return requirementCompletedCount
  **/
  @Schema(example = "1", description = "total number of requirements the user has completed from all modules")
  public Integer getRequirementCompletedCount() {
    return requirementCompletedCount;
  }
  public void setRequirementCompletedCount(Integer requirementCompletedCount) {
    this.requirementCompletedCount = requirementCompletedCount;
  }
  public CourseProgress requirementCount(Integer requirementCount) {
    this.requirementCount = requirementCount;
    return this;
  }

  

  /**
  * total number of requirements from all modules
  * @return requirementCount
  **/
  @Schema(example = "10", description = "total number of requirements from all modules")
  public Integer getRequirementCount() {
    return requirementCount;
  }
  public void setRequirementCount(Integer requirementCount) {
    this.requirementCount = requirementCount;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CourseProgress courseProgress = (CourseProgress) o;
    return Objects.equals(this.completedAt, courseProgress.completedAt) &&
        Objects.equals(this.nextRequirementUrl, courseProgress.nextRequirementUrl) &&
        Objects.equals(this.requirementCompletedCount, courseProgress.requirementCompletedCount) &&
        Objects.equals(this.requirementCount, courseProgress.requirementCount);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(completedAt, nextRequirementUrl, requirementCompletedCount, requirementCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CourseProgress {\n");
    
    sb.append("    completedAt: ").append(toIndentedString(completedAt)).append("\n");
    sb.append("    nextRequirementUrl: ").append(toIndentedString(nextRequirementUrl)).append("\n");
    sb.append("    requirementCompletedCount: ").append(toIndentedString(requirementCompletedCount)).append("\n");
    sb.append("    requirementCount: ").append(toIndentedString(requirementCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
