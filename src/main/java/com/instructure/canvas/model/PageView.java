/*
 * canvas.instructure.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.instructure.canvas.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.instructure.canvas.model.PageViewLinks;
import io.swagger.v3.oas.annotations.media.Schema;
import java.math.BigDecimal;
import java.util.UUID;

/**
 * The record of a user page view access in Canvas
 */
@Schema(description = "The record of a user page view access in Canvas")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-11-06T15:34:49.014533Z[Europe/London]")
public class PageView {

  @JsonProperty("action")

  private String action = null;

  @JsonProperty("app_name")

  private String appName = null;

  @JsonProperty("asset_type")

  private String assetType = null;

  @JsonProperty("context_type")

  private String contextType = null;

  @JsonProperty("contributed")

  private Boolean contributed = null;

  @JsonProperty("controller")

  private String controller = null;

  @JsonProperty("created_at")

  private String createdAt = null;

  @JsonProperty("http_method")

  private String httpMethod = null;

  @JsonProperty("id")

  private UUID id = null;

  @JsonProperty("interaction_seconds")

  private BigDecimal interactionSeconds = null;

  @JsonProperty("links")

  private PageViewLinks links = null;

  @JsonProperty("participated")

  private Boolean participated = null;

  @JsonProperty("remote_ip")

  private String remoteIp = null;

  @JsonProperty("render_time")

  private BigDecimal renderTime = null;

  @JsonProperty("url")

  private String url = null;

  @JsonProperty("user_agent")

  private String userAgent = null;

  @JsonProperty("user_request")

  private Boolean userRequest = null;
  public PageView action(String action) {
    this.action = action;
    return this;
  }

  

  /**
  * The rails action that handled the request
  * @return action
  **/
  @Schema(example = "index", description = "The rails action that handled the request")
  public String getAction() {
    return action;
  }
  public void setAction(String action) {
    this.action = action;
  }
  public PageView appName(String appName) {
    this.appName = appName;
    return this;
  }

  

  /**
  * If the request is from an API request, the app that generated the access token
  * @return appName
  **/
  @Schema(example = "Canvas for iOS", description = "If the request is from an API request, the app that generated the access token")
  public String getAppName() {
    return appName;
  }
  public void setAppName(String appName) {
    this.appName = appName;
  }
  public PageView assetType(String assetType) {
    this.assetType = assetType;
    return this;
  }

  

  /**
  * The type of asset in the context for the request, if any
  * @return assetType
  **/
  @Schema(example = "Discussion", description = "The type of asset in the context for the request, if any")
  public String getAssetType() {
    return assetType;
  }
  public void setAssetType(String assetType) {
    this.assetType = assetType;
  }
  public PageView contextType(String contextType) {
    this.contextType = contextType;
    return this;
  }

  

  /**
  * The type of context for the request
  * @return contextType
  **/
  @Schema(example = "Course", description = "The type of context for the request")
  public String getContextType() {
    return contextType;
  }
  public void setContextType(String contextType) {
    this.contextType = contextType;
  }
  public PageView contributed(Boolean contributed) {
    this.contributed = contributed;
    return this;
  }

  

  /**
  * This field is deprecated, and will always be false
  * @return contributed
  **/
  @Schema(example = "false", description = "This field is deprecated, and will always be false")
  public Boolean isContributed() {
    return contributed;
  }
  public void setContributed(Boolean contributed) {
    this.contributed = contributed;
  }
  public PageView controller(String controller) {
    this.controller = controller;
    return this;
  }

  

  /**
  * The rails controller that handled the request
  * @return controller
  **/
  @Schema(example = "discussions", description = "The rails controller that handled the request")
  public String getController() {
    return controller;
  }
  public void setController(String controller) {
    this.controller = controller;
  }
  public PageView createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  

  /**
  * When the request was made
  * @return createdAt
  **/
  @Schema(example = "2013-10-01T19:49:47Z", description = "When the request was made")
  public String getCreatedAt() {
    return createdAt;
  }
  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }
  public PageView httpMethod(String httpMethod) {
    this.httpMethod = httpMethod;
    return this;
  }

  

  /**
  * The HTTP method such as GET or POST
  * @return httpMethod
  **/
  @Schema(example = "GET", description = "The HTTP method such as GET or POST")
  public String getHttpMethod() {
    return httpMethod;
  }
  public void setHttpMethod(String httpMethod) {
    this.httpMethod = httpMethod;
  }
  public PageView id(UUID id) {
    this.id = id;
    return this;
  }

  

  /**
  * A UUID representing the page view.  This is also the unique request id
  * @return id
  **/
  @Schema(example = "3e246700-e305-0130-51de-02e33aa501ef", required = true, description = "A UUID representing the page view.  This is also the unique request id")
  public UUID getId() {
    return id;
  }
  public void setId(UUID id) {
    this.id = id;
  }
  public PageView interactionSeconds(BigDecimal interactionSeconds) {
    this.interactionSeconds = interactionSeconds;
    return this;
  }

  

  /**
  * An approximation of how long the user spent on the page, in seconds
  * @return interactionSeconds
  **/
  @Schema(example = "7.21", description = "An approximation of how long the user spent on the page, in seconds")
  public BigDecimal getInteractionSeconds() {
    return interactionSeconds;
  }
  public void setInteractionSeconds(BigDecimal interactionSeconds) {
    this.interactionSeconds = interactionSeconds;
  }
  public PageView links(PageViewLinks links) {
    this.links = links;
    return this;
  }

  

  /**
  * Get links
  * @return links
  **/
  @Schema(description = "")
  public PageViewLinks getLinks() {
    return links;
  }
  public void setLinks(PageViewLinks links) {
    this.links = links;
  }
  public PageView participated(Boolean participated) {
    this.participated = participated;
    return this;
  }

  

  /**
  * True if the request counted as participating, such as submitting homework
  * @return participated
  **/
  @Schema(example = "false", description = "True if the request counted as participating, such as submitting homework")
  public Boolean isParticipated() {
    return participated;
  }
  public void setParticipated(Boolean participated) {
    this.participated = participated;
  }
  public PageView remoteIp(String remoteIp) {
    this.remoteIp = remoteIp;
    return this;
  }

  

  /**
  * The origin IP address of the request
  * @return remoteIp
  **/
  @Schema(example = "173.194.46.71", description = "The origin IP address of the request")
  public String getRemoteIp() {
    return remoteIp;
  }
  public void setRemoteIp(String remoteIp) {
    this.remoteIp = remoteIp;
  }
  public PageView renderTime(BigDecimal renderTime) {
    this.renderTime = renderTime;
    return this;
  }

  

  /**
  * How long the response took to render, in seconds
  * @return renderTime
  **/
  @Schema(example = "0.369", description = "How long the response took to render, in seconds")
  public BigDecimal getRenderTime() {
    return renderTime;
  }
  public void setRenderTime(BigDecimal renderTime) {
    this.renderTime = renderTime;
  }
  public PageView url(String url) {
    this.url = url;
    return this;
  }

  

  /**
  * The URL requested
  * @return url
  **/
  @Schema(example = "https://canvas.instructure.com/conversations", description = "The URL requested")
  public String getUrl() {
    return url;
  }
  public void setUrl(String url) {
    this.url = url;
  }
  public PageView userAgent(String userAgent) {
    this.userAgent = userAgent;
    return this;
  }

  

  /**
  * The user-agent of the browser or program that made the request
  * @return userAgent
  **/
  @Schema(example = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5) AppleWebKit/536.30.1 (KHTML, like Gecko) Version/6.0.5 Safari/536.30.1", description = "The user-agent of the browser or program that made the request")
  public String getUserAgent() {
    return userAgent;
  }
  public void setUserAgent(String userAgent) {
    this.userAgent = userAgent;
  }
  public PageView userRequest(Boolean userRequest) {
    this.userRequest = userRequest;
    return this;
  }

  

  /**
  * A flag indicating whether the request was user-initiated, or automatic (such as an AJAX call)
  * @return userRequest
  **/
  @Schema(example = "true", description = "A flag indicating whether the request was user-initiated, or automatic (such as an AJAX call)")
  public Boolean isUserRequest() {
    return userRequest;
  }
  public void setUserRequest(Boolean userRequest) {
    this.userRequest = userRequest;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PageView pageView = (PageView) o;
    return Objects.equals(this.action, pageView.action) &&
        Objects.equals(this.appName, pageView.appName) &&
        Objects.equals(this.assetType, pageView.assetType) &&
        Objects.equals(this.contextType, pageView.contextType) &&
        Objects.equals(this.contributed, pageView.contributed) &&
        Objects.equals(this.controller, pageView.controller) &&
        Objects.equals(this.createdAt, pageView.createdAt) &&
        Objects.equals(this.httpMethod, pageView.httpMethod) &&
        Objects.equals(this.id, pageView.id) &&
        Objects.equals(this.interactionSeconds, pageView.interactionSeconds) &&
        Objects.equals(this.links, pageView.links) &&
        Objects.equals(this.participated, pageView.participated) &&
        Objects.equals(this.remoteIp, pageView.remoteIp) &&
        Objects.equals(this.renderTime, pageView.renderTime) &&
        Objects.equals(this.url, pageView.url) &&
        Objects.equals(this.userAgent, pageView.userAgent) &&
        Objects.equals(this.userRequest, pageView.userRequest);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(action, appName, assetType, contextType, contributed, controller, createdAt, httpMethod, id, interactionSeconds, links, participated, remoteIp, renderTime, url, userAgent, userRequest);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PageView {\n");
    
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    appName: ").append(toIndentedString(appName)).append("\n");
    sb.append("    assetType: ").append(toIndentedString(assetType)).append("\n");
    sb.append("    contextType: ").append(toIndentedString(contextType)).append("\n");
    sb.append("    contributed: ").append(toIndentedString(contributed)).append("\n");
    sb.append("    controller: ").append(toIndentedString(controller)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    httpMethod: ").append(toIndentedString(httpMethod)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    interactionSeconds: ").append(toIndentedString(interactionSeconds)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    participated: ").append(toIndentedString(participated)).append("\n");
    sb.append("    remoteIp: ").append(toIndentedString(remoteIp)).append("\n");
    sb.append("    renderTime: ").append(toIndentedString(renderTime)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    userAgent: ").append(toIndentedString(userAgent)).append("\n");
    sb.append("    userRequest: ").append(toIndentedString(userRequest)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
