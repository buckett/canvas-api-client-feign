/*
 * canvas.instructure.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.instructure.canvas.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * A set of restrictions on editing for copied objects in associated courses
 */
@Schema(description = "A set of restrictions on editing for copied objects in associated courses")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-11-06T15:34:49.014533Z[Europe/London]")
public class BlueprintRestriction {

  @JsonProperty("availability_dates")

  private Boolean availabilityDates = null;

  @JsonProperty("content")

  private Boolean content = null;

  @JsonProperty("due_dates")

  private Boolean dueDates = null;

  @JsonProperty("points")

  private Boolean points = null;
  public BlueprintRestriction availabilityDates(Boolean availabilityDates) {
    this.availabilityDates = availabilityDates;
    return this;
  }

  

  /**
  * Restriction on availability dates for an object
  * @return availabilityDates
  **/
  @Schema(example = "true", description = "Restriction on availability dates for an object")
  public Boolean isAvailabilityDates() {
    return availabilityDates;
  }
  public void setAvailabilityDates(Boolean availabilityDates) {
    this.availabilityDates = availabilityDates;
  }
  public BlueprintRestriction content(Boolean content) {
    this.content = content;
    return this;
  }

  

  /**
  * Restriction on main content (e.g. title, description).
  * @return content
  **/
  @Schema(example = "true", description = "Restriction on main content (e.g. title, description).")
  public Boolean isContent() {
    return content;
  }
  public void setContent(Boolean content) {
    this.content = content;
  }
  public BlueprintRestriction dueDates(Boolean dueDates) {
    this.dueDates = dueDates;
    return this;
  }

  

  /**
  * Restriction on due dates for assignments and graded learning objects
  * @return dueDates
  **/
  @Schema(example = "false", description = "Restriction on due dates for assignments and graded learning objects")
  public Boolean isDueDates() {
    return dueDates;
  }
  public void setDueDates(Boolean dueDates) {
    this.dueDates = dueDates;
  }
  public BlueprintRestriction points(Boolean points) {
    this.points = points;
    return this;
  }

  

  /**
  * Restriction on points possible for assignments and graded learning objects
  * @return points
  **/
  @Schema(example = "true", description = "Restriction on points possible for assignments and graded learning objects")
  public Boolean isPoints() {
    return points;
  }
  public void setPoints(Boolean points) {
    this.points = points;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlueprintRestriction blueprintRestriction = (BlueprintRestriction) o;
    return Objects.equals(this.availabilityDates, blueprintRestriction.availabilityDates) &&
        Objects.equals(this.content, blueprintRestriction.content) &&
        Objects.equals(this.dueDates, blueprintRestriction.dueDates) &&
        Objects.equals(this.points, blueprintRestriction.points);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(availabilityDates, content, dueDates, points);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlueprintRestriction {\n");
    
    sb.append("    availabilityDates: ").append(toIndentedString(availabilityDates)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    dueDates: ").append(toIndentedString(dueDates)).append("\n");
    sb.append("    points: ").append(toIndentedString(points)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
