/*
 * canvas.instructure.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.instructure.canvas.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * NotificationPreference
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-11-06T15:34:49.014533Z[Europe/London]")
public class NotificationPreference {

  @JsonProperty("category")

  private String category = null;

  @JsonProperty("frequency")

  private String frequency = null;

  @JsonProperty("href")

  private String href = null;

  @JsonProperty("notification")

  private String notification = null;
  public NotificationPreference category(String category) {
    this.category = category;
    return this;
  }

  

  /**
  * The category of that notification
  * @return category
  **/
  @Schema(example = "announcement", description = "The category of that notification")
  public String getCategory() {
    return category;
  }
  public void setCategory(String category) {
    this.category = category;
  }
  public NotificationPreference frequency(String frequency) {
    this.frequency = frequency;
    return this;
  }

  

  /**
  * How often to send notifications to this communication channel for the given notification. Possible values are &#x27;immediately&#x27;, &#x27;daily&#x27;, &#x27;weekly&#x27;, and &#x27;never&#x27;
  * @return frequency
  **/
  @Schema(example = "daily", description = "How often to send notifications to this communication channel for the given notification. Possible values are 'immediately', 'daily', 'weekly', and 'never'")
  public String getFrequency() {
    return frequency;
  }
  public void setFrequency(String frequency) {
    this.frequency = frequency;
  }
  public NotificationPreference href(String href) {
    this.href = href;
    return this;
  }

  

  /**
  * Get href
  * @return href
  **/
  @Schema(example = "https://canvas.instructure.com/users/1/communication_channels/email/student@example.edu/notification_preferences/new_announcement", description = "")
  public String getHref() {
    return href;
  }
  public void setHref(String href) {
    this.href = href;
  }
  public NotificationPreference notification(String notification) {
    this.notification = notification;
    return this;
  }

  

  /**
  * The notification this preference belongs to
  * @return notification
  **/
  @Schema(example = "new_announcement", description = "The notification this preference belongs to")
  public String getNotification() {
    return notification;
  }
  public void setNotification(String notification) {
    this.notification = notification;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationPreference notificationPreference = (NotificationPreference) o;
    return Objects.equals(this.category, notificationPreference.category) &&
        Objects.equals(this.frequency, notificationPreference.frequency) &&
        Objects.equals(this.href, notificationPreference.href) &&
        Objects.equals(this.notification, notificationPreference.notification);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(category, frequency, href, notification);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationPreference {\n");
    
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    notification: ").append(toIndentedString(notification)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
