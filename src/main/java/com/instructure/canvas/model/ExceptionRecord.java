/*
 * canvas.instructure.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.instructure.canvas.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;

/**
 * Lists associated courses that did not receive a change propagated from a blueprint
 */
@Schema(description = "Lists associated courses that did not receive a change propagated from a blueprint")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-11-06T15:34:49.014533Z[Europe/London]")
public class ExceptionRecord {

  @JsonProperty("conflicting_changes")

  private List<Object> conflictingChanges = null;

  @JsonProperty("course_id")

  private Long courseId = null;
  public ExceptionRecord conflictingChanges(List<Object> conflictingChanges) {
    this.conflictingChanges = conflictingChanges;
    return this;
  }

  public ExceptionRecord addConflictingChangesItem(Object conflictingChangesItem) {
    if (this.conflictingChanges == null) {
      this.conflictingChanges = new ArrayList<Object>();
    }
    this.conflictingChanges.add(conflictingChangesItem);
    return this;
  }

  /**
  * A list of change classes in the associated course&#x27;s copy of the item that prevented a blueprint change from being applied. One or more of [&#x27;content&#x27;, &#x27;points&#x27;, &#x27;due_dates&#x27;, &#x27;availability_dates&#x27;].
  * @return conflictingChanges
  **/
  @Schema(example = "[points]", description = "A list of change classes in the associated course's copy of the item that prevented a blueprint change from being applied. One or more of ['content', 'points', 'due_dates', 'availability_dates'].")
  public List<Object> getConflictingChanges() {
    return conflictingChanges;
  }
  public void setConflictingChanges(List<Object> conflictingChanges) {
    this.conflictingChanges = conflictingChanges;
  }
  public ExceptionRecord courseId(Long courseId) {
    this.courseId = courseId;
    return this;
  }

  

  /**
  * The ID of the associated course
  * @return courseId
  **/
  @Schema(example = "101", description = "The ID of the associated course")
  public Long getCourseId() {
    return courseId;
  }
  public void setCourseId(Long courseId) {
    this.courseId = courseId;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExceptionRecord exceptionRecord = (ExceptionRecord) o;
    return Objects.equals(this.conflictingChanges, exceptionRecord.conflictingChanges) &&
        Objects.equals(this.courseId, exceptionRecord.courseId);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(conflictingChanges, courseId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExceptionRecord {\n");
    
    sb.append("    conflictingChanges: ").append(toIndentedString(conflictingChanges)).append("\n");
    sb.append("    courseId: ").append(toIndentedString(courseId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
