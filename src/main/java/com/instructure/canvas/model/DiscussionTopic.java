/*
 * canvas.instructure.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.instructure.canvas.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.instructure.canvas.model.FileAttachment;
import com.instructure.canvas.model.LockInfo;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * A discussion topic
 */
@Schema(description = "A discussion topic")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-11-06T15:34:49.014533Z[Europe/London]")
public class DiscussionTopic {

  @JsonProperty("allow_rating")

  private Boolean allowRating = null;

  @JsonProperty("assignment_id")

  private Integer assignmentId = null;

  @JsonProperty("attachments")

  private List<FileAttachment> attachments = null;

  @JsonProperty("delayed_post_at")

  private OffsetDateTime delayedPostAt = null;

  @JsonProperty("discussion_subentry_count")

  private Integer discussionSubentryCount = null;

  @JsonProperty("discussion_type")

  private String discussionType = null;

  @JsonProperty("group_category_id")

  private Integer groupCategoryId = null;

  @JsonProperty("group_topic_children")

  private List<Object> groupTopicChildren = null;

  @JsonProperty("html_url")

  private String htmlUrl = null;

  @JsonProperty("id")

  private Integer id = null;

  @JsonProperty("last_reply_at")

  private OffsetDateTime lastReplyAt = null;

  @JsonProperty("lock_at")

  private OffsetDateTime lockAt = null;

  @JsonProperty("lock_explanation")

  private String lockExplanation = null;

  @JsonProperty("lock_info")

  private LockInfo lockInfo = null;

  @JsonProperty("locked")

  private Boolean locked = null;

  @JsonProperty("locked_for_user")

  private Boolean lockedForUser = null;

  @JsonProperty("message")

  private String message = null;

  @JsonProperty("only_graders_can_rate")

  private Boolean onlyGradersCanRate = null;

  @JsonProperty("permissions")

  private Object permissions = null;

  @JsonProperty("pinned")

  private Boolean pinned = null;

  @JsonProperty("podcast_url")

  private String podcastUrl = null;

  @JsonProperty("posted_at")

  private OffsetDateTime postedAt = null;

  @JsonProperty("published")

  private Boolean published = null;

  @JsonProperty("read_state")

  private String readState = null;

  @JsonProperty("require_initial_post")

  private Boolean requireInitialPost = null;

  @JsonProperty("root_topic_id")

  private Integer rootTopicId = null;

  @JsonProperty("sort_by_rating")

  private Boolean sortByRating = null;

  @JsonProperty("subscribed")

  private Boolean subscribed = null;

  @JsonProperty("subscription_hold")

  private String subscriptionHold = null;

  @JsonProperty("title")

  private String title = null;

  @JsonProperty("topic_children")

  private List<Integer> topicChildren = null;

  @JsonProperty("unread_count")

  private Integer unreadCount = null;

  @JsonProperty("user_can_see_posts")

  private Boolean userCanSeePosts = null;

  @JsonProperty("user_name")

  private String userName = null;
  public DiscussionTopic allowRating(Boolean allowRating) {
    this.allowRating = allowRating;
    return this;
  }

  

  /**
  * Whether or not users can rate entries in this topic.
  * @return allowRating
  **/
  @Schema(example = "true", description = "Whether or not users can rate entries in this topic.")
  public Boolean isAllowRating() {
    return allowRating;
  }
  public void setAllowRating(Boolean allowRating) {
    this.allowRating = allowRating;
  }
  public DiscussionTopic assignmentId(Integer assignmentId) {
    this.assignmentId = assignmentId;
    return this;
  }

  

  /**
  * The unique identifier of the assignment if the topic is for grading, otherwise null.
  * @return assignmentId
  **/
  @Schema(description = "The unique identifier of the assignment if the topic is for grading, otherwise null.")
  public Integer getAssignmentId() {
    return assignmentId;
  }
  public void setAssignmentId(Integer assignmentId) {
    this.assignmentId = assignmentId;
  }
  public DiscussionTopic attachments(List<FileAttachment> attachments) {
    this.attachments = attachments;
    return this;
  }

  public DiscussionTopic addAttachmentsItem(FileAttachment attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<FileAttachment>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
  * Array of file attachments.
  * @return attachments
  **/
  @Schema(description = "Array of file attachments.")
  public List<FileAttachment> getAttachments() {
    return attachments;
  }
  public void setAttachments(List<FileAttachment> attachments) {
    this.attachments = attachments;
  }
  public DiscussionTopic delayedPostAt(OffsetDateTime delayedPostAt) {
    this.delayedPostAt = delayedPostAt;
    return this;
  }

  

  /**
  * The datetime to publish the topic (if not right away).
  * @return delayedPostAt
  **/
  @Schema(description = "The datetime to publish the topic (if not right away).")
  public OffsetDateTime getDelayedPostAt() {
    return delayedPostAt;
  }
  public void setDelayedPostAt(OffsetDateTime delayedPostAt) {
    this.delayedPostAt = delayedPostAt;
  }
  public DiscussionTopic discussionSubentryCount(Integer discussionSubentryCount) {
    this.discussionSubentryCount = discussionSubentryCount;
    return this;
  }

  

  /**
  * The count of entries in the topic.
  * @return discussionSubentryCount
  **/
  @Schema(example = "0", description = "The count of entries in the topic.")
  public Integer getDiscussionSubentryCount() {
    return discussionSubentryCount;
  }
  public void setDiscussionSubentryCount(Integer discussionSubentryCount) {
    this.discussionSubentryCount = discussionSubentryCount;
  }
  public DiscussionTopic discussionType(String discussionType) {
    this.discussionType = discussionType;
    return this;
  }

  

  /**
  * The type of discussion. Values are &#x27;side_comment&#x27;, for discussions that only allow one level of nested comments, and &#x27;threaded&#x27; for fully threaded discussions.
  * @return discussionType
  **/
  @Schema(example = "side_comment", description = "The type of discussion. Values are 'side_comment', for discussions that only allow one level of nested comments, and 'threaded' for fully threaded discussions.")
  public String getDiscussionType() {
    return discussionType;
  }
  public void setDiscussionType(String discussionType) {
    this.discussionType = discussionType;
  }
  public DiscussionTopic groupCategoryId(Integer groupCategoryId) {
    this.groupCategoryId = groupCategoryId;
    return this;
  }

  

  /**
  * The unique identifier of the group category if the topic is a group discussion, otherwise null.
  * @return groupCategoryId
  **/
  @Schema(description = "The unique identifier of the group category if the topic is a group discussion, otherwise null.")
  public Integer getGroupCategoryId() {
    return groupCategoryId;
  }
  public void setGroupCategoryId(Integer groupCategoryId) {
    this.groupCategoryId = groupCategoryId;
  }
  public DiscussionTopic groupTopicChildren(List<Object> groupTopicChildren) {
    this.groupTopicChildren = groupTopicChildren;
    return this;
  }

  public DiscussionTopic addGroupTopicChildrenItem(Object groupTopicChildrenItem) {
    if (this.groupTopicChildren == null) {
      this.groupTopicChildren = new ArrayList<Object>();
    }
    this.groupTopicChildren.add(groupTopicChildrenItem);
    return this;
  }

  /**
  * An array of group discussions the user is a part of. Fields include: id, group_id
  * @return groupTopicChildren
  **/
  @Schema(example = "[{group_id=1, id=5}, {group_id=5, id=7}, {group_id=4, id=10}]", description = "An array of group discussions the user is a part of. Fields include: id, group_id")
  public List<Object> getGroupTopicChildren() {
    return groupTopicChildren;
  }
  public void setGroupTopicChildren(List<Object> groupTopicChildren) {
    this.groupTopicChildren = groupTopicChildren;
  }
  public DiscussionTopic htmlUrl(String htmlUrl) {
    this.htmlUrl = htmlUrl;
    return this;
  }

  

  /**
  * The URL to the discussion topic in canvas.
  * @return htmlUrl
  **/
  @Schema(example = "https://<canvas>/courses/1/discussion_topics/2", description = "The URL to the discussion topic in canvas.")
  public String getHtmlUrl() {
    return htmlUrl;
  }
  public void setHtmlUrl(String htmlUrl) {
    this.htmlUrl = htmlUrl;
  }
  public DiscussionTopic id(Integer id) {
    this.id = id;
    return this;
  }

  

  /**
  * The ID of this topic.
  * @return id
  **/
  @Schema(example = "1", description = "The ID of this topic.")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }
  public DiscussionTopic lastReplyAt(OffsetDateTime lastReplyAt) {
    this.lastReplyAt = lastReplyAt;
    return this;
  }

  

  /**
  * The datetime for when the last reply was in the topic.
  * @return lastReplyAt
  **/
  @Schema(description = "The datetime for when the last reply was in the topic.")
  public OffsetDateTime getLastReplyAt() {
    return lastReplyAt;
  }
  public void setLastReplyAt(OffsetDateTime lastReplyAt) {
    this.lastReplyAt = lastReplyAt;
  }
  public DiscussionTopic lockAt(OffsetDateTime lockAt) {
    this.lockAt = lockAt;
    return this;
  }

  

  /**
  * The datetime to lock the topic (if ever).
  * @return lockAt
  **/
  @Schema(description = "The datetime to lock the topic (if ever).")
  public OffsetDateTime getLockAt() {
    return lockAt;
  }
  public void setLockAt(OffsetDateTime lockAt) {
    this.lockAt = lockAt;
  }
  public DiscussionTopic lockExplanation(String lockExplanation) {
    this.lockExplanation = lockExplanation;
    return this;
  }

  

  /**
  * (Optional) An explanation of why this is locked for the user. Present when locked_for_user is true.
  * @return lockExplanation
  **/
  @Schema(example = "This discussion is locked until September 1 at 12:00am", description = "(Optional) An explanation of why this is locked for the user. Present when locked_for_user is true.")
  public String getLockExplanation() {
    return lockExplanation;
  }
  public void setLockExplanation(String lockExplanation) {
    this.lockExplanation = lockExplanation;
  }
  public DiscussionTopic lockInfo(LockInfo lockInfo) {
    this.lockInfo = lockInfo;
    return this;
  }

  

  /**
  * Get lockInfo
  * @return lockInfo
  **/
  @Schema(description = "")
  public LockInfo getLockInfo() {
    return lockInfo;
  }
  public void setLockInfo(LockInfo lockInfo) {
    this.lockInfo = lockInfo;
  }
  public DiscussionTopic locked(Boolean locked) {
    this.locked = locked;
    return this;
  }

  

  /**
  * Whether or not the discussion is &#x27;closed for comments&#x27;.
  * @return locked
  **/
  @Schema(example = "false", description = "Whether or not the discussion is 'closed for comments'.")
  public Boolean isLocked() {
    return locked;
  }
  public void setLocked(Boolean locked) {
    this.locked = locked;
  }
  public DiscussionTopic lockedForUser(Boolean lockedForUser) {
    this.lockedForUser = lockedForUser;
    return this;
  }

  

  /**
  * Whether or not this is locked for the user.
  * @return lockedForUser
  **/
  @Schema(example = "true", description = "Whether or not this is locked for the user.")
  public Boolean isLockedForUser() {
    return lockedForUser;
  }
  public void setLockedForUser(Boolean lockedForUser) {
    this.lockedForUser = lockedForUser;
  }
  public DiscussionTopic message(String message) {
    this.message = message;
    return this;
  }

  

  /**
  * The HTML content of the message body.
  * @return message
  **/
  @Schema(example = "<p>content here</p>", description = "The HTML content of the message body.")
  public String getMessage() {
    return message;
  }
  public void setMessage(String message) {
    this.message = message;
  }
  public DiscussionTopic onlyGradersCanRate(Boolean onlyGradersCanRate) {
    this.onlyGradersCanRate = onlyGradersCanRate;
    return this;
  }

  

  /**
  * Whether or not grade permissions are required to rate entries.
  * @return onlyGradersCanRate
  **/
  @Schema(example = "true", description = "Whether or not grade permissions are required to rate entries.")
  public Boolean isOnlyGradersCanRate() {
    return onlyGradersCanRate;
  }
  public void setOnlyGradersCanRate(Boolean onlyGradersCanRate) {
    this.onlyGradersCanRate = onlyGradersCanRate;
  }
  public DiscussionTopic permissions(Object permissions) {
    this.permissions = permissions;
    return this;
  }

  

  /**
  * The current user&#x27;s permissions on this topic.
  * @return permissions
  **/
  @Schema(example = "{\"attach\":true}", description = "The current user's permissions on this topic.")
  public Object getPermissions() {
    return permissions;
  }
  public void setPermissions(Object permissions) {
    this.permissions = permissions;
  }
  public DiscussionTopic pinned(Boolean pinned) {
    this.pinned = pinned;
    return this;
  }

  

  /**
  * Whether or not the discussion has been &#x27;pinned&#x27; by an instructor
  * @return pinned
  **/
  @Schema(example = "false", description = "Whether or not the discussion has been 'pinned' by an instructor")
  public Boolean isPinned() {
    return pinned;
  }
  public void setPinned(Boolean pinned) {
    this.pinned = pinned;
  }
  public DiscussionTopic podcastUrl(String podcastUrl) {
    this.podcastUrl = podcastUrl;
    return this;
  }

  

  /**
  * If the topic is a podcast topic this is the feed url for the current user.
  * @return podcastUrl
  **/
  @Schema(example = "/feeds/topics/1/enrollment_1XAcepje4u228rt4mi7Z1oFbRpn3RAkTzuXIGOPe.rss", description = "If the topic is a podcast topic this is the feed url for the current user.")
  public String getPodcastUrl() {
    return podcastUrl;
  }
  public void setPodcastUrl(String podcastUrl) {
    this.podcastUrl = podcastUrl;
  }
  public DiscussionTopic postedAt(OffsetDateTime postedAt) {
    this.postedAt = postedAt;
    return this;
  }

  

  /**
  * The datetime the topic was posted. If it is null it hasn&#x27;t been posted yet. (see delayed_post_at)
  * @return postedAt
  **/
  @Schema(description = "The datetime the topic was posted. If it is null it hasn't been posted yet. (see delayed_post_at)")
  public OffsetDateTime getPostedAt() {
    return postedAt;
  }
  public void setPostedAt(OffsetDateTime postedAt) {
    this.postedAt = postedAt;
  }
  public DiscussionTopic published(Boolean published) {
    this.published = published;
    return this;
  }

  

  /**
  * Whether this discussion topic is published (true) or draft state (false)
  * @return published
  **/
  @Schema(example = "true", description = "Whether this discussion topic is published (true) or draft state (false)")
  public Boolean isPublished() {
    return published;
  }
  public void setPublished(Boolean published) {
    this.published = published;
  }
  public DiscussionTopic readState(String readState) {
    this.readState = readState;
    return this;
  }

  

  /**
  * The read_state of the topic for the current user, &#x27;read&#x27; or &#x27;unread&#x27;.
  * @return readState
  **/
  @Schema(example = "read", description = "The read_state of the topic for the current user, 'read' or 'unread'.")
  public String getReadState() {
    return readState;
  }
  public void setReadState(String readState) {
    this.readState = readState;
  }
  public DiscussionTopic requireInitialPost(Boolean requireInitialPost) {
    this.requireInitialPost = requireInitialPost;
    return this;
  }

  

  /**
  * If true then a user may not respond to other replies until that user has made an initial reply. Defaults to false.
  * @return requireInitialPost
  **/
  @Schema(example = "false", description = "If true then a user may not respond to other replies until that user has made an initial reply. Defaults to false.")
  public Boolean isRequireInitialPost() {
    return requireInitialPost;
  }
  public void setRequireInitialPost(Boolean requireInitialPost) {
    this.requireInitialPost = requireInitialPost;
  }
  public DiscussionTopic rootTopicId(Integer rootTopicId) {
    this.rootTopicId = rootTopicId;
    return this;
  }

  

  /**
  * If the topic is for grading and a group assignment this will point to the original topic in the course.
  * @return rootTopicId
  **/
  @Schema(description = "If the topic is for grading and a group assignment this will point to the original topic in the course.")
  public Integer getRootTopicId() {
    return rootTopicId;
  }
  public void setRootTopicId(Integer rootTopicId) {
    this.rootTopicId = rootTopicId;
  }
  public DiscussionTopic sortByRating(Boolean sortByRating) {
    this.sortByRating = sortByRating;
    return this;
  }

  

  /**
  * Whether or not entries should be sorted by rating.
  * @return sortByRating
  **/
  @Schema(example = "true", description = "Whether or not entries should be sorted by rating.")
  public Boolean isSortByRating() {
    return sortByRating;
  }
  public void setSortByRating(Boolean sortByRating) {
    this.sortByRating = sortByRating;
  }
  public DiscussionTopic subscribed(Boolean subscribed) {
    this.subscribed = subscribed;
    return this;
  }

  

  /**
  * Whether or not the current user is subscribed to this topic.
  * @return subscribed
  **/
  @Schema(example = "true", description = "Whether or not the current user is subscribed to this topic.")
  public Boolean isSubscribed() {
    return subscribed;
  }
  public void setSubscribed(Boolean subscribed) {
    this.subscribed = subscribed;
  }
  public DiscussionTopic subscriptionHold(String subscriptionHold) {
    this.subscriptionHold = subscriptionHold;
    return this;
  }

  

  /**
  * (Optional) Why the user cannot subscribe to this topic. Only one reason will be returned even if multiple apply. Can be one of: &#x27;initial_post_required&#x27;: The user must post a reply first; &#x27;not_in_group_set&#x27;: The user is not in the group set for this graded group discussion; &#x27;not_in_group&#x27;: The user is not in this topic&#x27;s group; &#x27;topic_is_announcement&#x27;: This topic is an announcement
  * @return subscriptionHold
  **/
  @Schema(example = "not_in_group_set", description = "(Optional) Why the user cannot subscribe to this topic. Only one reason will be returned even if multiple apply. Can be one of: 'initial_post_required': The user must post a reply first; 'not_in_group_set': The user is not in the group set for this graded group discussion; 'not_in_group': The user is not in this topic's group; 'topic_is_announcement': This topic is an announcement")
  public String getSubscriptionHold() {
    return subscriptionHold;
  }
  public void setSubscriptionHold(String subscriptionHold) {
    this.subscriptionHold = subscriptionHold;
  }
  public DiscussionTopic title(String title) {
    this.title = title;
    return this;
  }

  

  /**
  * The topic title.
  * @return title
  **/
  @Schema(example = "Topic 1", description = "The topic title.")
  public String getTitle() {
    return title;
  }
  public void setTitle(String title) {
    this.title = title;
  }
  public DiscussionTopic topicChildren(List<Integer> topicChildren) {
    this.topicChildren = topicChildren;
    return this;
  }

  public DiscussionTopic addTopicChildrenItem(Integer topicChildrenItem) {
    if (this.topicChildren == null) {
      this.topicChildren = new ArrayList<Integer>();
    }
    this.topicChildren.add(topicChildrenItem);
    return this;
  }

  /**
  * DEPRECATED An array of topic_ids for the group discussions the user is a part of.
  * @return topicChildren
  **/
  @Schema(example = "[5, 7, 10]", description = "DEPRECATED An array of topic_ids for the group discussions the user is a part of.")
  public List<Integer> getTopicChildren() {
    return topicChildren;
  }
  public void setTopicChildren(List<Integer> topicChildren) {
    this.topicChildren = topicChildren;
  }
  public DiscussionTopic unreadCount(Integer unreadCount) {
    this.unreadCount = unreadCount;
    return this;
  }

  

  /**
  * The count of unread entries of this topic for the current user.
  * @return unreadCount
  **/
  @Schema(example = "0", description = "The count of unread entries of this topic for the current user.")
  public Integer getUnreadCount() {
    return unreadCount;
  }
  public void setUnreadCount(Integer unreadCount) {
    this.unreadCount = unreadCount;
  }
  public DiscussionTopic userCanSeePosts(Boolean userCanSeePosts) {
    this.userCanSeePosts = userCanSeePosts;
    return this;
  }

  

  /**
  * Whether or not posts in this topic are visible to the user.
  * @return userCanSeePosts
  **/
  @Schema(example = "true", description = "Whether or not posts in this topic are visible to the user.")
  public Boolean isUserCanSeePosts() {
    return userCanSeePosts;
  }
  public void setUserCanSeePosts(Boolean userCanSeePosts) {
    this.userCanSeePosts = userCanSeePosts;
  }
  public DiscussionTopic userName(String userName) {
    this.userName = userName;
    return this;
  }

  

  /**
  * The username of the topic creator.
  * @return userName
  **/
  @Schema(example = "User Name", description = "The username of the topic creator.")
  public String getUserName() {
    return userName;
  }
  public void setUserName(String userName) {
    this.userName = userName;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiscussionTopic discussionTopic = (DiscussionTopic) o;
    return Objects.equals(this.allowRating, discussionTopic.allowRating) &&
        Objects.equals(this.assignmentId, discussionTopic.assignmentId) &&
        Objects.equals(this.attachments, discussionTopic.attachments) &&
        Objects.equals(this.delayedPostAt, discussionTopic.delayedPostAt) &&
        Objects.equals(this.discussionSubentryCount, discussionTopic.discussionSubentryCount) &&
        Objects.equals(this.discussionType, discussionTopic.discussionType) &&
        Objects.equals(this.groupCategoryId, discussionTopic.groupCategoryId) &&
        Objects.equals(this.groupTopicChildren, discussionTopic.groupTopicChildren) &&
        Objects.equals(this.htmlUrl, discussionTopic.htmlUrl) &&
        Objects.equals(this.id, discussionTopic.id) &&
        Objects.equals(this.lastReplyAt, discussionTopic.lastReplyAt) &&
        Objects.equals(this.lockAt, discussionTopic.lockAt) &&
        Objects.equals(this.lockExplanation, discussionTopic.lockExplanation) &&
        Objects.equals(this.lockInfo, discussionTopic.lockInfo) &&
        Objects.equals(this.locked, discussionTopic.locked) &&
        Objects.equals(this.lockedForUser, discussionTopic.lockedForUser) &&
        Objects.equals(this.message, discussionTopic.message) &&
        Objects.equals(this.onlyGradersCanRate, discussionTopic.onlyGradersCanRate) &&
        Objects.equals(this.permissions, discussionTopic.permissions) &&
        Objects.equals(this.pinned, discussionTopic.pinned) &&
        Objects.equals(this.podcastUrl, discussionTopic.podcastUrl) &&
        Objects.equals(this.postedAt, discussionTopic.postedAt) &&
        Objects.equals(this.published, discussionTopic.published) &&
        Objects.equals(this.readState, discussionTopic.readState) &&
        Objects.equals(this.requireInitialPost, discussionTopic.requireInitialPost) &&
        Objects.equals(this.rootTopicId, discussionTopic.rootTopicId) &&
        Objects.equals(this.sortByRating, discussionTopic.sortByRating) &&
        Objects.equals(this.subscribed, discussionTopic.subscribed) &&
        Objects.equals(this.subscriptionHold, discussionTopic.subscriptionHold) &&
        Objects.equals(this.title, discussionTopic.title) &&
        Objects.equals(this.topicChildren, discussionTopic.topicChildren) &&
        Objects.equals(this.unreadCount, discussionTopic.unreadCount) &&
        Objects.equals(this.userCanSeePosts, discussionTopic.userCanSeePosts) &&
        Objects.equals(this.userName, discussionTopic.userName);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(allowRating, assignmentId, attachments, delayedPostAt, discussionSubentryCount, discussionType, groupCategoryId, groupTopicChildren, htmlUrl, id, lastReplyAt, lockAt, lockExplanation, lockInfo, locked, lockedForUser, message, onlyGradersCanRate, permissions, pinned, podcastUrl, postedAt, published, readState, requireInitialPost, rootTopicId, sortByRating, subscribed, subscriptionHold, title, topicChildren, unreadCount, userCanSeePosts, userName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiscussionTopic {\n");
    
    sb.append("    allowRating: ").append(toIndentedString(allowRating)).append("\n");
    sb.append("    assignmentId: ").append(toIndentedString(assignmentId)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    delayedPostAt: ").append(toIndentedString(delayedPostAt)).append("\n");
    sb.append("    discussionSubentryCount: ").append(toIndentedString(discussionSubentryCount)).append("\n");
    sb.append("    discussionType: ").append(toIndentedString(discussionType)).append("\n");
    sb.append("    groupCategoryId: ").append(toIndentedString(groupCategoryId)).append("\n");
    sb.append("    groupTopicChildren: ").append(toIndentedString(groupTopicChildren)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastReplyAt: ").append(toIndentedString(lastReplyAt)).append("\n");
    sb.append("    lockAt: ").append(toIndentedString(lockAt)).append("\n");
    sb.append("    lockExplanation: ").append(toIndentedString(lockExplanation)).append("\n");
    sb.append("    lockInfo: ").append(toIndentedString(lockInfo)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("    lockedForUser: ").append(toIndentedString(lockedForUser)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    onlyGradersCanRate: ").append(toIndentedString(onlyGradersCanRate)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    pinned: ").append(toIndentedString(pinned)).append("\n");
    sb.append("    podcastUrl: ").append(toIndentedString(podcastUrl)).append("\n");
    sb.append("    postedAt: ").append(toIndentedString(postedAt)).append("\n");
    sb.append("    published: ").append(toIndentedString(published)).append("\n");
    sb.append("    readState: ").append(toIndentedString(readState)).append("\n");
    sb.append("    requireInitialPost: ").append(toIndentedString(requireInitialPost)).append("\n");
    sb.append("    rootTopicId: ").append(toIndentedString(rootTopicId)).append("\n");
    sb.append("    sortByRating: ").append(toIndentedString(sortByRating)).append("\n");
    sb.append("    subscribed: ").append(toIndentedString(subscribed)).append("\n");
    sb.append("    subscriptionHold: ").append(toIndentedString(subscriptionHold)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    topicChildren: ").append(toIndentedString(topicChildren)).append("\n");
    sb.append("    unreadCount: ").append(toIndentedString(unreadCount)).append("\n");
    sb.append("    userCanSeePosts: ").append(toIndentedString(userCanSeePosts)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
