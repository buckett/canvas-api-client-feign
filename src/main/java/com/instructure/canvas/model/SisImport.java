/*
 * canvas.instructure.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.instructure.canvas.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.instructure.canvas.model.SisImportData;
import com.instructure.canvas.model.User;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * SisImport
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-11-06T15:34:49.014533Z[Europe/London]")
public class SisImport {

  @JsonProperty("add_sis_stickiness")

  private Boolean addSisStickiness = null;

  @JsonProperty("batch_mode")

  private Boolean batchMode = null;

  @JsonProperty("batch_mode_term_id")

  private String batchModeTermId = null;

  @JsonProperty("clear_sis_stickiness")

  private Boolean clearSisStickiness = null;

  @JsonProperty("created_at")

  private OffsetDateTime createdAt = null;

  @JsonProperty("csv_attachments")

  private List<List<java.io.File>> csvAttachments = null;

  @JsonProperty("data")

  private SisImportData data = null;

  @JsonProperty("diffed_against_import_id")

  private Integer diffedAgainstImportId = null;

  @JsonProperty("diffing_data_set_identifier")

  private String diffingDataSetIdentifier = null;

  @JsonProperty("ended_at")

  private OffsetDateTime endedAt = null;

  @JsonProperty("errors_attachment")

  private java.io.File errorsAttachment = null;

  @JsonProperty("id")

  private Integer id = null;

  @JsonProperty("multi_term_batch_mode")

  private Boolean multiTermBatchMode = null;

  @JsonProperty("override_sis_stickiness")

  private Boolean overrideSisStickiness = null;

  @JsonProperty("processing_errors")

  private List<List<String>> processingErrors = null;

  @JsonProperty("processing_warnings")

  private List<List<String>> processingWarnings = null;

  @JsonProperty("progress")

  private String progress = null;

  @JsonProperty("skip_deletes")

  private Boolean skipDeletes = null;

  @JsonProperty("updated_at")

  private OffsetDateTime updatedAt = null;

  @JsonProperty("user")

  private User user = null;

  @JsonProperty("workflow_state")

  private String workflowState = null;
  public SisImport addSisStickiness(Boolean addSisStickiness) {
    this.addSisStickiness = addSisStickiness;
    return this;
  }

  

  /**
  * Whether stickiness was added to the batch changes.
  * @return addSisStickiness
  **/
  @Schema(example = "false", description = "Whether stickiness was added to the batch changes.")
  public Boolean isAddSisStickiness() {
    return addSisStickiness;
  }
  public void setAddSisStickiness(Boolean addSisStickiness) {
    this.addSisStickiness = addSisStickiness;
  }
  public SisImport batchMode(Boolean batchMode) {
    this.batchMode = batchMode;
    return this;
  }

  

  /**
  * Whether the import was run in batch mode.
  * @return batchMode
  **/
  @Schema(example = "true", description = "Whether the import was run in batch mode.")
  public Boolean isBatchMode() {
    return batchMode;
  }
  public void setBatchMode(Boolean batchMode) {
    this.batchMode = batchMode;
  }
  public SisImport batchModeTermId(String batchModeTermId) {
    this.batchModeTermId = batchModeTermId;
    return this;
  }

  

  /**
  * The term the batch was limited to.
  * @return batchModeTermId
  **/
  @Schema(example = "1234", description = "The term the batch was limited to.")
  public String getBatchModeTermId() {
    return batchModeTermId;
  }
  public void setBatchModeTermId(String batchModeTermId) {
    this.batchModeTermId = batchModeTermId;
  }
  public SisImport clearSisStickiness(Boolean clearSisStickiness) {
    this.clearSisStickiness = clearSisStickiness;
    return this;
  }

  

  /**
  * Whether stickiness was cleared.
  * @return clearSisStickiness
  **/
  @Schema(example = "false", description = "Whether stickiness was cleared.")
  public Boolean isClearSisStickiness() {
    return clearSisStickiness;
  }
  public void setClearSisStickiness(Boolean clearSisStickiness) {
    this.clearSisStickiness = clearSisStickiness;
  }
  public SisImport createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  

  /**
  * The date the SIS import was created.
  * @return createdAt
  **/
  @Schema(description = "The date the SIS import was created.")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }
  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }
  public SisImport csvAttachments(List<List<java.io.File>> csvAttachments) {
    this.csvAttachments = csvAttachments;
    return this;
  }

  public SisImport addCsvAttachmentsItem(List<java.io.File> csvAttachmentsItem) {
    if (this.csvAttachments == null) {
      this.csvAttachments = new ArrayList<List<java.io.File>>();
    }
    this.csvAttachments.add(csvAttachmentsItem);
    return this;
  }

  /**
  * An array of CSV files for processing
  * @return csvAttachments
  **/
  @Schema(example = "[]", description = "An array of CSV files for processing")
  public List<List<java.io.File>> getCsvAttachments() {
    return csvAttachments;
  }
  public void setCsvAttachments(List<List<java.io.File>> csvAttachments) {
    this.csvAttachments = csvAttachments;
  }
  public SisImport data(SisImportData data) {
    this.data = data;
    return this;
  }

  

  /**
  * Get data
  * @return data
  **/
  @Schema(description = "")
  public SisImportData getData() {
    return data;
  }
  public void setData(SisImportData data) {
    this.data = data;
  }
  public SisImport diffedAgainstImportId(Integer diffedAgainstImportId) {
    this.diffedAgainstImportId = diffedAgainstImportId;
    return this;
  }

  

  /**
  * The ID of the SIS Import that this import was diffed against
  * @return diffedAgainstImportId
  **/
  @Schema(example = "1", description = "The ID of the SIS Import that this import was diffed against")
  public Integer getDiffedAgainstImportId() {
    return diffedAgainstImportId;
  }
  public void setDiffedAgainstImportId(Integer diffedAgainstImportId) {
    this.diffedAgainstImportId = diffedAgainstImportId;
  }
  public SisImport diffingDataSetIdentifier(String diffingDataSetIdentifier) {
    this.diffingDataSetIdentifier = diffingDataSetIdentifier;
    return this;
  }

  

  /**
  * The identifier of the data set that this SIS batch diffs against
  * @return diffingDataSetIdentifier
  **/
  @Schema(example = "account-5-enrollments", description = "The identifier of the data set that this SIS batch diffs against")
  public String getDiffingDataSetIdentifier() {
    return diffingDataSetIdentifier;
  }
  public void setDiffingDataSetIdentifier(String diffingDataSetIdentifier) {
    this.diffingDataSetIdentifier = diffingDataSetIdentifier;
  }
  public SisImport endedAt(OffsetDateTime endedAt) {
    this.endedAt = endedAt;
    return this;
  }

  

  /**
  * The date the SIS import finished. Returns null if not finished.
  * @return endedAt
  **/
  @Schema(description = "The date the SIS import finished. Returns null if not finished.")
  public OffsetDateTime getEndedAt() {
    return endedAt;
  }
  public void setEndedAt(OffsetDateTime endedAt) {
    this.endedAt = endedAt;
  }
  public SisImport errorsAttachment(java.io.File errorsAttachment) {
    this.errorsAttachment = errorsAttachment;
    return this;
  }

  

  /**
  * Get errorsAttachment
  * @return errorsAttachment
  **/
  @Schema(description = "")
  public java.io.File getErrorsAttachment() {
    return errorsAttachment;
  }
  public void setErrorsAttachment(java.io.File errorsAttachment) {
    this.errorsAttachment = errorsAttachment;
  }
  public SisImport id(Integer id) {
    this.id = id;
    return this;
  }

  

  /**
  * The unique identifier for the SIS import.
  * @return id
  **/
  @Schema(example = "1", description = "The unique identifier for the SIS import.")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }
  public SisImport multiTermBatchMode(Boolean multiTermBatchMode) {
    this.multiTermBatchMode = multiTermBatchMode;
    return this;
  }

  

  /**
  * Enables batch mode against all terms in term file. Requires change_threshold to be set.
  * @return multiTermBatchMode
  **/
  @Schema(example = "false", description = "Enables batch mode against all terms in term file. Requires change_threshold to be set.")
  public Boolean isMultiTermBatchMode() {
    return multiTermBatchMode;
  }
  public void setMultiTermBatchMode(Boolean multiTermBatchMode) {
    this.multiTermBatchMode = multiTermBatchMode;
  }
  public SisImport overrideSisStickiness(Boolean overrideSisStickiness) {
    this.overrideSisStickiness = overrideSisStickiness;
    return this;
  }

  

  /**
  * Whether UI changes were overridden.
  * @return overrideSisStickiness
  **/
  @Schema(example = "false", description = "Whether UI changes were overridden.")
  public Boolean isOverrideSisStickiness() {
    return overrideSisStickiness;
  }
  public void setOverrideSisStickiness(Boolean overrideSisStickiness) {
    this.overrideSisStickiness = overrideSisStickiness;
  }
  public SisImport processingErrors(List<List<String>> processingErrors) {
    this.processingErrors = processingErrors;
    return this;
  }

  public SisImport addProcessingErrorsItem(List<String> processingErrorsItem) {
    if (this.processingErrors == null) {
      this.processingErrors = new ArrayList<List<String>>();
    }
    this.processingErrors.add(processingErrorsItem);
    return this;
  }

  /**
  * An array of CSV_file/error_message pairs.
  * @return processingErrors
  **/
  @Schema(example = "[[students.csv, Error while importing CSV. Please contact support.]]", description = "An array of CSV_file/error_message pairs.")
  public List<List<String>> getProcessingErrors() {
    return processingErrors;
  }
  public void setProcessingErrors(List<List<String>> processingErrors) {
    this.processingErrors = processingErrors;
  }
  public SisImport processingWarnings(List<List<String>> processingWarnings) {
    this.processingWarnings = processingWarnings;
    return this;
  }

  public SisImport addProcessingWarningsItem(List<String> processingWarningsItem) {
    if (this.processingWarnings == null) {
      this.processingWarnings = new ArrayList<List<String>>();
    }
    this.processingWarnings.add(processingWarningsItem);
    return this;
  }

  /**
  * Only imports that are complete will get this data. An array of CSV_file/warning_message pairs.
  * @return processingWarnings
  **/
  @Schema(example = "[[students.csv, user John Doe has already claimed john_doe's requested login information, skipping]]", description = "Only imports that are complete will get this data. An array of CSV_file/warning_message pairs.")
  public List<List<String>> getProcessingWarnings() {
    return processingWarnings;
  }
  public void setProcessingWarnings(List<List<String>> processingWarnings) {
    this.processingWarnings = processingWarnings;
  }
  public SisImport progress(String progress) {
    this.progress = progress;
    return this;
  }

  

  /**
  * The progress of the SIS import. The progress will reset when using batch_mode and have a different progress for the cleanup stage
  * @return progress
  **/
  @Schema(example = "100", description = "The progress of the SIS import. The progress will reset when using batch_mode and have a different progress for the cleanup stage")
  public String getProgress() {
    return progress;
  }
  public void setProgress(String progress) {
    this.progress = progress;
  }
  public SisImport skipDeletes(Boolean skipDeletes) {
    this.skipDeletes = skipDeletes;
    return this;
  }

  

  /**
  * When set the import will skip any deletes.
  * @return skipDeletes
  **/
  @Schema(example = "false", description = "When set the import will skip any deletes.")
  public Boolean isSkipDeletes() {
    return skipDeletes;
  }
  public void setSkipDeletes(Boolean skipDeletes) {
    this.skipDeletes = skipDeletes;
  }
  public SisImport updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  

  /**
  * The date the SIS import was last updated.
  * @return updatedAt
  **/
  @Schema(description = "The date the SIS import was last updated.")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }
  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }
  public SisImport user(User user) {
    this.user = user;
    return this;
  }

  

  /**
  * Get user
  * @return user
  **/
  @Schema(description = "")
  public User getUser() {
    return user;
  }
  public void setUser(User user) {
    this.user = user;
  }
  public SisImport workflowState(String workflowState) {
    this.workflowState = workflowState;
    return this;
  }

  

  /**
  * The current state of the SIS import.  - &#x27;created&#x27;: The SIS import has been created.  - &#x27;importing&#x27;: The SIS import is currently processing.  - &#x27;cleanup_batch&#x27;: The SIS import is currently cleaning up courses, sections, and enrollments not included in the batch for batch_mode imports.  - &#x27;imported&#x27;: The SIS import has completed successfully.  - &#x27;imported_with_messages&#x27;: The SIS import completed with errors or warnings.  - &#x27;aborted&#x27;: The SIS import was aborted.  - &#x27;failed_with_messages&#x27;: The SIS import failed with errors.  - &#x27;failed&#x27;: The SIS import failed.
  * @return workflowState
  **/
  @Schema(example = "imported", description = "The current state of the SIS import.  - 'created': The SIS import has been created.  - 'importing': The SIS import is currently processing.  - 'cleanup_batch': The SIS import is currently cleaning up courses, sections, and enrollments not included in the batch for batch_mode imports.  - 'imported': The SIS import has completed successfully.  - 'imported_with_messages': The SIS import completed with errors or warnings.  - 'aborted': The SIS import was aborted.  - 'failed_with_messages': The SIS import failed with errors.  - 'failed': The SIS import failed.")
  public String getWorkflowState() {
    return workflowState;
  }
  public void setWorkflowState(String workflowState) {
    this.workflowState = workflowState;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SisImport sisImport = (SisImport) o;
    return Objects.equals(this.addSisStickiness, sisImport.addSisStickiness) &&
        Objects.equals(this.batchMode, sisImport.batchMode) &&
        Objects.equals(this.batchModeTermId, sisImport.batchModeTermId) &&
        Objects.equals(this.clearSisStickiness, sisImport.clearSisStickiness) &&
        Objects.equals(this.createdAt, sisImport.createdAt) &&
        Objects.equals(this.csvAttachments, sisImport.csvAttachments) &&
        Objects.equals(this.data, sisImport.data) &&
        Objects.equals(this.diffedAgainstImportId, sisImport.diffedAgainstImportId) &&
        Objects.equals(this.diffingDataSetIdentifier, sisImport.diffingDataSetIdentifier) &&
        Objects.equals(this.endedAt, sisImport.endedAt) &&
        Objects.equals(this.errorsAttachment, sisImport.errorsAttachment) &&
        Objects.equals(this.id, sisImport.id) &&
        Objects.equals(this.multiTermBatchMode, sisImport.multiTermBatchMode) &&
        Objects.equals(this.overrideSisStickiness, sisImport.overrideSisStickiness) &&
        Objects.equals(this.processingErrors, sisImport.processingErrors) &&
        Objects.equals(this.processingWarnings, sisImport.processingWarnings) &&
        Objects.equals(this.progress, sisImport.progress) &&
        Objects.equals(this.skipDeletes, sisImport.skipDeletes) &&
        Objects.equals(this.updatedAt, sisImport.updatedAt) &&
        Objects.equals(this.user, sisImport.user) &&
        Objects.equals(this.workflowState, sisImport.workflowState);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(addSisStickiness, batchMode, batchModeTermId, clearSisStickiness, createdAt, csvAttachments, data, diffedAgainstImportId, diffingDataSetIdentifier, endedAt, errorsAttachment, id, multiTermBatchMode, overrideSisStickiness, processingErrors, processingWarnings, progress, skipDeletes, updatedAt, user, workflowState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SisImport {\n");
    
    sb.append("    addSisStickiness: ").append(toIndentedString(addSisStickiness)).append("\n");
    sb.append("    batchMode: ").append(toIndentedString(batchMode)).append("\n");
    sb.append("    batchModeTermId: ").append(toIndentedString(batchModeTermId)).append("\n");
    sb.append("    clearSisStickiness: ").append(toIndentedString(clearSisStickiness)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    csvAttachments: ").append(toIndentedString(csvAttachments)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    diffedAgainstImportId: ").append(toIndentedString(diffedAgainstImportId)).append("\n");
    sb.append("    diffingDataSetIdentifier: ").append(toIndentedString(diffingDataSetIdentifier)).append("\n");
    sb.append("    endedAt: ").append(toIndentedString(endedAt)).append("\n");
    sb.append("    errorsAttachment: ").append(toIndentedString(errorsAttachment)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    multiTermBatchMode: ").append(toIndentedString(multiTermBatchMode)).append("\n");
    sb.append("    overrideSisStickiness: ").append(toIndentedString(overrideSisStickiness)).append("\n");
    sb.append("    processingErrors: ").append(toIndentedString(processingErrors)).append("\n");
    sb.append("    processingWarnings: ").append(toIndentedString(processingWarnings)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    skipDeletes: ").append(toIndentedString(skipDeletes)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    workflowState: ").append(toIndentedString(workflowState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
