/*
 * canvas.instructure.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.instructure.canvas.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.instructure.canvas.model.RubricAssessment;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;

/**
 * Rubric
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-11-06T15:34:49.014533Z[Europe/London]")
public class Rubric {

  @JsonProperty("assessments")

  private List<RubricAssessment> assessments = null;

  @JsonProperty("context_id")

  private Integer contextId = null;

  @JsonProperty("context_type")

  private String contextType = null;

  @JsonProperty("free_form_criterion_comments")

  private Boolean freeFormCriterionComments = null;

  @JsonProperty("hide_score_total")

  private Boolean hideScoreTotal = null;

  @JsonProperty("id")

  private Integer id = null;

  @JsonProperty("points_possible")

  private Integer pointsPossible = null;

  @JsonProperty("read_only")

  private Boolean readOnly = null;

  @JsonProperty("reusable")

  private Boolean reusable = null;

  @JsonProperty("title")

  private String title = null;
  public Rubric assessments(List<RubricAssessment> assessments) {
    this.assessments = assessments;
    return this;
  }

  public Rubric addAssessmentsItem(RubricAssessment assessmentsItem) {
    if (this.assessments == null) {
      this.assessments = new ArrayList<RubricAssessment>();
    }
    this.assessments.add(assessmentsItem);
    return this;
  }

  /**
  * If an assessment type is included in the &#x27;include&#x27; parameter, includes an array of rubric assessment objects for a given rubric, based on the assessment type requested. If the user does not request an assessment type this key will be absent.
  * @return assessments
  **/
  @Schema(description = "If an assessment type is included in the 'include' parameter, includes an array of rubric assessment objects for a given rubric, based on the assessment type requested. If the user does not request an assessment type this key will be absent.")
  public List<RubricAssessment> getAssessments() {
    return assessments;
  }
  public void setAssessments(List<RubricAssessment> assessments) {
    this.assessments = assessments;
  }
  public Rubric contextId(Integer contextId) {
    this.contextId = contextId;
    return this;
  }

  

  /**
  * the context owning the rubric
  * @return contextId
  **/
  @Schema(example = "1", description = "the context owning the rubric")
  public Integer getContextId() {
    return contextId;
  }
  public void setContextId(Integer contextId) {
    this.contextId = contextId;
  }
  public Rubric contextType(String contextType) {
    this.contextType = contextType;
    return this;
  }

  

  /**
  * Get contextType
  * @return contextType
  **/
  @Schema(example = "Course", description = "")
  public String getContextType() {
    return contextType;
  }
  public void setContextType(String contextType) {
    this.contextType = contextType;
  }
  public Rubric freeFormCriterionComments(Boolean freeFormCriterionComments) {
    this.freeFormCriterionComments = freeFormCriterionComments;
    return this;
  }

  

  /**
  * whether or not free-form comments are used
  * @return freeFormCriterionComments
  **/
  @Schema(example = "true", description = "whether or not free-form comments are used")
  public Boolean isFreeFormCriterionComments() {
    return freeFormCriterionComments;
  }
  public void setFreeFormCriterionComments(Boolean freeFormCriterionComments) {
    this.freeFormCriterionComments = freeFormCriterionComments;
  }
  public Rubric hideScoreTotal(Boolean hideScoreTotal) {
    this.hideScoreTotal = hideScoreTotal;
    return this;
  }

  

  /**
  * Get hideScoreTotal
  * @return hideScoreTotal
  **/
  @Schema(example = "true", description = "")
  public Boolean isHideScoreTotal() {
    return hideScoreTotal;
  }
  public void setHideScoreTotal(Boolean hideScoreTotal) {
    this.hideScoreTotal = hideScoreTotal;
  }
  public Rubric id(Integer id) {
    this.id = id;
    return this;
  }

  

  /**
  * the ID of the rubric
  * @return id
  **/
  @Schema(example = "1", description = "the ID of the rubric")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }
  public Rubric pointsPossible(Integer pointsPossible) {
    this.pointsPossible = pointsPossible;
    return this;
  }

  

  /**
  * Get pointsPossible
  * @return pointsPossible
  **/
  @Schema(description = "")
  public Integer getPointsPossible() {
    return pointsPossible;
  }
  public void setPointsPossible(Integer pointsPossible) {
    this.pointsPossible = pointsPossible;
  }
  public Rubric readOnly(Boolean readOnly) {
    this.readOnly = readOnly;
    return this;
  }

  

  /**
  * Get readOnly
  * @return readOnly
  **/
  @Schema(example = "true", description = "")
  public Boolean isReadOnly() {
    return readOnly;
  }
  public void setReadOnly(Boolean readOnly) {
    this.readOnly = readOnly;
  }
  public Rubric reusable(Boolean reusable) {
    this.reusable = reusable;
    return this;
  }

  

  /**
  * Get reusable
  * @return reusable
  **/
  @Schema(example = "false", description = "")
  public Boolean isReusable() {
    return reusable;
  }
  public void setReusable(Boolean reusable) {
    this.reusable = reusable;
  }
  public Rubric title(String title) {
    this.title = title;
    return this;
  }

  

  /**
  * title of the rubric
  * @return title
  **/
  @Schema(example = "some title", description = "title of the rubric")
  public String getTitle() {
    return title;
  }
  public void setTitle(String title) {
    this.title = title;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Rubric rubric = (Rubric) o;
    return Objects.equals(this.assessments, rubric.assessments) &&
        Objects.equals(this.contextId, rubric.contextId) &&
        Objects.equals(this.contextType, rubric.contextType) &&
        Objects.equals(this.freeFormCriterionComments, rubric.freeFormCriterionComments) &&
        Objects.equals(this.hideScoreTotal, rubric.hideScoreTotal) &&
        Objects.equals(this.id, rubric.id) &&
        Objects.equals(this.pointsPossible, rubric.pointsPossible) &&
        Objects.equals(this.readOnly, rubric.readOnly) &&
        Objects.equals(this.reusable, rubric.reusable) &&
        Objects.equals(this.title, rubric.title);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(assessments, contextId, contextType, freeFormCriterionComments, hideScoreTotal, id, pointsPossible, readOnly, reusable, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Rubric {\n");
    
    sb.append("    assessments: ").append(toIndentedString(assessments)).append("\n");
    sb.append("    contextId: ").append(toIndentedString(contextId)).append("\n");
    sb.append("    contextType: ").append(toIndentedString(contextType)).append("\n");
    sb.append("    freeFormCriterionComments: ").append(toIndentedString(freeFormCriterionComments)).append("\n");
    sb.append("    hideScoreTotal: ").append(toIndentedString(hideScoreTotal)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    pointsPossible: ").append(toIndentedString(pointsPossible)).append("\n");
    sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
    sb.append("    reusable: ").append(toIndentedString(reusable)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
