/*
 * canvas.instructure.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.instructure.canvas.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.OffsetDateTime;

/**
 * ExternalFeed
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-11-06T15:34:49.014533Z[Europe/London]")
public class ExternalFeed {

  @JsonProperty("created_at")

  private OffsetDateTime createdAt = null;

  @JsonProperty("display_name")

  private String displayName = null;

  @JsonProperty("header_match")

  private String headerMatch = null;

  @JsonProperty("id")

  private Integer id = null;

  @JsonProperty("url")

  private String url = null;

  @JsonProperty("verbosity")

  private String verbosity = null;
  public ExternalFeed createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  

  /**
  * When this external feed was added to Canvas
  * @return createdAt
  **/
  @Schema(description = "When this external feed was added to Canvas")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }
  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }
  public ExternalFeed displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  

  /**
  * The title of the feed, pulled from the feed itself. If the feed hasn&#x27;t yet been pulled, a temporary name will be synthesized based on the URL
  * @return displayName
  **/
  @Schema(example = "My Blog", description = "The title of the feed, pulled from the feed itself. If the feed hasn't yet been pulled, a temporary name will be synthesized based on the URL")
  public String getDisplayName() {
    return displayName;
  }
  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }
  public ExternalFeed headerMatch(String headerMatch) {
    this.headerMatch = headerMatch;
    return this;
  }

  

  /**
  * If not null, only feed entries whose title contains this string will trigger new posts in Canvas
  * @return headerMatch
  **/
  @Schema(example = "pattern", description = "If not null, only feed entries whose title contains this string will trigger new posts in Canvas")
  public String getHeaderMatch() {
    return headerMatch;
  }
  public void setHeaderMatch(String headerMatch) {
    this.headerMatch = headerMatch;
  }
  public ExternalFeed id(Integer id) {
    this.id = id;
    return this;
  }

  

  /**
  * The ID of the feed
  * @return id
  **/
  @Schema(example = "5", description = "The ID of the feed")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }
  public ExternalFeed url(String url) {
    this.url = url;
    return this;
  }

  

  /**
  * The HTTP/HTTPS URL to the feed
  * @return url
  **/
  @Schema(example = "http://example.com/myblog.rss", description = "The HTTP/HTTPS URL to the feed")
  public String getUrl() {
    return url;
  }
  public void setUrl(String url) {
    this.url = url;
  }
  public ExternalFeed verbosity(String verbosity) {
    this.verbosity = verbosity;
    return this;
  }

  

  /**
  * The verbosity setting determines how much of the feed&#x27;s content is imported into Canvas as part of the posting. &#x27;link_only&#x27; means that only the title and a link to the item. &#x27;truncate&#x27; means that a summary of the first portion of the item body will be used. &#x27;full&#x27; means that the full item body will be used.
  * @return verbosity
  **/
  @Schema(example = "truncate", description = "The verbosity setting determines how much of the feed's content is imported into Canvas as part of the posting. 'link_only' means that only the title and a link to the item. 'truncate' means that a summary of the first portion of the item body will be used. 'full' means that the full item body will be used.")
  public String getVerbosity() {
    return verbosity;
  }
  public void setVerbosity(String verbosity) {
    this.verbosity = verbosity;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExternalFeed externalFeed = (ExternalFeed) o;
    return Objects.equals(this.createdAt, externalFeed.createdAt) &&
        Objects.equals(this.displayName, externalFeed.displayName) &&
        Objects.equals(this.headerMatch, externalFeed.headerMatch) &&
        Objects.equals(this.id, externalFeed.id) &&
        Objects.equals(this.url, externalFeed.url) &&
        Objects.equals(this.verbosity, externalFeed.verbosity);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(createdAt, displayName, headerMatch, id, url, verbosity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExternalFeed {\n");
    
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    headerMatch: ").append(toIndentedString(headerMatch)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    verbosity: ").append(toIndentedString(verbosity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
