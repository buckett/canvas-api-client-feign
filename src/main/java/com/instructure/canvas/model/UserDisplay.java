/*
 * canvas.instructure.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.instructure.canvas.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * This mini-object is used for secondary user responses, when we just want to provide enough information to display a user.
 */
@Schema(description = "This mini-object is used for secondary user responses, when we just want to provide enough information to display a user.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-11-06T15:34:49.014533Z[Europe/London]")
public class UserDisplay {

  @JsonProperty("avatar_image_url")

  private String avatarImageUrl = null;

  @JsonProperty("html_url")

  private String htmlUrl = null;

  @JsonProperty("id")

  private Long id = null;

  @JsonProperty("short_name")

  private String shortName = null;
  public UserDisplay avatarImageUrl(String avatarImageUrl) {
    this.avatarImageUrl = avatarImageUrl;
    return this;
  }

  

  /**
  * If avatars are enabled, this field will be included and contain a url to retrieve the user&#x27;s avatar.
  * @return avatarImageUrl
  **/
  @Schema(example = "https://en.gravatar.com/avatar/d8cb8c8cd40ddf0cd05241443a591868?s=80&r=g", description = "If avatars are enabled, this field will be included and contain a url to retrieve the user's avatar.")
  public String getAvatarImageUrl() {
    return avatarImageUrl;
  }
  public void setAvatarImageUrl(String avatarImageUrl) {
    this.avatarImageUrl = avatarImageUrl;
  }
  public UserDisplay htmlUrl(String htmlUrl) {
    this.htmlUrl = htmlUrl;
    return this;
  }

  

  /**
  * URL to access user, either nested to a context or directly.
  * @return htmlUrl
  **/
  @Schema(example = "https://school.instructure.com/courses/:course_id/users/:user_id", description = "URL to access user, either nested to a context or directly.")
  public String getHtmlUrl() {
    return htmlUrl;
  }
  public void setHtmlUrl(String htmlUrl) {
    this.htmlUrl = htmlUrl;
  }
  public UserDisplay id(Long id) {
    this.id = id;
    return this;
  }

  

  /**
  * The ID of the user.
  * @return id
  **/
  @Schema(example = "2", description = "The ID of the user.")
  public Long getId() {
    return id;
  }
  public void setId(Long id) {
    this.id = id;
  }
  public UserDisplay shortName(String shortName) {
    this.shortName = shortName;
    return this;
  }

  

  /**
  * A short name the user has selected, for use in conversations or other less formal places through the site.
  * @return shortName
  **/
  @Schema(example = "Shelly", description = "A short name the user has selected, for use in conversations or other less formal places through the site.")
  public String getShortName() {
    return shortName;
  }
  public void setShortName(String shortName) {
    this.shortName = shortName;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserDisplay userDisplay = (UserDisplay) o;
    return Objects.equals(this.avatarImageUrl, userDisplay.avatarImageUrl) &&
        Objects.equals(this.htmlUrl, userDisplay.htmlUrl) &&
        Objects.equals(this.id, userDisplay.id) &&
        Objects.equals(this.shortName, userDisplay.shortName);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(avatarImageUrl, htmlUrl, id, shortName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserDisplay {\n");
    
    sb.append("    avatarImageUrl: ").append(toIndentedString(avatarImageUrl)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    shortName: ").append(toIndentedString(shortName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
