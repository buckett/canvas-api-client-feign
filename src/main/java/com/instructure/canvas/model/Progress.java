/*
 * canvas.instructure.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.instructure.canvas.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.OffsetDateTime;

/**
 * Progress
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-11-06T15:34:49.014533Z[Europe/London]")
public class Progress {

  @JsonProperty("completion")

  private Integer completion = null;

  @JsonProperty("context_id")

  private Integer contextId = null;

  @JsonProperty("context_type")

  private String contextType = null;

  @JsonProperty("created_at")

  private OffsetDateTime createdAt = null;

  @JsonProperty("id")

  private Integer id = null;

  @JsonProperty("message")

  private String message = null;

  @JsonProperty("results")

  private Object results = null;

  @JsonProperty("tag")

  private String tag = null;

  @JsonProperty("updated_at")

  private OffsetDateTime updatedAt = null;

  @JsonProperty("url")

  private String url = null;

  @JsonProperty("user_id")

  private Integer userId = null;

  @JsonProperty("workflow_state")

  private String workflowState = null;
  public Progress completion(Integer completion) {
    this.completion = completion;
    return this;
  }

  

  /**
  * percent completed
  * @return completion
  **/
  @Schema(example = "100", description = "percent completed")
  public Integer getCompletion() {
    return completion;
  }
  public void setCompletion(Integer completion) {
    this.completion = completion;
  }
  public Progress contextId(Integer contextId) {
    this.contextId = contextId;
    return this;
  }

  

  /**
  * the context owning the job.
  * @return contextId
  **/
  @Schema(example = "1", description = "the context owning the job.")
  public Integer getContextId() {
    return contextId;
  }
  public void setContextId(Integer contextId) {
    this.contextId = contextId;
  }
  public Progress contextType(String contextType) {
    this.contextType = contextType;
    return this;
  }

  

  /**
  * Get contextType
  * @return contextType
  **/
  @Schema(example = "Account", description = "")
  public String getContextType() {
    return contextType;
  }
  public void setContextType(String contextType) {
    this.contextType = contextType;
  }
  public Progress createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  

  /**
  * the time the job was created
  * @return createdAt
  **/
  @Schema(description = "the time the job was created")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }
  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }
  public Progress id(Integer id) {
    this.id = id;
    return this;
  }

  

  /**
  * the ID of the Progress object
  * @return id
  **/
  @Schema(example = "1", description = "the ID of the Progress object")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }
  public Progress message(String message) {
    this.message = message;
    return this;
  }

  

  /**
  * optional details about the job
  * @return message
  **/
  @Schema(example = "17 courses processed", description = "optional details about the job")
  public String getMessage() {
    return message;
  }
  public void setMessage(String message) {
    this.message = message;
  }
  public Progress results(Object results) {
    this.results = results;
    return this;
  }

  

  /**
  * optional results of the job. omitted when job is still pending
  * @return results
  **/
  @Schema(example = "{\"id\":\"123\"}", description = "optional results of the job. omitted when job is still pending")
  public Object getResults() {
    return results;
  }
  public void setResults(Object results) {
    this.results = results;
  }
  public Progress tag(String tag) {
    this.tag = tag;
    return this;
  }

  

  /**
  * the type of operation
  * @return tag
  **/
  @Schema(example = "course_batch_update", description = "the type of operation")
  public String getTag() {
    return tag;
  }
  public void setTag(String tag) {
    this.tag = tag;
  }
  public Progress updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  

  /**
  * the time the job was last updated
  * @return updatedAt
  **/
  @Schema(description = "the time the job was last updated")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }
  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }
  public Progress url(String url) {
    this.url = url;
    return this;
  }

  

  /**
  * url where a progress update can be retrieved
  * @return url
  **/
  @Schema(example = "https://canvas.example.edu/api/v1/progress/1", description = "url where a progress update can be retrieved")
  public String getUrl() {
    return url;
  }
  public void setUrl(String url) {
    this.url = url;
  }
  public Progress userId(Integer userId) {
    this.userId = userId;
    return this;
  }

  

  /**
  * the id of the user who started the job
  * @return userId
  **/
  @Schema(example = "123", description = "the id of the user who started the job")
  public Integer getUserId() {
    return userId;
  }
  public void setUserId(Integer userId) {
    this.userId = userId;
  }
  public Progress workflowState(String workflowState) {
    this.workflowState = workflowState;
    return this;
  }

  

  /**
  * the state of the job one of &#x27;queued&#x27;, &#x27;running&#x27;, &#x27;completed&#x27;, &#x27;failed&#x27;
  * @return workflowState
  **/
  @Schema(example = "completed", description = "the state of the job one of 'queued', 'running', 'completed', 'failed'")
  public String getWorkflowState() {
    return workflowState;
  }
  public void setWorkflowState(String workflowState) {
    this.workflowState = workflowState;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Progress progress = (Progress) o;
    return Objects.equals(this.completion, progress.completion) &&
        Objects.equals(this.contextId, progress.contextId) &&
        Objects.equals(this.contextType, progress.contextType) &&
        Objects.equals(this.createdAt, progress.createdAt) &&
        Objects.equals(this.id, progress.id) &&
        Objects.equals(this.message, progress.message) &&
        Objects.equals(this.results, progress.results) &&
        Objects.equals(this.tag, progress.tag) &&
        Objects.equals(this.updatedAt, progress.updatedAt) &&
        Objects.equals(this.url, progress.url) &&
        Objects.equals(this.userId, progress.userId) &&
        Objects.equals(this.workflowState, progress.workflowState);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(completion, contextId, contextType, createdAt, id, message, results, tag, updatedAt, url, userId, workflowState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Progress {\n");
    
    sb.append("    completion: ").append(toIndentedString(completion)).append("\n");
    sb.append("    contextId: ").append(toIndentedString(contextId)).append("\n");
    sb.append("    contextType: ").append(toIndentedString(contextType)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    results: ").append(toIndentedString(results)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    workflowState: ").append(toIndentedString(workflowState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
