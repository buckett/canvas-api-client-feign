/*
 * canvas.instructure.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.instructure.canvas.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * Grade
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-11-06T15:34:49.014533Z[Europe/London]")
public class Grade {

  @JsonProperty("current_grade")

  private String currentGrade = null;

  @JsonProperty("current_score")

  private String currentScore = null;

  @JsonProperty("final_grade")

  private String finalGrade = null;

  @JsonProperty("final_score")

  private String finalScore = null;

  @JsonProperty("html_url")

  private String htmlUrl = null;

  @JsonProperty("unposted_current_grade")

  private String unpostedCurrentGrade = null;

  @JsonProperty("unposted_current_score")

  private String unpostedCurrentScore = null;

  @JsonProperty("unposted_final_grade")

  private String unpostedFinalGrade = null;

  @JsonProperty("unposted_final_score")

  private String unpostedFinalScore = null;
  public Grade currentGrade(String currentGrade) {
    this.currentGrade = currentGrade;
    return this;
  }

  

  /**
  * The user&#x27;s current grade in the class. Only included if user has permissions to view this grade.
  * @return currentGrade
  **/
  @Schema(description = "The user's current grade in the class. Only included if user has permissions to view this grade.")
  public String getCurrentGrade() {
    return currentGrade;
  }
  public void setCurrentGrade(String currentGrade) {
    this.currentGrade = currentGrade;
  }
  public Grade currentScore(String currentScore) {
    this.currentScore = currentScore;
    return this;
  }

  

  /**
  * The user&#x27;s current score in the class. Only included if user has permissions to view this score.
  * @return currentScore
  **/
  @Schema(description = "The user's current score in the class. Only included if user has permissions to view this score.")
  public String getCurrentScore() {
    return currentScore;
  }
  public void setCurrentScore(String currentScore) {
    this.currentScore = currentScore;
  }
  public Grade finalGrade(String finalGrade) {
    this.finalGrade = finalGrade;
    return this;
  }

  

  /**
  * The user&#x27;s final grade for the class. Only included if user has permissions to view this grade.
  * @return finalGrade
  **/
  @Schema(description = "The user's final grade for the class. Only included if user has permissions to view this grade.")
  public String getFinalGrade() {
    return finalGrade;
  }
  public void setFinalGrade(String finalGrade) {
    this.finalGrade = finalGrade;
  }
  public Grade finalScore(String finalScore) {
    this.finalScore = finalScore;
    return this;
  }

  

  /**
  * The user&#x27;s final score for the class. Only included if user has permissions to view this score.
  * @return finalScore
  **/
  @Schema(description = "The user's final score for the class. Only included if user has permissions to view this score.")
  public String getFinalScore() {
    return finalScore;
  }
  public void setFinalScore(String finalScore) {
    this.finalScore = finalScore;
  }
  public Grade htmlUrl(String htmlUrl) {
    this.htmlUrl = htmlUrl;
    return this;
  }

  

  /**
  * The URL to the Canvas web UI page for the user&#x27;s grades, if this is a student enrollment.
  * @return htmlUrl
  **/
  @Schema(description = "The URL to the Canvas web UI page for the user's grades, if this is a student enrollment.")
  public String getHtmlUrl() {
    return htmlUrl;
  }
  public void setHtmlUrl(String htmlUrl) {
    this.htmlUrl = htmlUrl;
  }
  public Grade unpostedCurrentGrade(String unpostedCurrentGrade) {
    this.unpostedCurrentGrade = unpostedCurrentGrade;
    return this;
  }

  

  /**
  * The user&#x27;s current grade in the class including muted/unposted assignments. Only included if user has permissions to view this grade, typically teachers, TAs, and admins.
  * @return unpostedCurrentGrade
  **/
  @Schema(description = "The user's current grade in the class including muted/unposted assignments. Only included if user has permissions to view this grade, typically teachers, TAs, and admins.")
  public String getUnpostedCurrentGrade() {
    return unpostedCurrentGrade;
  }
  public void setUnpostedCurrentGrade(String unpostedCurrentGrade) {
    this.unpostedCurrentGrade = unpostedCurrentGrade;
  }
  public Grade unpostedCurrentScore(String unpostedCurrentScore) {
    this.unpostedCurrentScore = unpostedCurrentScore;
    return this;
  }

  

  /**
  * The user&#x27;s current score in the class including muted/unposted assignments. Only included if user has permissions to view this score, typically teachers, TAs, and admins..
  * @return unpostedCurrentScore
  **/
  @Schema(description = "The user's current score in the class including muted/unposted assignments. Only included if user has permissions to view this score, typically teachers, TAs, and admins..")
  public String getUnpostedCurrentScore() {
    return unpostedCurrentScore;
  }
  public void setUnpostedCurrentScore(String unpostedCurrentScore) {
    this.unpostedCurrentScore = unpostedCurrentScore;
  }
  public Grade unpostedFinalGrade(String unpostedFinalGrade) {
    this.unpostedFinalGrade = unpostedFinalGrade;
    return this;
  }

  

  /**
  * The user&#x27;s final grade for the class including muted/unposted assignments. Only included if user has permissions to view this grade, typically teachers, TAs, and admins..
  * @return unpostedFinalGrade
  **/
  @Schema(description = "The user's final grade for the class including muted/unposted assignments. Only included if user has permissions to view this grade, typically teachers, TAs, and admins..")
  public String getUnpostedFinalGrade() {
    return unpostedFinalGrade;
  }
  public void setUnpostedFinalGrade(String unpostedFinalGrade) {
    this.unpostedFinalGrade = unpostedFinalGrade;
  }
  public Grade unpostedFinalScore(String unpostedFinalScore) {
    this.unpostedFinalScore = unpostedFinalScore;
    return this;
  }

  

  /**
  * The user&#x27;s final score for the class including muted/unposted assignments. Only included if user has permissions to view this score, typically teachers, TAs, and admins..
  * @return unpostedFinalScore
  **/
  @Schema(description = "The user's final score for the class including muted/unposted assignments. Only included if user has permissions to view this score, typically teachers, TAs, and admins..")
  public String getUnpostedFinalScore() {
    return unpostedFinalScore;
  }
  public void setUnpostedFinalScore(String unpostedFinalScore) {
    this.unpostedFinalScore = unpostedFinalScore;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Grade grade = (Grade) o;
    return Objects.equals(this.currentGrade, grade.currentGrade) &&
        Objects.equals(this.currentScore, grade.currentScore) &&
        Objects.equals(this.finalGrade, grade.finalGrade) &&
        Objects.equals(this.finalScore, grade.finalScore) &&
        Objects.equals(this.htmlUrl, grade.htmlUrl) &&
        Objects.equals(this.unpostedCurrentGrade, grade.unpostedCurrentGrade) &&
        Objects.equals(this.unpostedCurrentScore, grade.unpostedCurrentScore) &&
        Objects.equals(this.unpostedFinalGrade, grade.unpostedFinalGrade) &&
        Objects.equals(this.unpostedFinalScore, grade.unpostedFinalScore);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(currentGrade, currentScore, finalGrade, finalScore, htmlUrl, unpostedCurrentGrade, unpostedCurrentScore, unpostedFinalGrade, unpostedFinalScore);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Grade {\n");
    
    sb.append("    currentGrade: ").append(toIndentedString(currentGrade)).append("\n");
    sb.append("    currentScore: ").append(toIndentedString(currentScore)).append("\n");
    sb.append("    finalGrade: ").append(toIndentedString(finalGrade)).append("\n");
    sb.append("    finalScore: ").append(toIndentedString(finalScore)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    unpostedCurrentGrade: ").append(toIndentedString(unpostedCurrentGrade)).append("\n");
    sb.append("    unpostedCurrentScore: ").append(toIndentedString(unpostedCurrentScore)).append("\n");
    sb.append("    unpostedFinalGrade: ").append(toIndentedString(unpostedFinalGrade)).append("\n");
    sb.append("    unpostedFinalScore: ").append(toIndentedString(unpostedFinalScore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
