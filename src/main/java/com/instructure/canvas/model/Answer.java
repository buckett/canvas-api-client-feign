/*
 * canvas.instructure.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.instructure.canvas.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.math.BigDecimal;

/**
 * Answer
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-11-06T15:34:49.014533Z[Europe/London]")
public class Answer {

  @JsonProperty("answer_comments")

  private String answerComments = null;

  @JsonProperty("answer_match_left")

  private String answerMatchLeft = null;

  @JsonProperty("answer_match_right")

  private String answerMatchRight = null;

  @JsonProperty("answer_text")

  private String answerText = null;

  @JsonProperty("answer_weight")

  private Long answerWeight = null;

  @JsonProperty("approximate")

  private BigDecimal approximate = null;

  @JsonProperty("blank_id")

  private Long blankId = null;

  @JsonProperty("end")

  private Long end = null;

  @JsonProperty("exact")

  private Long exact = null;

  @JsonProperty("id")

  private Long id = null;

  @JsonProperty("margin")

  private Long margin = null;

  @JsonProperty("matching_answer_incorrect_matches")

  private String matchingAnswerIncorrectMatches = null;

  @JsonProperty("numerical_answer_type")

  private String numericalAnswerType = null;

  @JsonProperty("precision")

  private Long precision = null;

  @JsonProperty("start")

  private Long start = null;

  @JsonProperty("text_after_answers")

  private String textAfterAnswers = null;
  public Answer answerComments(String answerComments) {
    this.answerComments = answerComments;
    return this;
  }

  

  /**
  * Specific contextual comments for a particular answer.
  * @return answerComments
  **/
  @Schema(example = "Remember to check your spelling prior to submitting this answer.", description = "Specific contextual comments for a particular answer.")
  public String getAnswerComments() {
    return answerComments;
  }
  public void setAnswerComments(String answerComments) {
    this.answerComments = answerComments;
  }
  public Answer answerMatchLeft(String answerMatchLeft) {
    this.answerMatchLeft = answerMatchLeft;
    return this;
  }

  

  /**
  * Used in matching questions.  The static value of the answer that will be displayed on the left for students to match for.
  * @return answerMatchLeft
  **/
  @Schema(example = "Salt Lake City", description = "Used in matching questions.  The static value of the answer that will be displayed on the left for students to match for.")
  public String getAnswerMatchLeft() {
    return answerMatchLeft;
  }
  public void setAnswerMatchLeft(String answerMatchLeft) {
    this.answerMatchLeft = answerMatchLeft;
  }
  public Answer answerMatchRight(String answerMatchRight) {
    this.answerMatchRight = answerMatchRight;
    return this;
  }

  

  /**
  * Used in matching questions. The correct match for the value given in answer_match_left.  Will be displayed in a dropdown with the other answer_match_right values..
  * @return answerMatchRight
  **/
  @Schema(example = "Utah", description = "Used in matching questions. The correct match for the value given in answer_match_left.  Will be displayed in a dropdown with the other answer_match_right values..")
  public String getAnswerMatchRight() {
    return answerMatchRight;
  }
  public void setAnswerMatchRight(String answerMatchRight) {
    this.answerMatchRight = answerMatchRight;
  }
  public Answer answerText(String answerText) {
    this.answerText = answerText;
    return this;
  }

  

  /**
  * The text of the answer.
  * @return answerText
  **/
  @Schema(example = "Constantinople", required = true, description = "The text of the answer.")
  public String getAnswerText() {
    return answerText;
  }
  public void setAnswerText(String answerText) {
    this.answerText = answerText;
  }
  public Answer answerWeight(Long answerWeight) {
    this.answerWeight = answerWeight;
    return this;
  }

  

  /**
  * An integer to determine correctness of the answer. Incorrect answers should be 0, correct answers should be non-negative.
  * @return answerWeight
  **/
  @Schema(example = "100", required = true, description = "An integer to determine correctness of the answer. Incorrect answers should be 0, correct answers should be non-negative.")
  public Long getAnswerWeight() {
    return answerWeight;
  }
  public void setAnswerWeight(Long answerWeight) {
    this.answerWeight = answerWeight;
  }
  public Answer approximate(BigDecimal approximate) {
    this.approximate = approximate;
    return this;
  }

  

  /**
  * Used in numerical questions of type &#x27;precision_answer&#x27;.  The value the answer should equal.
  * @return approximate
  **/
  @Schema(example = "1.2346E+9", description = "Used in numerical questions of type 'precision_answer'.  The value the answer should equal.")
  public BigDecimal getApproximate() {
    return approximate;
  }
  public void setApproximate(BigDecimal approximate) {
    this.approximate = approximate;
  }
  public Answer blankId(Long blankId) {
    this.blankId = blankId;
    return this;
  }

  

  /**
  * Used in fill in multiple blank and multiple dropdowns questions.
  * @return blankId
  **/
  @Schema(example = "1170", description = "Used in fill in multiple blank and multiple dropdowns questions.")
  public Long getBlankId() {
    return blankId;
  }
  public void setBlankId(Long blankId) {
    this.blankId = blankId;
  }
  public Answer end(Long end) {
    this.end = end;
    return this;
  }

  

  /**
  * Used in numerical questions of type &#x27;range_answer&#x27;. The end of the allowed range (inclusive).
  * @return end
  **/
  @Schema(example = "10", description = "Used in numerical questions of type 'range_answer'. The end of the allowed range (inclusive).")
  public Long getEnd() {
    return end;
  }
  public void setEnd(Long end) {
    this.end = end;
  }
  public Answer exact(Long exact) {
    this.exact = exact;
    return this;
  }

  

  /**
  * Used in numerical questions of type &#x27;exact_answer&#x27;.  The value the answer should equal.
  * @return exact
  **/
  @Schema(example = "42", description = "Used in numerical questions of type 'exact_answer'.  The value the answer should equal.")
  public Long getExact() {
    return exact;
  }
  public void setExact(Long exact) {
    this.exact = exact;
  }
  public Answer id(Long id) {
    this.id = id;
    return this;
  }

  

  /**
  * The unique identifier for the answer.  Do not supply if this answer is part of a new question
  * @return id
  **/
  @Schema(example = "6656", description = "The unique identifier for the answer.  Do not supply if this answer is part of a new question")
  public Long getId() {
    return id;
  }
  public void setId(Long id) {
    this.id = id;
  }
  public Answer margin(Long margin) {
    this.margin = margin;
    return this;
  }

  

  /**
  * Used in numerical questions of type &#x27;exact_answer&#x27;. The margin of error allowed for the student&#x27;s answer.
  * @return margin
  **/
  @Schema(example = "4", description = "Used in numerical questions of type 'exact_answer'. The margin of error allowed for the student's answer.")
  public Long getMargin() {
    return margin;
  }
  public void setMargin(Long margin) {
    this.margin = margin;
  }
  public Answer matchingAnswerIncorrectMatches(String matchingAnswerIncorrectMatches) {
    this.matchingAnswerIncorrectMatches = matchingAnswerIncorrectMatches;
    return this;
  }

  

  /**
  * Used in matching questions. A list of distractors, delimited by new lines ( ) that will be seeded with all the answer_match_right values.
  * @return matchingAnswerIncorrectMatches
  **/
  @Schema(example = "Nevada California Washington", description = "Used in matching questions. A list of distractors, delimited by new lines ( ) that will be seeded with all the answer_match_right values.")
  public String getMatchingAnswerIncorrectMatches() {
    return matchingAnswerIncorrectMatches;
  }
  public void setMatchingAnswerIncorrectMatches(String matchingAnswerIncorrectMatches) {
    this.matchingAnswerIncorrectMatches = matchingAnswerIncorrectMatches;
  }
  public Answer numericalAnswerType(String numericalAnswerType) {
    this.numericalAnswerType = numericalAnswerType;
    return this;
  }

  

  /**
  * Used in numerical questions.  Values can be &#x27;exact_answer&#x27;, &#x27;range_answer&#x27;, or &#x27;precision_answer&#x27;.
  * @return numericalAnswerType
  **/
  @Schema(example = "exact_answer", description = "Used in numerical questions.  Values can be 'exact_answer', 'range_answer', or 'precision_answer'.")
  public String getNumericalAnswerType() {
    return numericalAnswerType;
  }
  public void setNumericalAnswerType(String numericalAnswerType) {
    this.numericalAnswerType = numericalAnswerType;
  }
  public Answer precision(Long precision) {
    this.precision = precision;
    return this;
  }

  

  /**
  * Used in numerical questions of type &#x27;precision_answer&#x27;. The numerical precision that will be used when comparing the student&#x27;s answer.
  * @return precision
  **/
  @Schema(example = "4", description = "Used in numerical questions of type 'precision_answer'. The numerical precision that will be used when comparing the student's answer.")
  public Long getPrecision() {
    return precision;
  }
  public void setPrecision(Long precision) {
    this.precision = precision;
  }
  public Answer start(Long start) {
    this.start = start;
    return this;
  }

  

  /**
  * Used in numerical questions of type &#x27;range_answer&#x27;. The start of the allowed range (inclusive).
  * @return start
  **/
  @Schema(example = "1", description = "Used in numerical questions of type 'range_answer'. The start of the allowed range (inclusive).")
  public Long getStart() {
    return start;
  }
  public void setStart(Long start) {
    this.start = start;
  }
  public Answer textAfterAnswers(String textAfterAnswers) {
    this.textAfterAnswers = textAfterAnswers;
    return this;
  }

  

  /**
  * Used in missing word questions.  The text to follow the missing word
  * @return textAfterAnswers
  **/
  @Schema(example = " is the capital of Utah.", description = "Used in missing word questions.  The text to follow the missing word")
  public String getTextAfterAnswers() {
    return textAfterAnswers;
  }
  public void setTextAfterAnswers(String textAfterAnswers) {
    this.textAfterAnswers = textAfterAnswers;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Answer answer = (Answer) o;
    return Objects.equals(this.answerComments, answer.answerComments) &&
        Objects.equals(this.answerMatchLeft, answer.answerMatchLeft) &&
        Objects.equals(this.answerMatchRight, answer.answerMatchRight) &&
        Objects.equals(this.answerText, answer.answerText) &&
        Objects.equals(this.answerWeight, answer.answerWeight) &&
        Objects.equals(this.approximate, answer.approximate) &&
        Objects.equals(this.blankId, answer.blankId) &&
        Objects.equals(this.end, answer.end) &&
        Objects.equals(this.exact, answer.exact) &&
        Objects.equals(this.id, answer.id) &&
        Objects.equals(this.margin, answer.margin) &&
        Objects.equals(this.matchingAnswerIncorrectMatches, answer.matchingAnswerIncorrectMatches) &&
        Objects.equals(this.numericalAnswerType, answer.numericalAnswerType) &&
        Objects.equals(this.precision, answer.precision) &&
        Objects.equals(this.start, answer.start) &&
        Objects.equals(this.textAfterAnswers, answer.textAfterAnswers);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(answerComments, answerMatchLeft, answerMatchRight, answerText, answerWeight, approximate, blankId, end, exact, id, margin, matchingAnswerIncorrectMatches, numericalAnswerType, precision, start, textAfterAnswers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Answer {\n");
    
    sb.append("    answerComments: ").append(toIndentedString(answerComments)).append("\n");
    sb.append("    answerMatchLeft: ").append(toIndentedString(answerMatchLeft)).append("\n");
    sb.append("    answerMatchRight: ").append(toIndentedString(answerMatchRight)).append("\n");
    sb.append("    answerText: ").append(toIndentedString(answerText)).append("\n");
    sb.append("    answerWeight: ").append(toIndentedString(answerWeight)).append("\n");
    sb.append("    approximate: ").append(toIndentedString(approximate)).append("\n");
    sb.append("    blankId: ").append(toIndentedString(blankId)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    exact: ").append(toIndentedString(exact)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    margin: ").append(toIndentedString(margin)).append("\n");
    sb.append("    matchingAnswerIncorrectMatches: ").append(toIndentedString(matchingAnswerIncorrectMatches)).append("\n");
    sb.append("    numericalAnswerType: ").append(toIndentedString(numericalAnswerType)).append("\n");
    sb.append("    precision: ").append(toIndentedString(precision)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    textAfterAnswers: ").append(toIndentedString(textAfterAnswers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
