/*
 * canvas.instructure.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.instructure.canvas.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * AccountNotification
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-11-06T15:34:49.014533Z[Europe/London]")
public class AccountNotification {

  @JsonProperty("end_at")

  private OffsetDateTime endAt = null;

  @JsonProperty("icon")

  private String icon = null;

  @JsonProperty("message")

  private String message = null;

  @JsonProperty("role_ids")

  private List<Integer> roleIds = null;

  @JsonProperty("roles")

  private List<String> roles = null;

  @JsonProperty("start_at")

  private OffsetDateTime startAt = null;

  @JsonProperty("subject")

  private String subject = null;
  public AccountNotification endAt(OffsetDateTime endAt) {
    this.endAt = endAt;
    return this;
  }

  

  /**
  * When to expire the notification.
  * @return endAt
  **/
  @Schema(description = "When to expire the notification.")
  public OffsetDateTime getEndAt() {
    return endAt;
  }
  public void setEndAt(OffsetDateTime endAt) {
    this.endAt = endAt;
  }
  public AccountNotification icon(String icon) {
    this.icon = icon;
    return this;
  }

  

  /**
  * The icon to display with the message.  Defaults to warning.
  * @return icon
  **/
  @Schema(example = "information", description = "The icon to display with the message.  Defaults to warning.")
  public String getIcon() {
    return icon;
  }
  public void setIcon(String icon) {
    this.icon = icon;
  }
  public AccountNotification message(String message) {
    this.message = message;
    return this;
  }

  

  /**
  * The message to be sent in the notification.
  * @return message
  **/
  @Schema(example = "This is a test of the notification system.", description = "The message to be sent in the notification.")
  public String getMessage() {
    return message;
  }
  public void setMessage(String message) {
    this.message = message;
  }
  public AccountNotification roleIds(List<Integer> roleIds) {
    this.roleIds = roleIds;
    return this;
  }

  public AccountNotification addRoleIdsItem(Integer roleIdsItem) {
    if (this.roleIds == null) {
      this.roleIds = new ArrayList<Integer>();
    }
    this.roleIds.add(roleIdsItem);
    return this;
  }

  /**
  * The roles to send the notification to.  If roles is not passed it defaults to all roles
  * @return roleIds
  **/
  @Schema(example = "[1]", description = "The roles to send the notification to.  If roles is not passed it defaults to all roles")
  public List<Integer> getRoleIds() {
    return roleIds;
  }
  public void setRoleIds(List<Integer> roleIds) {
    this.roleIds = roleIds;
  }
  public AccountNotification roles(List<String> roles) {
    this.roles = roles;
    return this;
  }

  public AccountNotification addRolesItem(String rolesItem) {
    if (this.roles == null) {
      this.roles = new ArrayList<String>();
    }
    this.roles.add(rolesItem);
    return this;
  }

  /**
  * (Deprecated) The roles to send the notification to.  If roles is not passed it defaults to all roles
  * @return roles
  **/
  @Schema(example = "[StudentEnrollment]", description = "(Deprecated) The roles to send the notification to.  If roles is not passed it defaults to all roles")
  public List<String> getRoles() {
    return roles;
  }
  public void setRoles(List<String> roles) {
    this.roles = roles;
  }
  public AccountNotification startAt(OffsetDateTime startAt) {
    this.startAt = startAt;
    return this;
  }

  

  /**
  * When to send out the notification.
  * @return startAt
  **/
  @Schema(description = "When to send out the notification.")
  public OffsetDateTime getStartAt() {
    return startAt;
  }
  public void setStartAt(OffsetDateTime startAt) {
    this.startAt = startAt;
  }
  public AccountNotification subject(String subject) {
    this.subject = subject;
    return this;
  }

  

  /**
  * The subject of the notifications
  * @return subject
  **/
  @Schema(example = "Attention Students", description = "The subject of the notifications")
  public String getSubject() {
    return subject;
  }
  public void setSubject(String subject) {
    this.subject = subject;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountNotification accountNotification = (AccountNotification) o;
    return Objects.equals(this.endAt, accountNotification.endAt) &&
        Objects.equals(this.icon, accountNotification.icon) &&
        Objects.equals(this.message, accountNotification.message) &&
        Objects.equals(this.roleIds, accountNotification.roleIds) &&
        Objects.equals(this.roles, accountNotification.roles) &&
        Objects.equals(this.startAt, accountNotification.startAt) &&
        Objects.equals(this.subject, accountNotification.subject);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(endAt, icon, message, roleIds, roles, startAt, subject);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountNotification {\n");
    
    sb.append("    endAt: ").append(toIndentedString(endAt)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    roleIds: ").append(toIndentedString(roleIds)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    startAt: ").append(toIndentedString(startAt)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
